#!/bin/sh
#-- python3 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ python3.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.python.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=Python
NAME=python3
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.5.2}
SVER=$(echo ${VERSION} | cut -d. -f1-2)
PVER=${PVER:-3.5.2-0}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.asc
PDIR=$(echo ${PVER} | cut -d- -f1)
PSRCARCHIVE=python-gentoo-patches-${PVER}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.python.org/ftp/python/${VERSION}/${SRCARCHIVE}"
SDL_URL="http://www.python.org/ftp/python/${VERSION}/${SSRCARCHIVE}"
MIRROR_GENTOO=${MIRROR_GENTOO:-ftp://ftp.ussg.iu.edu/pub/linux/gentoo}
PDL_URL="${MIRROR_GENTOO}/distfiles/${PSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${SDL_URL} || exit 1
test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ -x /usr/bin/${NAME} ]; then
  echo "Python 3 detected."
  echo
  echo "Remove your existing python3 first."
  echo
  exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O3 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O3 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O3 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O3"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

ABIFLAGS=m
LDVERSION=${SVER}${ABIFLAGS}
# Location for Python site-packages:
PYLIBDIR=${PKG}/usr/lib${LIBDIRSUFFIX}/python${SVER}
SITEPK=${PYLIBDIR}/site-packages
TOOLSDIR=../lib${LIBDIRSUFFIX}/python${SVER}/site-packages

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${PSRCARCHIVE} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .
find . -type d -print0 | xargs -0 chmod 0755

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

#   Remove embedded copy of expat:
rm -rf Modules/expat || exit 1

#   Remove embedded copy of libffi:
for SUBDIR in darwin libffi libffi_arm_wince libffi_msvc libffi_osx ; do
  rm -rf Modules/_ctypes/${SUBDIR} || exit 1 ;
done

#   Remove embedded copy of zlib:
rm -rf Modules/zlib || exit 1

sed --in-place \
  --expression="s|http://docs.python.org/library|http://docs.python.org/${SVER}/library|g" \
  Lib/pydoc.py || exit 1

find . -name ".cvsignore" |xargs rm -f

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  autoreconf -ivf || exit $?
fi

SLKCFLAGS+=" -D_GNU_SOURCE -fPIC -fwrapv $(pkg-config --cflags openssl)"

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export OPT="${SLKCFLAGS}"
export LDFLAGS+=" $(pkg-config --libs-only-L openssl)"
export CPPFLAGS+="$(pkg-config --cflags-only-I libffi libtirpc)"
export CC=gcc
export CXX=g++

mkdir -p build/optimized
( cd build/optimized || exit 1

${SB_SROOT}/configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --enable-shared \
  --with-threads \
  --enable-ipv6 \
  --with-valgrind \
  --with-computed-gotos=yes \
  --with-system-expat \
  --with-system-ffi \
  --with-dbmliborder=gdbm:ndbm:bdb \
  --without-dtrace \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

make -j${NJOBS} || make || exit $?
make install DESTDIR=${PKG} || exit $?

) || exit $?

DirHoldingGdbPy=${PKG}/usr/share/gdb/auto-load/usr/lib${LIBDIRSUFFIX}
PathOfGdbPy=${DirHoldingGdbPy}/libpython${LDVERSION}.so.1.0.debug-gdb.py

mkdir -p ${DirHoldingGdbPy}
cp Tools/gdb/libpython.py ${PathOfGdbPy} || exit 1

mkdir -p ${SITEPK}/__pycache__

mv ${PKG}/usr/bin/2to3 ${PKG}/usr/bin/${NAME}-2to3 || exit 1

# Junk, no point in putting in -test sub-pkg
rm -f ${PYLIBDIR}/idlelib/testcode.py*

rm -f ${PYLIBDIR}/email/test/data/audiotest.au \
  ${PYLIBDIR}/test/audiotest.au

# Remove SLKCFLAGS from modules build Makefile.
# This fix some possible problems.
sed \
  -e "/^OPT=/s|${SLKCFLAGS}||g" \
  -e "/CPPFLAGS=/s|$(pkg-config --cflags-only-I libtirpc)||g" \
  -i ${PYLIBDIR}/config-${LDVERSION}/Makefile || exit 1

unset MARCH
case "${ARCH}" in
  i[3-6]86|s390)  MARCH=32
             ;;
    x86_64)  MARCH=64
             ;;
esac

PyIncludeDirs=python${LDVERSION}

if [ -n "${MARCH}" ] ;then
  mv ${PKG}/usr/include/${PyIncludeDirs}/pyconfig.h  \
    ${PKG}/usr/include/${PyIncludeDirs}/pyconfig-${MARCH}.h || exit 1

cat > ${PKG}/usr/include/${PyIncludeDirs}/pyconfig.h << EOF
#include <bits/wordsize.h>

#if __WORDSIZE == 32
#include "pyconfig-32.h"
#elif __WORDSIZE == 64
#include "pyconfig-64.h"
#else
#error "Unknown word size"
#endif
EOF

sed -i -e "s/'pyconfig.h'/'pyconfig-${MARCH}.h'/" \
  ${PYLIBDIR}/distutils/sysconfig.py \
  ${PYLIBDIR}/sysconfig.py || exit 1

fi

LD_LIBRARY_PATH="${SB_SROOT}/build/optimized${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" ${SB_SROOT}/build/optimized/python \
  Tools/scripts/pathfix.py -i "/usr/bin/python${SVER}" ${SB_SROOT}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

( cd ${PKG}/usr/bin || exit 1
  rm -f python python-config
  ln -sf python${LDVERSION} python${SVER}
  ln -sf python${LDVERSION} ${NAME}
  #ln -sf python${SVER}-config python-config
)

# We'll install the python-tools under site-packages:
mkdir -p ${SITEPK}
( cd Tools ; cp -a * ${SITEPK} )

rm -f ${SITEPK}/pynche/pynche.pyw

mkdir -p ${SITEPK}/Doc
cp -ar Doc/tools ${SITEPK}/Doc/ || exit 1

find ${PKG} -name \*.py \
  \( \( \! -perm /u+x,g+x,o+x -exec sed -e '/^#!/Q 0' -e 'Q 1' {} \; \
  -print -exec sed -i '1d' {} \; \) -o \( \
  -perm /u+x,g+x,o+x ! -exec grep -m 1 -q '^#!' {} \; \
  -exec chmod a-x {} \; \) \)

# .xpm and .xbm files should not be executable:
find ${PKG} \
  \( -name \*.xbm -o -name \*.xpm -o -name \*.xpm.1 \) \
  -exec chmod a-x {} \;

# Remove executable flag from files that shouldn't have it:
chmod a-x \
  ${PYLIBDIR}/distutils/tests/Setup.sample \
  ${PYLIBDIR}/Tools/README

rm -f ${PYLIBDIR}/LICENSE.txt

find ${PKG}/ -name '*.py' -exec sed -i 's/\r//' {} ';'

find ${PKG} \
  -perm 555 -exec chmod 755 {} \;

ldd ${PYLIBDIR}/lib-dynload/_curses*.so \
  | grep curses \
  | grep libncurses.so && touch cursesw.tmp

if [ -f cursesw.tmp ] ;then
  echo "_curses.so linked against libncurses.so" ; exit 1
fi

mv Tools/modulator/README Tools/modulator/README.modulator
mv Tools/pynche/README Tools/pynche/README.pynche

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README Misc html ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
mv ${SITEPK}/README ${DOCDIR}/README.python-tools
( cd ${DOCDIR}
  ln -sf ../${TOOLSDIR} Tools
)
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

find ${PKG} \( -name '*~' -o -name '*.orig' -o -name '*.lib64' -o -name '*.bat' \) -exec rm -f {} ';'

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
