#!/bin/sh
#-- synergy for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ synergy.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://synergy-foss.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=synergy
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.7.4}
RVER=$(echo ${VERSION} | cut -d- -f1)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-tgz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable gui
SB_GUI=${SB_GUI:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}-stable
SRCARCHIVE=v${VERSION}-stable.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="https://github.com/${NAME}/${NAME}/archive/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
SRCARCHIVE=${SRCDIR}.tar.gz
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, check VERSION and try again."
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../qt4.options ] && source ../qt4.options

_qt5_prefix=${_qt5_prefix:-/usr/lib${LIBDIRSUFFIX}/qt5}
_qt5_bindir=${_qt5_bindir:-${_qt5_prefix}/bin}
_qt5_qmake=${_qt5_qmake:-${_qt5_bindir}/qmake}

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt5_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt5_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

for filepro in $(find . -type f -name "*.pro") ; do
  echo "QMAKE_CFLAGS_RELEASE += ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_CXXFLAGS_RELEASE += ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_LFLAGS_RELEASE += ${LDFLAGS}" >> "${filepro}"
done

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export FFLAGS="${SLKCFLAGS}"

mkdir -p build
( cd build || exit $?

  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_INSTALL_PREFIX:PATH=/usr \
    -DSYSCONF_INSTALL_DIR:PATH=/etc \
    -DINCLUDE_INSTALL_DIR:PATH=/usr/include \
    -DCMAKE_INSTALL_LIBDIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DLIB_INSTALL_DIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DSHARE_INSTALL_PREFIX:PATH=/usr/share \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    || exit $?

  make -j${NJOBS} || make || exit $?

) || exit $?

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/plugins
install -pm0755 bin/${NAME}{c,d,s} bin/u${NAME} bin/syntool ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit $?
install -pm0755 bin/plugins/libns.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/plugins/ || exit $?

if [ "${SB_GUI}" = "YES" ] ;then
  ( cd src/gui
    ${_qt5_qmake} gui.pro PREFIX=/usr || exit $?
    make -j${NJOBS} || make
  ) || exit $?

  install -pm0755 bin/${NAME} ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit $?

fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/bin
cat > ${PKG}/usr/bin/${NAME} <<'EOF'
#!/bin/sh

set -e

SYN_BIN="$(basename $0)"
SYN_BIN="${SYN_BIN##/*/}"

SYN_ARCH=$(uname -m)
case ${SYN_ARCH} in
  x86_64 | ia64 | s390 )
    LIB_DIR="/usr/lib64"
    SECONDARY_LIB_DIR="/usr/lib"
    ;;
  * )
    LIB_DIR="/usr/lib"
    SECONDARY_LIB_DIR="/usr/lib64"
    ;;
esac
if [ ! -x ${LIB_DIR}/synergy/synergy ]; then
  if [ ! -x ${SECONDARY_LIB_DIR}/synergy/synergy ]; then
    echo "Error: ${LIB_DIR}/synergy/synergy not found"
    if [ -d ${SECONDARY_LIB_DIR} ]; then
      echo "       ${SECONDARY_LIB_DIR}/synergy/synergy not found"
    fi
    exit 1
  fi
  LIB_DIR="${SECONDARY_LIB_DIR}"
fi

mkdir -p ~/.synergy/plugins
cd ~/.synergy
cleanlinks

mkdir -p ~/.synergy/plugins
for plugin in $(find "${LIB_DIR}/synergy/plugins"  -maxdepth 1 -type f -printf '%f ') ; do
  if [[ ! -e "plugins/${plugin}" ]] ; then
    echo "Loading new plugin: ${plugin}"
    ln -s "${LIB_DIR}/synergy/plugins/${plugin}" "plugins/${plugin}"
  fi
done

exec "${LIB_DIR}/synergy/${SYN_BIN}" "$@"
EOF
chmod 0755 ${PKG}/usr/bin/${NAME} || exit 1

for i in ${NAME}{c,d,s} u${NAME} syntool ;do
  ln -sf ${NAME} ${PKG}/usr/bin/${i} || exit 1
done

mkdir -p ${PKG}/usr/man/man1
for man in ${NAME}{c,s} ;do
  install -pm0644 doc/${man}.man ${PKG}/usr/man/man1/${man}.1 || exit 1
done

if [ "${SB_GUI}" = "YES" ] ;then
  mkdir -p  ${PKG}/usr/share/applications
  desktop-file-install --mode 0644 \
    --dir ${PKG}/usr/share/applications \
    --set-icon="${NAME}" \
    --add-category="Qt" \
    res/${NAME}.desktop || exit 1

  icotool -x res/${NAME}.ico || exit 1
  for res in 16 24 32 48 256 ;do
    dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
    mkdir -p ${dir}
    install -p -m 644 *${res}x${res}x32.png \
      ${dir}/${NAME}.png || exit 1
  done
  for res in 20 22 36 64 72 96 128 192 ;do
    dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
    mkdir -p ${dir}
    convert *256x256x32.png -filter Lanczos -resize ${res}x${res} \
      ${dir}/${NAME}.png || exit 1
  done
fi

### Arch
mkdir -p ${PKG}/lib/systemd/system
for i in service socket ;do
  install -pm0644 ${CWD}/systemd/${NAME}s.${i} \
    ${PKG}/lib/systemd/system/${NAME}s\@.${i} || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING README NEWS THANKS TODO doc/${NAME}.conf* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x bin/systemctl ] ; then
  \${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

if [ "${SB_GUI}" = "YES" ] ;then
cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x usr/bin/update-desktop-database ]; then
  ${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  ${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  ${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
EOF
fi

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,systemd}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/systemd/*.* \
    ${SBDIR}/systemd/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
