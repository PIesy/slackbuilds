#!/bin/sh
#-- libreoffice-langpack-pt_BR for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ libreoffice-langpack-pt_BR.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.libreoffice.org/
# http://www.broffice.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

LOLANG=pt_BR
RLOLANG="$(echo ${LOLANG//_/-})"
NAME=libreoffice-langpack-${LOLANG}
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.0.3}
SVER="$(echo ${VERSION} | cut -d . -f1)"
SVER2="$(echo ${VERSION} | cut -d . -f1-2)"
SVER3="$(echo ${VERSION} | cut -d _ -f1 | cut -d r -f1 | cut -d. -f1-3)"
unset RCV
echo ${VERSION} | grep -q rc && RCV="-r$(echo ${VERSION} | cut -d r -f2)"
# x86 or x86_64
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  PARCH=x86-64
else
  ARCH=x86
  PARCH="x86"
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/libreoffice-langpacks/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=LibreOffice_${VERSION}_Linux_${PARCH}_rpm_langpack_${RLOLANG}.tar.gz
HSRCARCHIVE=LibreOffice_${VERSION}_Linux_${PARCH}_rpm_helppack_${RLOLANG}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.asc
HSSRCARCHIVE=${HSRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_TDF=${MIRROR_TDF:-http://download.documentfoundation.org}
DL_URL="${MIRROR_TDF}/libreoffice/stable/${SVER3}/rpm/${PARCH//-/_}"
DL_URLB="${MIRROR_TDF}/libreoffice/testing/${SVER3}${RCV}/rpm/${PARCH//-/_}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ${HSRCARCHIVE} ${HSSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
done

[ "$1" = "--dlsrc" ] && exit 0

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir ${SRCDIR}
cd ${SRCDIR} || exit 1
for file in ${SRCARCHIVE} ${HSRCARCHIVE} ;do
  tar -xvf ${CWD}/${file} || exit 1
done

mkdir RPMS
mv */RPMS/*.rpm RPMS/ || exit 1

( cd RPMS
  for rpm in *.rpm ; do
    rpm2cpio ${rpm} | ( cd ${PKG} && cpio -imdv --no-absolute-filenames )
  done
) || exit 1

cd ${PKG} || exit 1

find ${PKG} -type d | xargs chmod 0755 2> /dev/null
chmod -R u+rw,go+r-w,a-s ${PKG}/

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
if [ -d ${PKG}/opt/libreoffice${SVER2} ] ;then
  mv ${PKG}/opt/libreoffice${SVER2} ${PKG}/usr/lib${LIBDIRSUFFIX}/libreoffice || exit 1
else
  mv ${PKG}/opt/libreoffice ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1
fi
rmdir ${PKG}/opt

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -s $(echo /usr/doc | sed 's,/$,,;s,/[^/]\+,../,g')lib${LIBDIRSUFFIX}/libreoffice/readmes/README_${RLOLANG} \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
