#!/bin/sh
#-- fontconfig for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ fontconfig.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://fontconfig.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=fontconfig
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.12.0}
if [ "${SB_NATIVE}" = "YES" ] ;then
  export ARCH=${ARCH:-$(uname -m)}
else
  export ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://fontconfig.org/release/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  autoreconf -ivf || exit $?
fi

# Do not rebuild docs (removes need of -i in make)
export HASDOCBOOK=no

CFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --mandir=/usr/man \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --disable-silent-rules \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make || exit 1
# Fails if find a error. Test is fast, so do not need a switch.
make check || exit 1
make install DESTDIR=${PKG} || exit 1

[ "${SB_RMLA}" = "YES" ] && rm -f ${PKG}/usr/lib*/*.*a

mkdir -p ${PKG}/var/log/setup
zcat ${CWD}/setup.05.fontconfig.gz \
  > ${PKG}/var/log/setup/setup.05.fontconfig || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.05.fontconfig

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/fc-cache.service ${PKG}/lib/systemd/system/ || exit 1

mkdir -p ${PKG}/usr/share/fonts

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# 29-replace-bitmap-fonts.conf - Arch Linux
install -pm0644 ${CWD}/fcconf/*.conf ${PKG}/usr/share/${NAME}/conf.avail/ || exit 1

# Set up the default options in /etc/fonts/conf.d:
( cd ${PKG}/etc/fonts/conf.d
  for fontconf in 20-unhint-small-vera.conf \
    25-no-bitmap.conf 25-unhint-nonlatin.conf 29-replace-bitmap-fonts.conf \
    30-metric-aliases.conf 30-urw-aliases.conf 40-nonlatin.conf 45-latin.conf \
    49-sansserif.conf 50-user.conf 51-local.conf 60-latin.conf \
    65-fonts-persian.conf 65-nonlatin.conf 69-unifont.conf 80-delicious.conf \
    90-synthetic.conf ; do
    ln -sf ../../../usr/share/${NAME}/conf.avail/${fontconf} . || exit 1
  done
  if [ ! $? = 0 ]; then
    exit 1
  fi
)
if [ ! $? = 0 ]; then
  echo "Missing /etc/fonts/${fontconf} default.  Exiting"
  exit 1
fi

# This is breaking wine
rm -f ${PKG}/etc/fonts/conf.d/10-scale-bitmap-fonts.conf

cat >> ${PKG}/usr/bin/update-fccache <<'EOF'
#!/bin/bash
set -e

unset FORCE_OPT

[ -e /etc/default/fontconfig ] && source /etc/default/fontconfig

if [ -z "${FCCACHE}" ]; then
  FCCACHE_UPDATE=${FCCACHE_UPDATE:-true}
  [ "${FCCACHE_UPDATE}" = "false" ] && FCCACHE=false
fi

if [ -z "${FCCACHE_FORCE}" ]; then
  FCCACHE_UPDATE_FORCE=${FCCACHE_UPDATE_FORCE:-false}
  [ "${FCCACHE_UPDATE_FORCE}" = "false" ] && FCCACHE_FORCE=false
fi

[ "${FCCACHE}" = "false" ] && exit 0
[ "${FCCACHE_FORCE}" = "false" ] || FORCE_OPT=' -f'

if [ -x /usr/bin/fc-cache ] ;then
  exec /usr/bin/fc-cache -s${FORCE_OPT}
fi
EOF
chmod 0755 ${PKG}/usr/bin/update-fccache

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/${NAME}.new <<'EOF'
# Set to false to not run fc-cache after some font package installations
# FCCACHE options from environment ignores this
FCCACHE_UPDATE=true
# Set to true to always force full re-generation
FCCACHE_UPDATE_FORCE=false
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING README NEWS ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
rm -rf ${PKG}/usr/share/doc
rmdir ${PKG}/usr/share
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Fix manpages:
# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat >> ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<EOF
# Update the X font indexes:
if [ -x usr/bin/update-fccache  ]; then
  export FCCACHE_FORCE=true
  \${CHROOT} /usr/bin/update-fccache
fi
# else we'll catch it later with setup.fontconfig :-)
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/setup.05.fontconfig.gz ${CWD}/fc-cache.service \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/fcconf/*.conf \
    ${SBDIR}/fcconf/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
