#!/bin/sh
#-- bzip2 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ bzip2.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.bzip.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=bzip2
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.0.6}
SOLIB=1.0.6
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=tgz
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.bzip.org/${VERSION}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's| -shared| $(CFLAGS)\0|g' Makefile-libbz2_so || exit 1
sed -i -e '/^LDFLAGS=/d' Makefile || exit 1

make -f Makefile-libbz2_so \
  CFLAGS="${SLKCFLAGS} -D_FILE_OFFSET_BITS=64 -fpic -fPIC" || exit 1

rm -f *.o
make CFLAGS="${SLKCFLAGS} -D_FILE_OFFSET_BITS=64" || exit 1

mkdir -p ${PKG}/usr/include
install -p -m0644 bzlib.h ${PKG}/usr/include/ || exit 1
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
install -p -m0644 libbz2.a ${PKG}/usr/lib${LIBDIRSUFFIX}/libbz2.a || exit 1
mkdir -p ${PKG}/lib${LIBDIRSUFFIX}
install -p -m0755 libbz2.so.${SOLIB} ${PKG}/lib${LIBDIRSUFFIX}/libbz2.so.${SOLIB} || exit 1
mkdir -p ${PKG}/bin
install -p -m0755 bzip2-shared ${PKG}/bin/bzip2 || exit 1
install -p -m0755 bzip2recover ${PKG}/bin/bzip2recover || exit 1

mkdir -p ${PKG}/usr/man/man1
install -p -m0644 bzip2.1 ${PKG}/usr/man/man1/ || exit 1
echo '.so man1/bzip2.1' > ${PKG}/usr/man/man1/bzip2recover.1

# Here are some optional scripts:
mkdir -p ${PKG}/usr/bin
for file in bzdiff bzgrep bzmore ; do
  install -p -m0755 ${file} ${PKG}/usr/bin/${file} || exit 1
  install -p -m0644 ${file}.1 ${PKG}/usr/man/man1/ || exit 1
done

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Link up them links
( cd ${PKG}
  ( cd lib${LIBDIRSUFFIX}
    rm -f libbz2.so.1.0 libbz2.so.1
    ln -sf libbz2.so.${SOLIB} libbz2.so.1.0
    ln -sf libbz2.so.1.0 libbz2.so.1
  ) || exit 1
  ( cd usr/lib${LIBDIRSUFFIX} ; ln -sf ../../lib${LIBDIRSUFFIX}/libbz2.so.1 libbz2.so ) || exit 1
  ( cd bin ; ln -sf bzip2 bunzip2 ) || exit 1
  ( cd bin ; ln -sf bzip2 bzcat ) || exit 1
  mkdir -p usr/bin
  ( cd usr/bin
    ln -sf ../../bin/bzip2 .
    ln -sf ../../bin/bzip2 bunzip2
    ln -sf ../../bin/bzip2 bzcat
    ln -sf bzmore bzless
  ) || exit 1
) || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/bzip2.pc <<EOF
prefix=/usr
exec_prefix=\${prefix}
bindir=\${prefix}/bin
libdir=\${prefix}/lib${LIBDIRSUFFIX}
includedir=\${prefix}/include

Name: bzip2
Description: A file compression library
Version: ${VERSION}
Libs: -L\${libdir} -lbz2
Cflags: -I\${includedir}
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CHANGES LICENSE README README.COMPILATION.PROBLEMS Y2K_INFO \
  bzip2.txt manual.html manual.pdf ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir -p ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
