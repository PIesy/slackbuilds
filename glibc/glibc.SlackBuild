#!/bin/bash
## build glibc-${VERSION} for Slackware

#-- glibc for Slackware --
# Build script modified by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ glibc.SlackBuild 2>&1 | tee build.log

# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2008 Patrick J. Volkerding <volkerdi@slackware.com>
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.gnu.org/software/libc/
# ftp://elsie.nci.nih.gov/pub/

# kernel-headers->glibc->binutils->gcc->binutils->glibc

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)

# Temporary build location.  This should not be a directory
# path a non-root user could create later...
TMP=${TMP:-/tmp/glibc-tmp-$(mcookie)}

NAME=glibc
NAME32=glibc-compat32
VERSION=${VERSION:-2.24}
# Set to 0 to enable release instead snapshot
CHECKOUT=${CHECKOUT:-0}
# Gentoo patchset version
PVER=${PVER:-2.24-3}
# Minimal kernel version.
# See ${SRCDIR}/sysdeps/unix/sysv/linux/kernel-features.h
# See ${SRCDIR}/sysdeps/unix/sysv/linux/x86_64/kernel-features.h
MK_VER=${MK_VER:-3.1}

# NOTE!!!  glibc needs to be built against the sanitized kernel headers,
# which will be installed under /usr/include by the kernel-headers package.
# Be sure the correct version of the headers package is installed BEFORE
# building glibc!

# ${ARCH} may be preset, otherwise i486 compatibility with i686 binary
# structuring is the Slackware default, since this is what gcc-3.2+
# requires for binary compatibility with previous releases.
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi

if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
  ARCH32=${ARCH32:-i686}
else
  # This should be i486 for all 32-bit x86 arch:
  SLKTARGET=${SLKTARGET:-i586}
  export SB_MULTILIB=NO
fi

# This is only for compat32
if [ "${SLKTARGET}" = "x86_64" ] ;then
  SLKTARGET32=${SLKTARGET32:-i586}
fi

SLKDTARGET=${SLKDTARGET:-slackware}

BUILD=${BUILD:-1}

NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}

# Set to YES to enable multilib build
SB_MULTILIB=${SB_MULTILIB:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ "${CHECKOUT}" != "0" ] ;then
  SRCDIR=${NAME}-${VERSION}-${CHECKOUT}
  SRCARCHIVEB=${NAME}-${CHECKOUT}.tar.xz
else
  SRCDIR=${NAME}-${VERSION}
fi
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.sig
PSRCARCHIVE=${NAME}-$(echo ${PVER}|cut -d- -f1)-patches-$(echo ${PVER}|cut -d- -f2).tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
if [ "${CHECKOUT}" != "0" ] ;then
  DL_URL="ftp://sources.redhat.com/pub/${NAME}/snapshots"
else
  MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
  DL_URL="${MIRROR_GNU}/${NAME}"
  DL_URLB="ftp://sources.redhat.com/pub/${NAME}/releases"
fi
MIRROR_GENTOO=${MIRROR_GENTOO:-http://distfiles.gentoo.org}
PDL_URL="${MIRROR_GENTOO}/distfiles/${PSRCARCHIVE}"
PDL_URLB="https://dev.gentoo.org/~vapier/dist/${PSRCARCHIVE}"

# if source is not present, download in source rootdir if possible, or in /tmp
if [ "${CHECKOUT}" != "0" ] ;then
  ( test -r ${CWD}/${SRCARCHIVE} || test -r ${SRCARCHIVEB} ) || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || \
    ( test -r ${CWD}/${SRCARCHIVEB} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVEB} ) || exit 1
  if [ -r ${CWD}/${SRCARCHIVEB} ] ;then
    SRCDIR=${NAME}-${CHECKOUT}
    SRCARCHIVE=${SRCARCHIVEB}
  fi
else
  for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
    test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
  done
fi
test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || ${DL_PROG} ${DL_OPTS} ${PDL_URLB} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

unset CFLAGS CXXFLAGS LDFLAGS CPPFLAGS

# I'll break this out as an option for fun  :-)
if [ "${SB_NATIVE}" = "YES" ] ;then
  OPTIMIZ="-O3 -march=native -mtune=native -pipe"
  #[ "${SB_ECFLAGS}" ] && SLKCFLAGS+=" ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    OPTIMIZ="-O3 -march=${ARCH} -mtune=i686"
                 ;;
    s390)        OPTIMIZ="-O3"
                 ;;
    x86_64)      OPTIMIZ="-O3 -fPIC"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS+=" -fPIC"
else
  LIBDIRSUFFIX=""
fi

case "${ARCH}" in
  i[3-6]86)  OPTIMIZ+=" -mno-tls-direct-seg-refs"
  ;;
esac

# Test if multilib will needs bootstraping
# (adapted from Eric Hameleers <alien@slackware.com> SlackBuild)
unset SB_BOOTSTRP
if [ "${SB_MULTILIB}" = "YES" ] ;then
  [ -f /lib/libc.so.6 ] || SB_BOOTSTRP=YES
fi

# This is going to be the initial $DESTDIR:
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/glibc-incoming-tree
export PKG
PGLIBC=${PKGF}/${NAME}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PSOLIBS=${PKGF}/${NAME}-solibs
PKGNAMES=${NAME}-solibs-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PI18N=${PKGF}/${NAME}-i18n
PKGNAMEI=${NAME}-i18n-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PPROFILE=${PKGF}/${NAME}-profile
PKGNAMEP=${NAME}-profile-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PDEBUG=${PKGF}/${NAME}-debug
PKGNAMED=${NAME}-debug-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

PKG_32=${PKGF}/glibc-compat32-incoming-tree
export PKG_32
PGLIBC_32=${PKGF}/${NAME32}
PKGNAME_32=${NAME32}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}
PSOLIBS_32=${PKGF}/${NAME}-solibs-compat32
PKGNAMES_32=${NAME}-solibs-compat32-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}
PI18N_32=${PKGF}/${NAME}-i18n-compat32
PKGNAMEI_32=${NAME}-i18n-compat32-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}
PPROFILE_32=${PKGF}/${NAME}-profile-compat32
PKGNAMEP_32=${NAME}-profile-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PDEBUG_32=${PKGF}/${NAME}-debug-compat32
PKGNAMED_32=${NAME}-debug-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}

export SB_DESCDIR=${CWD}/descs

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
# Empty these locations first:
if [ -d ${PKGF} ]; then
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${PGLIBC} ${PSOLIBS} ${PI18N} ${PPROFILE} ${PDEBUG}
mkdir -p ${PKG_32} ${PGLIBC_32} ${PSOLIBS_32} ${PI18N_32} ${PPROFILE_32} ${PDEBUG_32}

if [ -d ${TMP}/glibc-${VERSION} ]; then
  rm -rf ${TMP}/glibc-${VERSION}
fi

# Create an incoming directory structure for glibc to be built into:
mkdir -p ${PKG}/lib${LIBDIRSUFFIX}
mkdir -p ${PKG}/sbin
mkdir -p ${PKG}/usr/bin
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
mkdir -p ${PKG}/usr/sbin
mkdir -p ${PKG}/usr/include
mkdir -p ${DOCDIR}
mkdir -p ${PKG}/usr/man
mkdir -p ${PKG}/usr/share
mkdir -p ${PKG}/var/db/nscd
mkdir -p ${PKG}/var/run/nscd

# Begin extract/compile:
cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${PSRCARCHIVE} || exit 1

SB_SROOT="$(pwd)"

#chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Clean up leftover CVS directories:
find . -type d -name CVS -print0 | xargs -0r rm -rf 2> /dev/null

# Apply patches; exit if any fail.
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|-fstack-protector$|-fstack-protector-strong|g' \
  {login,nscd,resolv}/Makefile || exit 1

if [ "${SB_BOOTSTRP}" = "YES" ] ;then
  sed -i -e 's/-lgcc_eh//g' Makeconfig
fi

SOVER="$(grep VERSION version.h |awk '{print $3}' | tr -d \")"

export BINUTILS_LD=bfd

unset SB_MULTILIBOPTS
[ "${SB_MULTILIB}" = "YES" ] && SB_MULTILIBOPTS='--enable-multi-arch'

SB_CONFIGURE() {
CFLAGS="-g ${OPTIMIZ} -DNDEBUG -fno-asynchronous-unwind-tables" \
${SB_SROOT}/configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --enable-kernel=${MK_VER} \
  --with-headers=/usr/include \
  --enable-add-ons=libidn \
  --enable-bind-now \
  --enable-lock-elision \
  --enable-stackguard-randomization \
  --enable-profile \
  --with-tls \
  --with-__thread \
  --without-cvs \
  --enable-obsolete-rpc \
  --disable-werror \
  ${SB_MULTILIBOPTS} \
  $@
}

if [ "${SB_MULTILIB}" = "YES" ]; then
(
  unset ARCH
  mkdir -p build-glibc-compat32-${VERSION}
  cd build-glibc-compat32-${VERSION} || exit 1

  export BUILD_ARCH=${SLKTARGET}-${SLKDTARGET}-linux
  export LIBDIRSUFFIX=""
  export CC="gcc -m32"

  if [ "${SB_NATIVE}" = "YES" ] ;then
    OPTIMIZ="-O3 -march=native -mtune=native -pipe"
    #[ "${SB_ECFLAGS}" ] && SLKCFLAGS+=" ${SB_ECFLAGS}"
  else
    case "${ARCH32}" in
      i[3-6]86)    OPTIMIZ="-O3 -march=${ARCH32} -mtune=i686"
      ;;
    esac
  fi
  export OPTIMIZ="$( echo ${OPTIMIZ} | sed -e 's/-fPIC//;s/ -._FORTIFY_SOURCE=.//' )"
  echo "BUILDING DAS 32-bit NPTL GLIBC"
  SB_CONFIGURE \
    --build=${SLKTARGET32}-${SLKDTARGET}-linux \
    --target=${SLKTARGET32}-${SLKDTARGET}-linux || exit 1

  make PARALLELMFLAGS="-j${NJOBS}" || make || exit 1
  make install install_root=${PKG_32} || exit 1
) || exit 1
fi

# Make build directory:
mkdir -p build-glibc-${VERSION}
cd build-glibc-${VERSION} || exit 1

export OPTIMIZ="$(echo ${OPTIMIZ} | sed -e 's/ -._FORTIFY_SOURCE=.//g')"

(
  unset ARCH
echo "BUILDING DAS NPTL GLIBC"
SB_CONFIGURE \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make PARALLELMFLAGS="-j${NJOBS}" || make || exit 1
make install install_root=${PKG} || exit 1
make -j${NJOBS} localedata/install-locales install_root=${PKG} || exit 1

) || exit $?

# The prevailing standard seems to be putting unstripped libraries in
# /usr/lib/debug/ and stripping the debugging symbols from all the other
# libraries.
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/debug
cp -a ${PKG}/lib${LIBDIRSUFFIX}/l*.so* ${PKG}/usr/lib${LIBDIRSUFFIX}/debug
cp -a ${PKG}/usr/lib${LIBDIRSUFFIX}/*.a ${PKG}/usr/lib${LIBDIRSUFFIX}/debug
# Don't need debug+profile:
( cd ${PKG}/usr/lib${LIBDIRSUFFIX}/debug ; rm -f *_p.* )
# NOTE:  Is there really a reason for the glibc-debug package?
# If you're debugging glibc, you can also compile it, right?

## COMMENTED OUT:  There's no reason for profile libs to include -g information.
## Put back unstripped profiling libraries:
#mv ${PKG}/usr/lib/debug/*_p.a ${PKG}/usr/lib
# It might be best to put the unstripped and profiling libraries in glibc-debug and glibc-profile.

# I don't think "strip -g" causes the pthread problems.  It's --strip-unneeded that does.
strip -g ${PKG}/lib${LIBDIRSUFFIX}/l*.so*
strip -g ${PKG}/usr/lib${LIBDIRSUFFIX}/l*.so*
strip -g ${PKG}/usr/lib${LIBDIRSUFFIX}/lib*.a
strip -g ${PKG}/usr/lib${LIBDIRSUFFIX}/*.o

# rquota.x and rquota.h are now provided by quota
#rm -f ${PKG}/usr/include/rpcsvc/rquota.[hx]

# Back to the sources dir to add some files/docs:
cd ${SB_SROOT} || exit 1

# We'll automatically install the config file for the Name Server Cache Daemon.
# Perhaps this should also have some commented-out startup code in rc.inet2...
mkdir -p ${PKG}/etc
cat nscd/nscd.conf > ${PKG}/etc/nscd.conf.new
cat posix/gai.conf > ${PKG}/etc/gai.conf.new

mkdir -p ${PKG}/etc/default
cat nis/nss > ${PKG}/etc/default/nss.new

mv ${PKG}/etc/rpc ${PKG}/etc/rpc.new

## Install docs:
( mkdir -p ${DOCDIR}/
  cp -a \
    BUGS CONFORMANCE COPYING COPYING.LIB FAQ INSTALL LICENSES NAMESPACE \
    NEWS NOTES PROJECTS README README.libm ${CWD}/ChangeLog.SB \
    ${DOCDIR}/
)

# OK, there are some very old Linux standards that say that any binaries in a /bin or
# /sbin directory (and the directories themselves) should be group bin rather than
# group root, unless a specific group is really needed for some reason.
#
# I can't find any mention of this in more recent standards docs, and always thought
# that it was pretty cosmetic anyway (hey, if there's a reason -- fill me in!), so
# it's possible that this ownership change won't be followed in the near future
# (it's a PITA, and causes many bug reports when the perms change is occasionally
# forgotten).
#
# But, it's hard to get me to break old habits, so we'll continue the tradition here:
#
# No, no we won't.  You know how we love to break traditions.

# Strip most binaries:
( cd ${PKG}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip -g 2> /dev/null
)

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 nscd/nscd.{service,socket} ${PKG}/lib/systemd/system/ || exit 1

mkdir -p ${PKG}/usr/lib/tmpfiles.d
cat > ${PKG}/usr/lib/tmpfiles.d/nscd.conf <<'EOF'
d /run/nscd 755 root root
EOF

# Fix info dir:
rm -f ${PKG}/usr/info/dir
gzip -9 ${PKG}/usr/info/*.info*

# This is junk
rm -f ${PKG}/etc/ld.so.cache
( cd ${PKG}
  find . -name "*.orig" -exec rm -f {} \;
)

if [ "${SB_MULTILIB}" = "YES" ]; then
(
  export LIBDIRSUFFIX=""
  mkdir -p ${PKG_32}/usr/lib/debug
  cp -a ${PKG_32}/lib${LIBDIRSUFFIX}/l*.so* ${PKG_32}/usr/lib${LIBDIRSUFFIX}/debug
  cp -a ${PKG_32}/usr/lib${LIBDIRSUFFIX}/*.a ${PKG_32}/usr/lib${LIBDIRSUFFIX}/debug

  ( cd ${PKG_32}/usr/lib${LIBDIRSUFFIX}/debug ; rm -f *_p.* )

  strip -g ${PKG_32}/lib${LIBDIRSUFFIX}/l*.so*
  strip -g ${PKG_32}/usr/lib${LIBDIRSUFFIX}/l*.so*
  strip -g ${PKG_32}/usr/lib${LIBDIRSUFFIX}/lib*.a
  strip -g ${PKG_32}/usr/lib${LIBDIRSUFFIX}/*.o

  ln -sf libbsd-compat.a ${PKG_32}/usr/lib${LIBDIRSUFFIX}/libbsd.a

  ( cd ${PKG_32}
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip -g 2> /dev/null
  )

  rm -rf ${PKG_32}/usr/sbin ${PKG_32}/sbin
  rm -rf ${PKG_32}/etc
  rm -rf ${PKG_32}/usr/{man,info,doc}
  rm -rf ${PKG_32}/usr/share
  rm -rf ${PKG_32}/var

  mkdir -p tmp32/{bin,getconf,include}
  mv ${PKG_32}/usr/bin/* tmp32/bin/
  mv ${PKG_32}/usr/libexec/getconf/* tmp32/getconf/
  mv ${PKG_32}/usr/include/* tmp32/include/

  mkdir -p ${PKG_32}/usr/bin ${PKG_32}/usr/libexec/getconf
  mv tmp32/bin/lddlibc4 ${PKG_32}/usr/bin/
  mv ${PKG_32}/usr/libexec/getconf/POSIX_V6_IPL32* tmp32/
  rm -rf ${PKG_32}/usr/libexec/*
  mkdir -p ${PKG_32}/usr/libexec/getconf
  mv tmp32/getconf/POSIX_V6_IPL32* ${PKG_32}/usr/libexec/getconf/

  # And some headers
  mkdir -p ${PKG_32}/usr/include/{gnu,sys}
  mv tmp32/include/gnu/stubs-32.h ${PKG_32}/usr/include/gnu/
  mv tmp32/include/sys/{elf.h,vm86.h} ${PKG_32}/usr/include/sys/

)
fi

##################################
# OK, time to make some packages #
##################################

# glibc-profile:
cd ${PPROFILE} || exit 1
mkdir -p usr/lib${LIBDIRSUFFIX}
# Might as well just grab these with 'mv' to simplify things later:
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/lib*_p.a usr/lib${LIBDIRSUFFIX}
# Profile libs should be stripped.  Use the debug libs to debug...
( cd usr/lib${LIBDIRSUFFIX} ; strip -g *.a )
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-profile install/slack-desc

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       install/slack-desc

echo "${NAME}-solibs = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID} || ${NAME} = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}" > \
     install/slack-required

# Build the package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSP="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSP="${ROOTCOMMANDSP}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMEP}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSP}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSP} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# THIS IS NO LONGER PACKAGED (or is it?  might be better to let it be made, and then ship it or not...)
# glibc-debug:
cd ${PDEBUG} || exit 1
mkdir -p usr/lib${LIBDIRSUFFIX}
# Might as well just grab these with 'mv' to simplify things later:
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/debug usr/lib${LIBDIRSUFFIX}
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-debug install/slack-desc

sed -i \
  -e "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  -e "s|/lib/|/lib${LIBDIRSUFFIX}|g" \
  install/slack-desc

echo "${NAME}-solibs = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID} || ${NAME} = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}" > \
     install/slack-required

set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSD="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSD="${ROOTCOMMANDSD}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMED}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSD}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSD} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

## INSTEAD, NUKE THESE LIBS
#rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/debug

# glibc-i18n:
cd ${PI18N} || exit 1
mkdir -p usr/lib${LIBDIRSUFFIX}
rm -rf usr/lib${LIBDIRSUFFIX}/locale
cp -a ${PKG}/usr/lib${LIBDIRSUFFIX}/locale usr/lib${LIBDIRSUFFIX}
mkdir -p usr/share
cp -a ${PKG}/usr/share/i18n usr/share
cp -a ${PKG}/usr/share/locale usr/share
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-i18n install/slack-desc

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       install/slack-desc

echo "${NAME}-solibs = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID} || ${NAME} = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}" > \
     install/slack-required

set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSI="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSI="${ROOTCOMMANDSI}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMEI}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSI}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSI} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# glibc-solibs:
cd ${PSOLIBS} || exit 1
mkdir -p var/cache/ldconfig
chmod 0700 var/cache/ldconfig
mkdir -p etc/ld.so.conf.d
mkdir -p etc/profile.d
cp -a ${CWD}/profile.d/glibc.*sh* etc/profile.d
#chown -R root:root etc
chmod 755 etc/profile.d/glibc.*sh*
mkdir -p lib${LIBDIRSUFFIX}
cp -a ${PKG}/lib${LIBDIRSUFFIX}/* lib${LIBDIRSUFFIX}
( cd lib${LIBDIRSUFFIX}
  mkdir -p incoming
  mv *so* incoming
  mv incoming/libSegFault.so .
)
mkdir -p usr
cp -a ${PKG}/usr/bin usr
mv usr/bin/ldd .
rm -f usr/bin/*
mv ldd usr/bin
mkdir -p usr/lib${LIBDIRSUFFIX}
# The gconv directory has a lot of stuff, but including it here will save some problems.
# Seems standard elsewhere.
cp -a ${PKG}/usr/lib${LIBDIRSUFFIX}/gconv usr/lib${LIBDIRSUFFIX}
# Another manpage abandoned by GNU...
#mkdir -p usr/man/man1
#cp -a ${PKG}/usr/man/man1/ldd.1.gz usr/man/man1
# Same usr.bin deal:
cp -a ${PKG}/sbin .
mv sbin/ldconfig .
rm -f sbin/*
mv ldconfig sbin/
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-solibs install/slack-desc
cat ${CWD}/doinst.sh-glibc-solibs | sed \
  -e "s|_VERSION|${SOVER}|g;s|_LIBDIR|lib${LIBDIRSUFFIX}|g" > install/doinst.sh

if [ "${ARCH}" != "x86_64" ] ;then
  sed -i -e '/libmvec.so.1/d' install/doinst.sh
fi

if [ "${ARCH}" = "x86_64" ] ;then
  sed -i 's|ld-linux.so.2|ld-linux-x86-64.so.2|g' install/doinst.sh
fi

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       install/slack-desc

# Ditch links:
find . -type l -exec rm -f {} \;
# Build the package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSS="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSS="${ROOTCOMMANDSS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMES}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{descs,patches,profile.d}
  install -m0644 ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/doinst.sh* ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/descs/slack-desc* \
    ${SBDIR}/descs/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0755 ${CWD}/profile.d/glibc.*sh* \
    ${SBDIR}/profile.d/
  rmdir ${SBDIR}/patches
fi

# And finally, the complete "all-in-one" glibc package is created
# from whatever was leftover:
cd ${PGLIBC} || exit 1
mv ${PKG}/* .
mkdir -p var/cache/ldconfig
chmod 0700 var/cache/ldconfig
mkdir -p etc/ld.so.conf.d
mkdir -p etc/profile.d
cp -a ${CWD}/profile.d/* etc/profile.d/ || exit 1
#chown -R root:root etc
chmod 755 etc/profile.d/*
# Ditch links (these are in doinst.sh-glibc):
find . -type l -exec rm -f {} \;

ln -sf libbsd-compat.a usr/lib${LIBDIRSUFFIX}/libbsd.a

mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc install/slack-desc
cat ${CWD}/doinst.sh-glibc | sed \
  -e "s|_VERSION|${SOVER}|g;s|_LIBDIR|lib${LIBDIRSUFFIX}|g" > install/doinst.sh

if [ "${ARCH}" != "x86_64" ] ;then
  sed -i -e '/libmvec.so.1/d' install/doinst.sh
fi

if [ "${ARCH}" = "x86_64" ] ;then
  sed -i 's|ld-linux.so.2|ld-linux-x86-64.so.2|g' install/doinst.sh
fi

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       install/slack-desc

( cd lib${LIBDIRSUFFIX}
  mkdir -p incoming
  mv *so* incoming
  mv incoming/libSegFault.so .
)

# Build the package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

########################################################
#################### 32 bits ###########################
########################################################
if [ "${SB_MULTILIB}" = "YES" ]; then
(
export LIBDIRSUFFIX=""

# glibc-profile-compat32:
cd ${PPROFILE_32} || exit 1
mkdir -p usr/lib${LIBDIRSUFFIX}
# Might as well just grab these with 'mv' to simplify things later:
mv ${PKG_32}/usr/lib${LIBDIRSUFFIX}/lib*_p.a usr/lib${LIBDIRSUFFIX}
# Profile libs should be stripped.  Use the debug libs to debug...
( cd usr/lib${LIBDIRSUFFIX} ; strip -g *.a )
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-profile-compat32 install/slack-desc

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  install/slack-desc

echo "${NAME}-solibs-compat32 = $(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID} || ${NAME}-compat32 = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}" > \
  install/slack-required

# Build the package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSP_32="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSP_32="${ROOTCOMMANDSP_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMEP_32}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSP_32}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSP_32} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# THIS IS NO LONGER PACKAGED (or is it?  might be better to let it be made, and then ship it or not...)
# glibc-debug-compat32:
cd ${PDEBUG_32} || exit 1
mkdir -p usr/lib${LIBDIRSUFFIX}
# Might as well just grab these with 'mv' to simplify things later:
mv ${PKG_32}/usr/lib${LIBDIRSUFFIX}/debug usr/lib${LIBDIRSUFFIX}
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-debug-compat32 install/slack-desc

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  install/slack-desc

echo "${NAME}-solibs-compat32 = $(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID} || ${NAME}-compat32 = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}" > \
  install/slack-required

set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSD_32="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSD_32="${ROOTCOMMANDSD_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMED_32}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSD_32}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSD_32} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

## INSTEAD, NUKE THESE LIBS
#rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/debug

# glibc-i18n-compat32:
cd ${PI18N_32} || exit 1
mkdir -p usr/lib${LIBDIRSUFFIX}
rm -rf usr/lib${LIBDIRSUFFIX}/locale
ln -sf ../lib64/locale usr/lib${LIBDIRSUFFIX}/locale
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-i18n-compat32 install/slack-desc

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       install/slack-desc

echo "${NAME}-solibs-compat32 = $(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID} || ${NAME} = $(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}" > \
     install/slack-required

set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSI_32="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSI_32="${ROOTCOMMANDSI_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMEI_32}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSI_32}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSI_32} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# glibc-solibs-compat32:
cd ${PSOLIBS_32} || exit 1
mkdir -p lib${LIBDIRSUFFIX}
cp -a ${PKG_32}/lib${LIBDIRSUFFIX}/* lib${LIBDIRSUFFIX}
mkdir -p usr/lib${LIBDIRSUFFIX}
# The gconv directory has a lot of stuff, but including it here will save some problems.
# Seems standard elsewhere.
cp -a ${PKG_32}/usr/lib${LIBDIRSUFFIX}/gconv usr/lib${LIBDIRSUFFIX}
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-solibs-compat32 install/slack-desc

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       install/slack-desc

# Build the package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDSS_32="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDSS_32="${ROOTCOMMANDSS_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAMES_32}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDSS_32}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDSS_32} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# And finally, the complete "all-in-one" glibc-compat32 package is created
# from whatever was leftover:
cd ${PGLIBC_32} || exit 1
mv ${PKG_32}/* .
rm -rf usr/lib${LIBDIRSUFFIX}/locale
ln -sf ../lib64/locale usr/lib/${LIBDIRSUFFIX}/locale
mkdir -p install
cp -a ${SB_DESCDIR}/slack-desc.glibc-compat32 install/slack-desc

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       install/slack-desc

# Build the package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS_32="set -o errexit -o xtrace ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS_32="${ROOTCOMMANDS_32}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME_32}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS_32}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS_32} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

)
fi
########################################################
#################### end of 32 bits ####################
########################################################

# Done!
echo
echo "glibc packages built in ${TMP}!"

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
