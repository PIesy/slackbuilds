#!/bin/bash
#-- kernel-custom for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ kernel-custom.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://kernel.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

KERNNAME=${KERNNAME:-custom}
PNAME=linux
NAME=kernel-${KERNNAME}
MNAME=kernel-modules-${KERNNAME}
HNAME=kernel-headers
DNAME=kernel-doc
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
MPKG=${PKGF}/${MNAME}
HPKG=${PKGF}/${HNAME}
DPKG=${PKGF}/${DNAME}

# Fill this stuff in:

# x.y.z / z=0 when not existent in tarball, eg. 3.4 will be 3.4.0
VERSION=${VERSION:-4.8.15}
SVER="$( echo ${VERSION} | cut -d . -f 1-2 )"
if [ -z "$( echo ${VERSION} | cut -d . -f 3 )" ] ;then
  echo "Missing sublevel in VERSION: ${VERSION}.?!"
  exit 1
fi
# BFQ patches
BFQVER=${BFQVER:-4.8.0-v8r4}
[ "$( echo ${BFQVER} | cut -d - -f 1 | cut -d . -f 3 )" -eq 0 ] && BFQKVER="$( echo ${BFQVER} | cut -d - -f 1 | cut -d . -f 1-3 )"
BFQSVER="$( echo ${BFQVER} | cut -d - -f 2 )"
BFQOSVER=${BFQOSVER:-v7r11}
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  HARCH=${ARCH}
else
  HARCH=x86
fi
BUILD=${BUILD:-1}
RVER="${KERNNAME}-${BUILD}${PACKAGER_ID}"
FVER="${VERSION}-${RVER}"
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${DPKG}/usr/doc/${NAME}-${FVER}
SBDIR=${PKG}/usr/src/slackbuilds/kernel/${NAME}-${FVER}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
KERNELSDIR=/usr/src/kernels/${FVER}-${ARCH}
MODDIR=/lib/modules/${FVER}
PKGNAME=${NAME}-$( echo ${FVER} | tr - _ )-${ARCH}-${BUILD}${PACKAGER_ID}
MPKGNAME=${MNAME}-$( echo ${FVER} | tr - _ )-${ARCH}-${BUILD}${PACKAGER_ID}
HPKGNAME=${HNAME}-$( echo ${FVER} | tr - _ )-${HARCH}-${BUILD}${PACKAGER_ID}
DPKGNAME=${DNAME}-$( echo ${FVER} | tr - _ )-noarch-${BUILD}${PACKAGER_ID}

CONFIGFILE=config-${KERNNAME}.${HARCH}

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

# Do not interfere in make
PARCH=${ARCH}
unset ARCH LDFLAGS CFLAGS CXXFLAGS CPPFLAGS
export BINUTILS_LD=bfd

DATE=$(LC_ALL=C date +%d-%b-%Y)

BFQDOWNDIR=${CWD}/patches/bfq_patches

# Set to YES to apply extra patches
SB_EPATCH=${SB_EPATCH:-YES}

# Set to YES to add versioned symlinks on /boot
SB_SYMLNK=${SB_SYMLNK:-YES}

# Set to YES to apply custom DSDT
SB_DSDT=${SB_DSDT:-YES}

# Set to YES to apply custom framebuffer logo
SB_FBLOGO=${SB_FBLOGO:-YES}

# Set to YES to only untar kernel and apply patches. The source will be in
# ${TMP} directory. This option can be used if you want create a .config before,
# no needing to use SB_OTF option (put the .config file in ${CWD} as config-${KERNNAME}.${ARCH}.
SB_PREP=${SB_PREP:-NO}

# Set to YES if you want configure a kernel in ${TMP} dir before the "make"
# The menuconfig or xconfig will run. Else default (and/or incompatible)
# ${CWD}/config-custom.${ARCH} will be used. OTF=On The Fly
SB_OTF=${SB_OTF:-YES}

# Set to YES to enable extra html docs and manpages (takes time)
SB_EDOC=${SB_EDOC:-NO}

SRCDIR=${PNAME}-${SVER}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCDIR}.tar.sign
PSRCARCHIVE=patch-${VERSION}.xz
PSSRCARCHIVE=patch-${VERSION}.sign
BFQSRCARCHIVES="0001-block-cgroups-kconfig-build-bits-for-BFQ-${BFQOSVER}-${BFQKVER}.patch
  0002-block-introduce-the-BFQ-${BFQOSVER}-I-O-sched-to-be-ported.patch
  0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-${BFQOSVER}-to-.patch
  0004-Turn-BFQ-${BFQOSVER}-into-BFQ-${BFQSVER}-for-${BFQKVER}.patch"
BFQSRCARCHIVES2="COPYING.BFQ README.BFQ"

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/kernel/v$(echo ${VERSION} | cut -d . -f 1).x"
MIRROR_BFQ=${MIRROR_BFQ:-http://algo.ing.unimo.it/people/paolo/disk_sched/patches}
BFQDL_URL="${MIRROR_BFQ}/${BFQVER}"

# Test if needs a patch.
unset SB_PATCH
[ "$( echo ${VERSION} | cut -d . -f 3 )" -gt 0 ] 2>/dev/null && export SB_PATCH=YES

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
if [ "${SB_PATCH}" = "YES" ] ;then
  for file in ${PSRCARCHIVE} ${PSSRCARCHIVE} ;do
    test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
  done
fi
mkdir -p ${BFQDOWNDIR}
( cd ${BFQDOWNDIR} || exit 1
  for file in ${BFQSRCARCHIVES} ${BFQSRCARCHIVES2} ;do 
    test -r ${file} || ${DL_PROG} ${DL_OPTS} ${BFQDL_URL}/${file} || exit 1
  done
) || exit $?

[ "$1" = "--dlsrc" ] && exit 0

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${MPKG} ${HPKG} ${DPKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

if [ "${SB_PATCH}" = "YES" ] ;then
  echo "Applying upstream patch"
  xzcat ${CWD}/${PSRCARCHIVE} | patch -p1 || exit 1
  echo "Upstream patches succeeded."
fi
if [ "${SB_EPATCH}" = "YES" ] ;then
  if [ -r ${CWD}/apply-patches.sh ]; then
    echo "Applying extra patches"
    . ${CWD}/apply-patches.sh
    echo "Extra patches succeeded."
  fi
fi

make -s mrproper

# Put custom config if it exists
[ -f ${CWD}/${CONFIGFILE} ] && cat ${CWD}/${CONFIGFILE} > .config

if [ "${SB_DSDT}" = "YES" ] ;then
  SB_DSDT_DIR=${CWD}/dsdt
  # Add a custom DSDT, if any:
  if [ -r ${SB_DSDT_DIR}/DSDT-${KERNNAME}.hex.xz ] ;then
    echo "Using ${SB_DSDT_DIR}/DSDT-${KERNNAME}.hex.xz as custom DSDT."
    xzcat ${SB_DSDT_DIR}/DSDT-${KERNNAME}.hex.xz > include/DSDT.hex || exit 1
    if grep -q "^CONFIG_ACPI_CUSTOM_DSDT=" .config 2>/dev/null ;then
      sed -i -e '/^ACPI_CUSTOM_DSDT_FILE=/s|=.*$|=y|g' .config
    else
      echo 'CONFIG_ACPI_CUSTOM_DSDT=y' >> .config
    fi
    if grep -q "^CONFIG_ACPI_CUSTOM_DSDT_FILE=" .config 2>/dev/null ;then
      sed -i -e '/^CONFIG_ACPI_CUSTOM_DSDT_FILE=/s|=.*$|="DSDT.hex"|g' .config
    else
      echo 'CONFIG_ACPI_CUSTOM_DSDT_FILE="DSDT.hex"' >> .config
    fi
  else
    if grep -q "^CONFIG_ACPI_CUSTOM_DSDT=" .config 2>/dev/null ;then
      echo "Using ${SB_DSDT_DIR}/DSDT-${KERNNAME}.hex.gz not exists. Disabling custom DSDT."
      sed -i -e '/^CONFIG_ACPI_CUSTOM_DSDT=/s|=.*$|=n|g' .config
    fi
    if grep -q "^CONFIG_ACPI_CUSTOM_DSDT_FILE=" .config 2>/dev/null ;then
      sed -i -e '/^CONFIG_ACPI_CUSTOM_DSDT_FILE=/s|=.*$|=|g' .config
    fi
  fi
else
  if grep -q "^CONFIG_ACPI_CUSTOM_DSDT=" .config 2>/dev/null ;then
    sed -i -e '/^CONFIG_ACPI_CUSTOM_DSDT=/s|=.*$|=n|g' .config
  fi
  if grep -q "^CONFIG_ACPI_CUSTOM_DSDT_FILE=" .config 2>/dev/null ;then
    sed -i -e '/^CONFIG_ACPI_CUSTOM_DSDT_FILE=/s|=.*$|=|g' .config
  fi
fi

if [ "${SB_FBLOGO}" = "YES" ] ;then
  SB_FBLOGO_DIR=${CWD}/fblogo
  if [ -r ${SB_FBLOGO_DIR}/fblogo-${KERNNAME}.ppm.xz ] ;then
    echo "Using ${SB_FBLOGO_DIR}/fblogo-${KERNNAME}.ppm.xz as custom fblogo."
    xzcat ${SB_FBLOGO_DIR}/fblogo-${KERNNAME}.ppm.xz \
     > drivers/video/logo/logo_linux_clut224.ppm || exit 1
  fi
fi

if [ "${SB_PREP}" = "YES" ] ;then
  echo "Patched kernel is in ${TMP}"
  exit 0
fi

if [ "${SB_OTF}" = "YES" ] ;then
  if [ "${DISPLAY}" ] ; then
    echo "DISPLAY ${DISPLAY} found. Running xconfig"

    # Set the config option variables if they are not already set:
    [ -r ../qt4.options ] && source ../qt4.options
    
    _qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
    _qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
    _qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

    unset QTDIR QTINC QTLIB
    ${_qt4_qmake} -v || exit $?
    export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
    PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:$PATH}" ; export PATH

    make xconfig || exit 1
  else
    echo "DISPLAY not found. Running menuconfig"
    make menuconfig || exit 1
  fi
fi

sed -i -e "/^CONFIG_LOCALVERSION=/s|=.*|=\"-${RVER}\"|g" \
  .config || exit 1

make -j${NJOBS} || make || exit 1

mkdir -p ${PKG}/${MODDIR}
make INSTALL_MOD_PATH=${MPKG} modules_install KERNELRELEASE=${FVER} mod-fw= || exit 1
make INSTALL_MOD_PATH=${MPKG} vdso_install KERNELRELEASE=${FVER} || exit 1

if [ ! -s ldconfig-kernel.conf ]; then
  echo '# Placeholder file, no vDSO hwcap entries used in this kernel.' \
  > ldconfig-kernel.conf
  mkdir -p ${MPKG}/etc/ld.so.conf.d
  install -pm 0644 ldconfig-kernel.conf \
    ${MPKG}/etc/ld.so.conf.d/kernel-${FVER}.conf
fi

# =================================================================
# Main package
# =================================================================

if [ "${PARCH}" = "x86_64" ] ;then
  KERNEL=arch/x86/boot/bzImage
else
  KERNEL=arch/i386/boot/bzImage
fi
SYSMAP=System.map
CONFIG=.config

mkdir -p ${PKG}/boot || exit 1

cp ${KERNEL} ${PKG}/boot/vmlinuz-${FVER} || exit 1
#/sbin/rdev -R ${PKG}/boot/vmlinuz-${FVER} 0
#/sbin/rdev -v ${PKG}/boot/vmlinuz-${FVER} -1
#/sbin/rdev -r ${PKG}/boot/vmlinuz-${FVER} 0
cp ${SYSMAP} ${PKG}/boot/System.map-${FVER} || exit 1
cp ${CONFIG} ${PKG}/boot/config-${FVER} || exit 1

if [ "${SB_SYMLNK}" = "YES" ] ;then
  ln -sf vmlinuz-${FVER} ${PKG}/boot/vmlinuz
  ln -sf System.map-${FVER} ${PKG}/boot/System.map
  ln -sf config-${FVER} ${PKG}/boot/config
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc

cat > ${PKG}/install/doinst.sh << EOF

if [ -x sbin/update-grub ] ;then
  echo "Updating /boot/grub/grub.cfg, if enabled..."
  chroot . /sbin/update-grub 1> /dev/null 2> /dev/null
fi

EOF

# =================================================================
# Modules package
# =================================================================
mkdir -p ${MPKG}/etc/rc.d
cat ${CWD}/rc.modules.new \
  > ${MPKG}/etc/rc.d/rc.modules-${FVER}.new || exit 1
chmod 755 ${MPKG}/etc/rc.d/rc.modules-${FVER}.new
if [ -f ${CWD}/rc.modules.${KERNNAME} ];then
  cat ${CWD}/rc.modules.${KERNNAME} \
    > ${MPKG}/etc/rc.d/rc.modules-${FVER}.${KERNNAME} || exit 1
  chmod 755 ${MPKG}/etc/rc.d/rc.modules-${FVER}.${KERNNAME}
fi

# Clean backup files from patch.
find . \( -name '*~' -o -name '*.orig' \) -exec rm -f {} ';' >/dev/null
# remove unnecessary SCM files
find . -name .gitignore -exec rm -f {} ';' >/dev/null

( # Development
  rm -f ${MPKG}/${MODDIR}/build || exit 1
  rm -f ${MPKG}/${MODDIR}/source || exit 1
  mkdir -p ${MPKG}/${MODDIR}/build || exit 1
  ( cd ${MPKG}/${MODDIR} ; ln -s build source ) || exit 1
  # dirs for additional modules per module-init-tools, kbuild/modules.txt
  mkdir -p ${MPKG}/${MODDIR}/extra || exit 1
  mkdir -p ${MPKG}/${MODDIR}/updates || exit 1
  mkdir -p ${MPKG}/${MODDIR}/weak-updates || exit 1
  # first copy everything
  cp --parents $(find  -type f -name "Makefile*" -o -name "Kconfig*") \
     ${MPKG}/${MODDIR}/build || exit 1
  cp Module.symvers ${MPKG}/${MODDIR}/build || exit 1
  cp System.map ${MPKG}/${MODDIR}/build || exit 1
  if [ -s Module.markers ]; then
    cp Module.markers ${MPKG}/${MODDIR}/build || exit 1
  fi
  # then drop all but the needed Makefiles/Kconfig files
  rm -rf ${MPKG}/${MODDIR}/build/Documentation || exit 1
  rm -rf ${MPKG}/${MODDIR}/build/scripts || exit 1
  rm -rf ${MPKG}/${MODDIR}/build/include || exit 1
  cp .config ${MPKG}/${MODDIR}/build || exit 1
  cp -a scripts ${MPKG}/${MODDIR}/build || exit 1

  if [ -f tools/objtool/objtool ]; then
    cp -a tools/objtool/objtool ${MPKG}/${MODDIR}/build/tools/objtool/ || exit 1
  fi

  if [ -d arch/x86/scripts ]; then
    cp -a arch/x86/scripts ${MPKG}/${MODDIR}/build/arch/x86 || exit 1
  fi
  if [ -f arch/x86/*lds ]; then
    cp -a arch/x86/*lds ${MPKG}/${MODDIR}/build/arch/x86/ || exit 1
  fi

  rm -f ${MPKG}/${MODDIR}/build/scripts/*.o
  rm -f ${MPKG}/${MODDIR}/build/scripts/*/*.o
  
  if [ -d arch/x86/include ]; then
    cp -a --parents arch/x86/include ${MPKG}/${MODDIR}/build/
  fi

  cp -a include ${MPKG}/${MODDIR}/build/include || exit 1

  # files for 'make prepare' to succeed with kernel-devel
  cp -a --parents arch/x86/entry/syscalls/syscall_32.tbl ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/entry/syscalls/syscalltbl.sh ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/entry/syscalls/syscallhdr.sh ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/entry/syscalls/syscall_64.tbl ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/tools/relocs_32.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/tools/relocs_64.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/tools/relocs.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/tools/relocs_common.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/tools/relocs.h ${MPKG}/${MODDIR}/build/
  cp -a --parents tools/include/tools/le_byteshift.h ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/purgatory/purgatory.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/purgatory/sha256.h ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/purgatory/sha256.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/purgatory/stack.S ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/purgatory/string.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/purgatory/setup-x86_64.S ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/purgatory/entry64.S ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/boot/string.h ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/boot/string.c ${MPKG}/${MODDIR}/build/
  cp -a --parents arch/x86/boot/ctype.h ${MPKG}/${MODDIR}/build/

) || exit 1

# Make sure the Makefile and version.h have a matching timestamp so that
# external modules can be built
touch -r ${MPKG}/${MODDIR}/build/Makefile \
         ${MPKG}/${MODDIR}/build/include/generated/uapi/linux/version.h || exit 1
# Copy .config to include/config/auto.conf so "make prepare" is unnecessary.
cp ${MPKG}/${MODDIR}/build/.config \
   ${MPKG}/${MODDIR}/build/include/config/auto.conf || exit 1

if [ -s vmlinux.id ]; then
  cp vmlinux.id ${MPKG}/${MODDIR}/build/vmlinux.id
fi

# Move the devel headers out of the root file system
mkdir -p ${MPKG}/usr/src/kernels
mv ${MPKG}/${MODDIR}/build ${MPKG}/${KERNELSDIR} || exit 1
ln -sf ../../..${KERNELSDIR} ${MPKG}/${MODDIR}/build || exit 1

# prune junk from kernel-devel
find ${MPKG}/${KERNELSDIR} -name ".*.cmd" -exec rm -f {} ';'

INITIMG=initramfs-${FVER}.img

mkdir ${MPKG}/boot
touch ${MPKG}/boot/${INITIMG}

# Write out the doinst.sh:
mkdir -p ${MPKG}/install
cat ${CWD}/slack-desc.modules > ${MPKG}/install/slack-desc
echo "${NAME} = $( echo ${FVER} | tr - _ )-${PARCH}-${BUILD}${PACKAGER_ID}" \
  > ${MPKG}/install/slack-required

cat > ${MPKG}/install/doinst.sh << EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
config etc/rc.d/rc.modules-${FVER}.new

# If rc.modules is a real file, back it up:
if [ -r etc/rc.d/rc.modules -a ! -L etc/rc.d/rc.modules ]; then
  cp -a etc/rc.d/rc.modules etc/rc.d/rc.modules.bak
fi
# Make rc.modules a symlink if it's not already, but do not replace
# an existing symlink.  You'll have to decide to point at a new version
# of this script on your own...
if [ ! -L etc/rc.d/rc.modules ]; then
  ( cd etc/rc.d ; rm -rf rc.modules )
  ( cd etc/rc.d ; ln -sf rc.modules-${FVER} rc.modules )
fi

# A good idea whenever kernel modules are added or changed:
if [ -x sbin/depmod ]; then
  chroot . /sbin/depmod -a ${FVER} 1> /dev/null 2> /dev/null
fi

# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi

if [ -e boot/${INITIMG} ] ;then
  chroot . /bin/rm -f /boot/${INITIMG} 1> /dev/null 2> /dev/null
fi

if [ -x sbin/update-dracut ] ;then
  echo "Building /boot/${INITIMG}, if enabled..."
  chroot . /sbin/update-dracut ${FVER} 1> /dev/null 2> /dev/null
fi

if [ -x sbin/update-grub ] ;then
  echo "Updating /boot/grub/grub.cfg, if enabled..."
  chroot . /sbin/update-grub 1> /dev/null 2> /dev/null
fi

EOF

# =================================================================
# Headers package
# =================================================================

make INSTALL_HDR_PATH=${HPKG}/usr headers_install || exit 1

find ${HPKG}/usr/include \
  \( -name .install -o -name .check -o \
  -name ..install.cmd -o -name ..check.cmd \) | xargs rm -f

find ${MPKG}/${KERNELSDIR} -name .*.cmd -exec rm -f {} \;

find ${HPKG} -type d -exec chmod 755 {} \;
find ${HPKG} -type f -exec chmod 644 {} \;

# Write out the doinst.sh:
mkdir -p ${HPKG}/install
cat ${CWD}/slack-desc.headers > ${HPKG}/install/slack-desc

# =================================================================
# Documentation package
# =================================================================
mkdir -p ${DOCDIR}

if [ "${SB_EDOC}" = "YES" ] ;then 
  # Make the HTML and man pages.
  make -j${NJOBS} htmldocs mandocs

  man9dir=${DPKG}/usr/man/man9
  mkdir -p ${man9dir}
  find Documentation/DocBook/man -name '*.9.gz' -print0 | \
    xargs -0 --no-run-if-empty install -m 644 -t ${man9dir} ${m}
  ls ${man9dir} | grep -q '' || > ${man9dir}/BROKEN
  if [ -f ${man9dir}/BROKEN ] ;then
    rm -rf ${DPKG}/usr/man
  fi
fi

# copy the source over
chmod -R a+r Documentation/*
( cd Documentation || exit 1
  tar -f - --exclude=man --exclude='.*' -c * | tar xf - -C ${DOCDIR} || exit 1
) || exit 1
zcat ${CWD}/COPYING.modules.gz \
  > ${DOCDIR}/COPYING.modules || exit 1

find ${DPKG} -type d -exec chmod 0755 {} \;
find ${DPKG} -type f -exec chmod 0644 {} \;

mkdir -p ${DPKG}/install
cat ${CWD}/slack-desc.doc > ${DPKG}/install/slack-desc

sed -i "s|_KERNNAME|${KERNNAME}|g;
        s|_PACKAGER|${PACKAGER}|g;s|_BUILD_DATE|${DATE}|g" \
        ${PKGF}/*/install/slack-desc

cp .config ${CONFIGFILE}

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{dsdt,fblogo,patches}
  install -pm0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/rc.modules.{new,${KERNNAME}} \
    ${CWD}/COPYING.modules.gz ${SB_SROOT}/${CONFIGFILE} \
    ${SBDIR}/
  install -pm0755 ${CWD}/kernel-custom.SlackBuild \
    ${SBDIR}/kernel-custom.SlackBuild
  install -pm0644 ${CWD}/patches/* \
    ${SBDIR}/patches/
  install -pm0644 ${CWD}/dsdt/*{.dsdt,-${KERNNAME}.{dsl,hex}.xz} \
    ${SBDIR}/dsdt/
  install -pm0644 ${CWD}/fblogo/*{.{fblogo,sh},-${KERNNAME}.{png,ppm.xz}} \
    ${SBDIR}/fblogo/
  rmdir ${SBDIR}/dsdt ${SBDIR}/fblogo ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
MROOTCOMMANDS="set -o errexit -o xtrace ; cd ${MPKG} ;
  /bin/chown --recursive root:root .  ;"
HROOTCOMMANDS="set -o errexit -o xtrace ; cd ${HPKG} ;
  /bin/chown --recursive root:root .  ;"
DROOTCOMMANDS="set -o errexit -o xtrace ; cd ${DPKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
MROOTCOMMANDS="${MROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${MPKGNAME}.${PKGFORMAT} "
HROOTCOMMANDS="${HROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${HPKGNAME}.${PKGFORMAT} "
DROOTCOMMANDS="${DROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${DPKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${MROOTCOMMANDS}
  eval ${HROOTCOMMANDS}
  eval ${DROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${MROOTCOMMANDS} | fakeroot
  echo ${HROOTCOMMANDS} | fakeroot
  echo ${DROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
