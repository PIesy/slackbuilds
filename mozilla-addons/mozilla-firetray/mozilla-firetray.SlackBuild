#!/bin/sh
#-- mozilla-firetray for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ mozilla-firetray.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# https://github.com/foudfou/FireTray

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

SNAPBUILD=${SNAPBUILD:-NO}

PNAME=firetray
NAME=mozilla-${PNAME}
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
  SNAPBRANCH=${SNAPBRANCH:-master}
else
  VERSION=${VERSION:-0.6.0}
fi
ARCH=noarch
SLKTARGET=${SLKTARGET:-x86_64}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/mozilla-addons/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

SMVER="$(seamonkey -v 2>/dev/null | awk '{print $3}' | cut -d. -f1-2)"
XULVER="$(firefox -v 2>/dev/null | awk '{print $3}' | cut -d. -f1)"

# Set YES to apply version hack
SB_VHACK=${SB_VHACK:-NO}
SB_SMVER=${SB_SMVER:-${SMVER:-2.32}}
SB_XULVER=${SB_XULVER:-${XULVER:-35.0}}

DATE=$(LC_ALL=C date +%d-%b-%Y)

FTAPP_ID="{9533f794-00b4-4354-aa15-c2bbda6989f8}"
FXAPP_ID="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"
ICAPP_ID="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"
TBAPP_ID="{3550f703-e582-4d05-9a08-453d09bdfdc6}"
SMAPP_ID="{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}"
SBAPP_ID="{718e30fb-e89b-41dd-9da7-e25a45638b28}"
CZAPP_ID="{59c81df5-4b7a-477b-912d-4e0fdf64e5f2}"

if [ "${SNAPBUILD}" = "YES" ] ;then
  SRCDIR=${NAME}-${VERSION}
  SRCARCHIVE=${SRCDIR}.tar.xz
else
  SRCDIR=${PNAME}-${VERSION}-sm+tb+fx-linux
  SRCARCHIVE=${SRCDIR}.xpi
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="https://github.com/foudfou/FireTray/archive/${SRCARCHIVE}"
DL_URLB="https://addons.mozilla.org/en-US/firefox/addon/firetray/versions"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  if ! test -r ${CWD}/${SRCARCHIVE} ;then
    link="$(wget ${DL_URLB} -O - | grep -E 'data-realurl=|href=' | fgrep "${SRCARCHIVE}" | head -n1 | sed -e 's|^.*data-realurl=\"||g' -e 's|^.*href=\"||g' -e 's|?src=version-history.*$||g')"
    ${DL_PROG} ${DL_OPTS} ${link} || exit 1
  fi
fi

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, check VERSION and try again."
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0s

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

MZ_EXT_DIR=/usr/share/mozilla/extensions

cd ${TMP}
rm -rf ${SRCDIR}
if [ "${SNAPBUILD}" = "YES" ] ;then
  tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
  cd ${SRCDIR} || exit 1
else
  mkdir -p ${SRCDIR}
  cd ${SRCDIR} || exit 1
  unzip ${CWD}/${SRCARCHIVE} || exit 1
fi

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

SB_SROOT="$(pwd)"

unset INSRDF
if [ "${SNAPBUILD}" = "YES" ] ;then
  INSSRC='src/'
  # Make sure we don't ship prebuilt stuff
  find . \( -name '*.xpi' -o -name '*.jar' -o -name '*.xpt' -o -name '*.so' \) -exec rm -f '{}' \;
fi

XPIVER="$(grep '<em:version>' ${INSSRC}install.rdf | cut -d\> -f2 |cut -d\< -f1)"
XPIREL="${BUILD}${PACKAGER_ID}"


if [ "${SB_VHACK}" = "YES" ] ;then
  sed -i \
    -e "/maxVersion/s|27\.0|${SB_XULVER}.\*|g" \
    -e "/maxVersion/s|2.25|${SB_SMVER}.\*|g" \
    ${INSSRC}install.rdf || exit 1
fi

sed -i -e '/maxVersion/s|\.0[a-z][1-9]|.\*|g' ${INSSRC}install.rdf || exit 1

sed -i \
  -e '/app_browser_icon_names/s|"web-browser", "internet-web-browser"||g' \
  -e '/app_mail_icon_names/s|"indicator-messages", "applications-email-panel"||g' \
  ${INSSRC}defaults/preferences/prefs.js || exit 1

mkdir -p ${PKG}/usr/share/mozilla/addons/${NAME}-${XPIVER}

if [ "${SNAPBUILD}" = "YES" ] ;then
  cp LICENSE src
  
  make -C src build build_dir=${SB_SROOT}/build || exit $?
  
  rm -f build/*.xpi
  cp -a build/* ${PKG}/usr/share/mozilla/addons/${NAME}-${XPIVER} || exit $?
else
  cp -a * ${PKG}/usr/share/mozilla/addons/${NAME}-${XPIVER}/ || exit $?
fi

#now symlink the products extension's directories to the core extension directory

for i in {${FXAPP_ID},${TBAPP_ID},${SMAPP_ID},${SBAPP_ID},${CZAPP_ID}};do
  mkdir -p ${PKG}/${MZ_EXT_DIR}/${i}/${FTAPP_ID}
  ( cd ${PKG}/${MZ_EXT_DIR}/${i}/${FTAPP_ID} || exit 1
    for j in {install.rdf,chrome.manifest,chrome,defaults,modules};do
      ln -s ../../../addons/${NAME}-${XPIVER}/${j} ${j} || exit $?
    done
    if [ "${SNAPBUILD}" != "YES" ] ;then
      ln -s ../../../addons/${NAME}-${XPIVER}/META-INF META-INF || exit $?
    fi
  ) || exit $?
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README.md TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -s ../../share/mozilla/addons/${NAME}-${XPIVER}/LICENSE ${DOCDIR}/LICENSE
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
