#!/bin/sh
#-- nvidia-glx-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ nvidia-glx.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http:/www.nvidia.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=nvidia-glx
NAME=nvidia-glx-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-340.101}
CLSOVER=1.0.0
LVER=$(echo ${VERSION} | tr - . )
VIDEOGP="$(getent group video | cut -d ':' -f 3)"
ARCH32=x86
SLKTARGET32=${SLKTARGET32:-i486}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/nvidia/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=NVIDIA-Linux-x86-${VERSION}.run

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://download.nvidia.com/XFree86/Linux-x86/${VERSION}/${SRCARCHIVE}"
DL_URLB="http://download.nvidia.com/XFree86/Linux-x86/${VERSION}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

LIBDIRSUFFIX=""

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
sh ${CWD}/${SRCARCHIVE} -x --target ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if ! [ -e libOpenCL.so.${CLSOVER} ] ;then
  echo "libOpenCL.so.${CLSOVER} not found"
  echo "Check CLSOVER"
  exit 1
fi

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

# libvdpau have a package
rm -f libvdpau.so*

# Libraries
mkdir -m 0755 -p ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/tls
for lib in libEGL libGL libGLESv2 libcuda libnvidia-{cfg,encode,fbc,ifr,ml,opencl} libnvcuvid ;do
  install -m 0755 ${lib}.so.${LVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
  soname="$(objdump -p ${lib}.so.${LVER} | grep SONAME | awk '{print $2}')"
  ln -s ${lib}.so.${LVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${soname}
  ln -s ${soname} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so
done

for lib in libEGL libGL libGLESv1_CM libGLESv2 ;do
  rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so
done

for lib in libOpenCL ;do
  SCLSOVER=$(echo ${CLSOVER} | cut -d. -f1-2)
  install -m 0755 ${lib}.so.${CLSOVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
  soname="$(objdump -p ${lib}.so.${CLSOVER} | grep SONAME | awk '{print $2}')"
  ln -s ${lib}.so.${CLSOVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so.${SCLSOVER}
  ln -s ${lib}.so.${SCLSOVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${soname}
  ln -s ${soname} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so
done

# Do not have soname, so add .1
#install -m 0755 libnvidia-vgxcfg.so.${LVER} \
#  ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
#ln -s libnvidia-vgxcfg.so.${LVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/libnvidia-vgxcfg.so.1
#ln -s libnvidia-vgxcfg.so.1 ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/libnvidia-vgxcfg.so

for lib in libnvidia-{compiler,glcore,eglcore,glsi} ;do
  install -m 0755 ${lib}.so.${LVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
done

install -m 0755 libnvidia-tls.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
install -m 0755 tls/libnvidia-tls.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/tls/ || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau
install -m 0755 libvdpau_nvidia.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau/ || exit 1
soname="$(objdump -p libvdpau_nvidia.so.${LVER} | grep SONAME | awk '{print $2}')"
ln -s libvdpau_nvidia.so.${LVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau/${soname}
ln -s ${soname} ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau/libvdpau_nvidia.so

# ld.so.conf 
mkdir -p ${PKG}/etc/ld.so.conf.d
echo "/usr/lib/nvidia" > ${PKG}/etc/ld.so.conf.d/51-nvidia-x86.conf

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
