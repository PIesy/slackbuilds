#!/bin/bash
#-- nvidia-glx for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ nvidia-glx.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http:/www.nvidia.com

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=nvidia-glx
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-340.101}
CLSOVER=1.0.0
LVER=$(echo ${VERSION} | tr - . )
VIDEOGP="$(getent group video | cut -d ':' -f 3)"
# x86 or x86_64
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  DARCH=x86_64
else
  DARCH=x86
  ARCH=x86
fi
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/nvidia/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to add libwfb from nvidia (for older xorg)
SB_WFB=${SB_WFB:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
if [ "${ARCH}" = "x86_64" ] ;then
  SRCARCHIVE=NVIDIA-Linux-${DARCH}-${VERSION}-no-compat32.run
else
  SRCARCHIVE=NVIDIA-Linux-${DARCH}-${VERSION}.run
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="ftp://download.nvidia.com/XFree86/Linux-${DARCH}/${VERSION}/${SRCARCHIVE}"
DL_URLB="http://download.nvidia.com/XFree86/Linux-${DARCH}/${VERSION}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}
cd ${TMP}
rm -rf ${SRCDIR}
sh ${CWD}/${SRCARCHIVE} -x --target ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if ! [ -e libOpenCL.so.${CLSOVER} ] ;then
  echo "libOpenCL.so.${CLSOVER} not found"
  echo "Check CLSOVER"
  exit 1
fi

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

# etc files
mkdir -m 0755 -p ${PKG}/lib/modprobe.d
sed -e "s|_VIDEOGP|${VIDEOGP}|g" ${CWD}/${NAME}.modprobe \
  > ${PKG}/lib/modprobe.d/${NAME}.conf || exit 1

cat > ${PKG}/lib/modprobe.d/blacklist-nouveau.conf <<'EOF'
# nvidia-glx
# Blacklist nouveau driver
blacklist nouveau
options nouveau modeset=0
EOF

mkdir -m 0755 -p ${PKG}/etc/profile.d
for file in ${NAME}.{csh,sh} ;do
  install -m0755 ${CWD}/profile.d/${file} \
    ${PKG}/etc/profile.d/${file}.new || exit 1
done

# Binaries
mkdir -m 0755 -p ${PKG}/usr/{bin,sbin}
install -m 0755 nvidia-bug-report.sh nvidia-smi nvidia-cuda-mps-{control,server} \
  ${PKG}/usr/bin/ || exit 1

zcat ${CWD}/nvidia-config-display.gz \
  > ${PKG}/usr/sbin/nvidia-config-display || exit 1
chmod 0755 ${PKG}/usr/{bin,sbin}/*

# libvdpau have a package
rm -f libvdpau.so*

# Libraries
mkdir -m 0755 -p ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/tls
for lib in libEGL libGL libGLESv2 libcuda libnvidia-{cfg,encode,fbc,ifr,ml,opencl} libnvcuvid ;do
  install -m 0755 ${lib}.so.${LVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
  soname="$(objdump -p ${lib}.so.${LVER} | grep SONAME | awk '{print $2}')"
  ln -s ${lib}.so.${LVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${soname}
  ln -s ${soname} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so
done

for lib in libEGL libGL libGLESv1_CM libGLESv2 ;do
  rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so
done

for lib in libOpenCL ;do
  SCLSOVER=$(echo ${CLSOVER} | cut -d. -f1-2)
  install -m 0755 ${lib}.so.${CLSOVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
  soname="$(objdump -p ${lib}.so.${CLSOVER} | grep SONAME | awk '{print $2}')"
  ln -s ${lib}.so.${CLSOVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so.${SCLSOVER}
  ln -s ${lib}.so.${SCLSOVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${soname}
  ln -s ${soname} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/${lib}.so
done

# Do not have soname, so add .1
#install -m 0755 libnvidia-vgxcfg.so.${LVER} \
#  ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
#ln -s libnvidia-vgxcfg.so.${LVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/libnvidia-vgxcfg.so.1
#ln -s libnvidia-vgxcfg.so.1 ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/libnvidia-vgxcfg.so

for lib in libnvidia-{compiler,glcore,eglcore,glsi} ;do
  install -m 0755 ${lib}.so.${LVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
done

install -m 0755 libnvidia-tls.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/ || exit 1
install -m 0755 tls/libnvidia-tls.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/nvidia/tls/ || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau
install -m 0755 libvdpau_nvidia.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau/ || exit 1
soname="$(objdump -p libvdpau_nvidia.so.${LVER} | grep SONAME | awk '{print $2}')"
ln -s libvdpau_nvidia.so.${LVER} ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau/${soname}
ln -s ${soname} ${PKG}/usr/lib${LIBDIRSUFFIX}/vdpau/libvdpau_nvidia.so

# Xorg modules

# Xorg driver
mkdir -m 0755 -p ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/drivers
install -m 0755 nvidia_drv.so \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/drivers/ || exit 1

# Xorg extension
mkdir -m 0755 -p ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions/nvidia
install -m 0755 libglx.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions/nvidia/ || exit 1
ln -s libglx.so.${LVER} \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions/nvidia/libglx.so

if [ "${SB_WFB}" = "YES" ] ; then
  install -m 0755 libnvidia-wfb.so.${LVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/ || exit 1
  ln -sf libnvidia-wfb.so.${LVER} \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/xorg/modules/libwfb.so
fi

mkdir -m 0755 -p ${PKG}/usr/man/man1
install -m 0644 nvidia-smi.1* nvidia-cuda-mps-control.1* \
  ${PKG}/usr/man/man1/ || exit 1

mkdir -p ${PKG}/etc/OpenCL/vendors
install -pm0644 nvidia.icd \
  ${PKG}/etc/OpenCL/vendors/nvidia.icd || exit 1

mkdir -p ${PKG}/etc/nvidia/nvidia-application-profiles-rc.d

mkdir -p ${PKG}/usr/share/nvidia

install -pm0644 nvidia-application-profiles-*-{key*,rc} ${PKG}/usr/share/nvidia/ || exit 1

cp -r kernel ${PKG}/usr/share/nvidia/nvidia-kmod-src-${VERSION} || exit 1

# ld.so.conf 
mkdir -p ${PKG}/etc/ld.so.conf.d
echo "/usr/lib${LIBDIRSUFFIX}/nvidia" > ${PKG}/etc/ld.so.conf.d/50-nvidia-${ARCH}.conf || exit 1

mkdir -p ${PKG}/usr/share/X11/xorg.conf.d
cat > ${PKG}/usr/share/X11/xorg.conf.d/00-nvidia-no-glamor.conf <<EOF
Section "Module"
  Disable "glamoregl"
EndSection
EOF

cat > ${PKG}/usr/share/X11/xorg.conf.d/20-nvidia-path.conf <<EOF
Section "Files"
  ModulePath "/usr/lib${LIBDIRSUFFIX}/xorg/modules/extensions/nvidia"
  ModulePath "/usr/lib${LIBDIRSUFFIX}/xorg/modules"
EndSection
EOF

cat > ${PKG}/usr/share/X11/xorg.conf.d/21-nvidia-device.conf <<EOF
Section "Device"
        Identifier "Default nvidia Device"
        Driver "nvidia"
        Option "NoLogo" "True"
        Option "RandRRotation" "true"
        Option "RenderAccel" "true"
EndSection
EOF

mkdir -p ${PKG}/usr/lib/nvidia
echo "${PKGNAME}" > ${PKG}/usr/lib/nvidia/alternate-install-available

mkdir -p ${PKG}/lib/udev/rules.d
cat > ${PKG}/lib/udev/rules.d/99-nvidia.rules <<EOF
KERNEL=="nvidia*", TAG+="systemd"
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE README.txt html ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
zcat ${CWD}/nvidia-README.Fedora.gz > ${DOCDIR}/README.Fedora
[ -r NVIDIA_Changelog ] && head -n 1000 NVIDIA_Changelog > ${DOCDIR}/NVIDIA_Changelog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms
if [ -r etc/profile.d/${NAME}.sh -a -r etc/profile.d/${NAME}.sh.new ]; then
  chmod --reference=etc/profile.d/${NAME}.sh etc/profile.d/${NAME}.sh.new
fi
if [ -r etc/profile.d/${NAME}.csh -a -r etc/profile.d/${NAME}.csh.new ]; then
  chmod --reference=etc/profile.d/${NAME}.csh etc/profile.d/${NAME}.csh.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/profile.d -name '*.new' -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/*.patch.gz ${CWD}/nvidia-config-display.gz ${CWD}/${NAME}.modprobe \
    ${CWD}/nvidia-README.Fedora.gz ${SBDIR}/
  mkdir -p ${SBDIR}/profile.d
  install -m0644 ${CWD}/profile.d/${NAME}.* \
    ${SBDIR}/profile.d/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
