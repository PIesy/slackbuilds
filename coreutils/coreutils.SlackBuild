#!/bin/sh
#-- coreutils for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ coreutils.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.gnu.org/software/coreutils/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=coreutils
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-8.26}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to use Fedora/Red Hat uname patch (else use Slackware patch)
SB_RHUNAME=${SB_RHUNAME:-NO}
# Set to YES to build some static binaries for pkgtool use.
# Static will be in /bin, shared will be moved to /usr/bin.
# This needs acl, attr and libcap static libraries.
SB_STATIC=${SB_STATIC:-YES}
# Static binaries to install
SB_STATIC_BIN=${SB_STATIC_BIN:-cp ls mv}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.sig

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# XXX docs should say /var/run/[uw]tmp not /etc/[uw]tmp
sed -i -e 's,/etc/utmp,/var/run/utmp,g;s,/etc/wtmp,/var/run/wtmp,g' \
    doc/coreutils.texi || exit 1

chmod a+x tests/misc/sort-mb-tests.sh

#fix typos/mistakes in localized documentation(#439410, #440056)
for pofile in $(find ./po/*.p*)
do
  sed -i 's/-dpR/-cdpR/' "${pofile}"
  sed -i 's/commmand/command/' "${pofile}"
done

# Compilation with glibc version later than 2.3.2 needs the environment
# variable DEFAULT_POSIX2_VERSION set to 199209.
# Without the next line, the coreutils will start complaining about 'obsolete'
# command switches, like "tail -20" will be considered obsolete.
# This behaviour breaks many other packages... the 'obsolete' parameters are
# too commonly used to disregard them.  Better to stick with the older more
# widely accepted standards until things begin to demand the new way.

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  touch aclocal.m4 configure config.hin Makefile.in */Makefile.in || exit 1
  autoreconf -ivf || exit $?
fi

CFLAGS="${SLKCFLAGS} -fpic -fno-strict-aliasing -D_GNU_SOURCE=1" \
DEFAULT_POSIX2_VERSION=200112 alternative=199209 \
./configure \
  --prefix=/usr \
  --bindir=/bin \
  --libdir=/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --enable-dependency-tracking \
  --without-gmp \
  --enable-largefile \
  --enable-install-program=arch \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

make mandir=${PKG}/usr/man install-man || exit 1

if [ "${SB_STATIC}" = "YES" ] ;then
  sed \
    -e '/^LIB_XATTR/s|-lattr|-Wl,-Bstatic -lattr -Wl,-Bdynamic|g' \
    -e '/^LIB_ACL/s|-lacl|-Wl,-Bstatic -lacl -Wl,-Bdynamic|g' \
    -e '/^LIB_CAP/s|-lcap|-Wl,-Bstatic -lcap -Wl,-Bdynamic|g' \
  Makefile > Makefile.static || exit 1
  make clean
  for file in ${SB_STATIC_BIN} ;do
    make -j${NJOBS} -f Makefile.static src/${file} || exit 1
  done
fi

# This seems wrong, and it stomps on files in the ksh93 package.  Though, I'm
# not sure the placement of those is correct, either...
( cd ${PKG}/usr/share/locale
  rm -rf */LC_TIME
)

# Remove things that are provided by other Slackware packages:
# util-linux-ng, shadow, procps
for dupe in hostname kill su uptime ; do
  rm -f ${PKG}/bin/${dupe} ${PKG}/usr/bin/${dupe} ${PKG}/usr/sbin/${dupe} ${PKG}/usr/man/man?/${dupe}.*
done

# Provided by bin package, so rename as it has some new options.
mv ${PKG}/bin/mktemp ${PKG}/bin/mktemp-coreutils
mv ${PKG}/usr/man/man1/mktemp.1 ${PKG}/usr/man/man1/mktemp-coreutils.1

mkdir -p ${PKG}/usr/sbin

# These are important enough that they should probably all go into /bin at this
# point...   Having some of them unavailable when /usr isn't mounted is just a
# source of unending bug reports for various third party applications.
# Time to end those reports.  :-)
mkdir -p ${PKG}/bin ${PKG}/usr/bin
( cd ${PKG}/usr/bin
  for file in ../../bin/* ; do
    ln --verbose -sf ${file} .
  done
)

if [ "${SB_STATIC}" = "YES" ] ;then
  for file in ${SB_STATIC_BIN} ;do
    rm -f ${PKG}/usr/bin/${file}
    mv ${PKG}/bin/${file} ${PKG}/usr/bin/${file} || exit 1
    install -pm0755 src/${file} ${PKG}/bin/ || exit 1
  done
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/etc

# Add some defaults, although a very slack-like set of default options are built
# into /bin/ls now anyway:
install -pm0644 ${CWD}/DIR_COLORS ${PKG}/etc/DIR_COLORS.new || exit 1

# Since dircolors no longer provides any default aliases these scripts
# will be needed for ls to act as expected:
mkdir -p ${PKG}/etc/profile.d
for file in coreutils-dircolors.{csh,sh} ;do
install -pm0755 ${CWD}/profile.d/${file} \
  ${PKG}/etc/profile.d/ || exit 1
done

# Add ginstall links (there's still a lot of stuff that needs this to compile):
( cd ${PKG}/bin ; ln -sf install ginstall )
( cd ${PKG}/usr/bin ; ln -sf ../../bin/ginstall ginstall )
( cd ${PKG}/usr/man/man1 ; ln -sf install.1.gz ginstall.1.gz )

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING ABOUT-NLS NEWS README THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${NAME}.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches,profile.d}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/DIR_COLORS ${CWD}/*-dircolors.*.gz \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/profile.d/*.* \
    ${SBDIR}/profile.d/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n --prepend ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
