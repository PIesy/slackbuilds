#!/bin/sh
#-- cmake for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ cmake.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.cmake.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=cmake
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-3.4.0}
SVER=$( echo ${VERSION} | cut -d . -f1-2 )
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable qt-gui (Needs qt5)
SB_QT=${SB_QT:-YES}
# Set to YES to install vim syntax files
SB_VIM=${SB_VIM:-YES}
SB_VIMDIR=${PKG}/usr/share/vim/vimfiles

# Set default Release optimization flag (s,0,1,2,3, none to remove)
SB_OPTIM=${SB_OPTIM:-2}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.cmake.org/files/v${SVER}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../qt5.options ] && source ../qt5.options

_qt5_prefix=${_qt5_prefix:-/usr/lib${LIBDIRSUFFIX}/qt5}
_qt5_archdatadir=${_qt5_archdatadir:-/usr/lib${LIBDIRSUFFIX}/qt5}
_qt5_bindir=${_qt5_bindir:-${_qt5_prefix}/bin}
_qt5_qmake=${_qt5_qmake:-${_qt5_bindir}/qmake}


if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt5_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt5_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .
find -name \*.h -o -name \*.cxx -print0 | xargs -0 chmod -x

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e '/^Icon=/s|\.png||g' Source/QtDialog/CMake.desktop || exit 1

case "${SB_OPTIM}" in
  s|1|2|3)
    SB_OPTIM="-O${SB_OPTIM} "
    ;;
  *|none)
    SB_OPTIM=""
    ;;
esac

sed -i \
  -e "/FLAGS_RELEASE_INIT/s|\"-O3\"|\"${SB_OPTIM}\"|g" \
  -e "/FLAGS_RELEASE_INIT/s|-O3 |${SB_OPTIM}|g" \
  Modules/Compiler/{GNU,{GNU,G95}-Fortran}.cmake || exit 1

[ "${SB_QT}" = "YES" ] && SB_QTOPTS="--qt-gui --qt-qmake=${_qt5_qmake}"

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./bootstrap \
  --prefix=/usr \
  --datadir=/share/${NAME} \
  --mandir=/man \
  --docdir=/doc/${NAME}-${VERSION} \
  --parallel=${NJOBS} \
  --system-libs \
  ${SB_QTOPTS} \
  || exit $?

make -j${NJOBS} VERBOSE=1 || make VERBOSE=1 || exit $?
make install DESTDIR=${PKG} || exit $?

find ${PKG}/usr/share/${NAME}*/Modules -type f | xargs chmod -x
find ${PKG}/usr/share/${NAME}*/Modules -type f -name '*.orig' | xargs rm -f

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}

mkdir -p ${PKG}/usr/share/emacs/site-lisp
install -m 0644 Auxiliary/cmake-mode.el \
  ${PKG}/usr/share/emacs/site-lisp/ || exit 1

# RPM macros
mkdir -p ${PKG}/usr/lib/rpm/macros.d
install -pm0644 ${CWD}/macros.${NAME} ${PKG}/usr/lib/rpm/macros.d/macros.${NAME} || exit 1

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

completionsdir="$(pkg-config --variable=completionsdir bash-completion 2>/dev/null || echo /usr/share/bash-completion/completions)"
reldir="$(abs2rel /usr/share/cmake/completions ${completionsdir})"
mkdir -p ${PKG}/${completionsdir}
for f in ${PKG}/usr/share/cmake/completions/* ;
do
  ln -sf ${reldir}/$(basename $f) ${PKG}/${completionsdir}/
done

if [ "${SB_QT}" = "YES" ] ;then
# Desktop file
desktop-file-edit \
  --remove-key="Encoding" \
  --add-category="Qt" \
  --remove-category=Application \
  ${PKG}/usr/share/applications/CMake.desktop || exit 1
fi

if [ "${SB_VIM}" = "YES" ] ;then
  mkdir -p ${SB_VIMDIR}/{ftdetect,indent,syntax}
  install -m0644 Auxiliary/cmake-syntax.vim ${SB_VIMDIR}/syntax/ || exit 1
  install -m0644 Auxiliary/cmake-indent.vim ${SB_VIMDIR}/indent/ || exit 1
  zcat ${CWD}/${NAME}.vim.gz > ${SB_VIMDIR}/ftdetect/${NAME}.vim || exit 1
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  Example ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
EOF

if [ "${SB_QT}" = "YES" ] ;then
cat >> ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
EOF
fi

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/macros.* ${CWD}/*.vim.gz \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
