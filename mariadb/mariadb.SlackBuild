#!/bin/sh
#-- mariadb for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ mariadb.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://mariadb.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=mariadb
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-10.1.8}
SVER=$(echo ${VERSION} | cut -d . -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to include mysql-bench
SB_MYSQLBENCH=${SB_MYSQLBENCH:-NO}
# Set to YES to include mysql-test
SB_MYSQLTEST=${SB_MYSQLTEST:-NO}
# Set to YES to enable pam auth plugin
# Do not have effect without pam
SB_PAM=${SB_PAM:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

grep --quiet '^mysql:' /etc/passwd && SB_HUSER=1
grep --quiet '^mysql:' /etc/group && SB_HGROUP=1

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_MARIADB=${MIRROR_MYSQL:-http://ftp.osuosl.org/pub/${NAME}}
DL_URL="${MIRROR_MARIADB}/${NAME}-${VERSION}/source/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

cp ${CWD}/mysql_config_multilib.sh ${CWD}/systemd/*.{in,sh} scripts/ || exit 1
cp ${CWD}/rc.mysqld scripts/mysql.init.in || exit 1

cat > scripts/mysql.tmpfiles.d.in <<EOF
d @PID_FILE_DIR@ 0755 mysql mysql -
EOF

cat > scripts/my.cnf.in <<'EOF'
[mysqld]
# Settings user and group are ignored when systemd is used.
# If you need to run mysqld under different user or group, 
# customize your systemd unit file for mysqld according to the
# instructions in http://fedoraproject.org/wiki/Systemd
datadir=@MYSQL_DATADIR@
socket=@MYSQL_DATADIR@/mysql.sock
# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

[mysqld_safe]
log-error=@LOG_LOCATION@
pid-file=@PID_FILE_DIR@/@DAEMON_NAME@.pid

#
# This group is read both both by the client and the server
# use it for options that affect everything
#
[client-server]

#
# include all files from the config directory
#
!includedir @INSTALL_SYSCONF2DIR@
EOF

sed -i \
  -e 's|share/info|info|g' \
  -e 's|share/man|man|g' \
  -e 's|share/doc/|doc/|g' \
  cmake/install_layout.cmake

sed -i -e 's|@ONLY@|@ONLY|g' libmysql/CMakeLists.txt

#sed -i -e '/^FIND_PACKAGE/s|Boost 1.40.0|Boost 9.99.9|g' storage/oqgraph/CMakeLists.txt

# workaround for upstream bug #56342
rm -f mysql-test/t/ssl_8k_key-master.opt

# removing bundled cmd-line-utils
#rm -rf cmd-line-utils

sed -i -e 's/2.8.7/2.6.4/g' cmake/cpack_rpm.cmake

# workaround for upstream bug #56342
rm -f mysql-test/t/ssl_8k_key-master.opt

sed -i -e '/pkgconfig/s|INSTALL_SHAREDIR|INSTALL_LIBDIR|g' support-files/CMakeLists.txt

if [ "${SB_PAM}" != "YES" ] ;then
  sed -i -e 's|security/pam_appl.h|security/pam_appl_disabled.h|g' \
    plugin/auth_pam/CMakeLists.txt || exit 1
fi
unset TOKUDBOPTS
[ "${ARCH}" = "x86_64" ] && TOKUDBOPTS=OFF

export BINUTILS_LD=bfd

export CFLAGS="${SLKCFLAGS} -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -DBIG_JOINS=1 -fPIC"
export CXXFLAGS="${CFLAGS} -felide-constructors -fno-rtti"
export FFLAGS="${SLKCFLAGS}"
export LDFLAGS+=" -pie -Wl,-z,relro,-z,now"

cmake . \
  -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
  -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
  -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
  -DNICE_PROJECT_NAME="MariaDB" \
  -DBUILD_CONFIG=mysql_release \
  -DFEATURE_SET="community" \
  -DINSTALL_LAYOUT=RPM \
  -DRPM=fedora21 \
  -DDAEMON_NAME="${NAME}" \
  -DDAEMON_NAME_COMPAT="mysqld" \
  -DLOG_LOCATION="/var/log/${NAME}/${NAME}.log" \
  -DLOG_LOCATION_COMPAT="/var/log/mysqld.log" \
  -DPID_FILE_DIR="/var/run/${NAME}" \
  -DPID_FILE_DIR_COMPAT="/var/run/mysqld" \
  -DCMAKE_INSTALL_PREFIX="/usr" \
  -DINSTALL_SYSCONFDIR="/etc" \
  -DINSTALL_SYSCONF2DIR="/etc/my.cnf.d" \
  -DINSTALL_INCLUDEDIR=include/mysql \
  -DINSTALL_INFODIR=info \
  -DINSTALL_LIBDIR="lib${LIBDIRSUFFIX}/mysql" \
  -DINSTALL_MANDIR=man \
  -DINSTALL_DOCDIR=doc/${NAME}-${VERSION} \
  -DINSTALL_DOCREADMEDIR=doc/${NAME}-${VERSION} \
  -DINSTALL_MYSQLSHAREDIR=share/mysql \
  -DINSTALL_MYSQLTESTDIR=share/mysql-test \
  -DINSTALL_PLUGINDIR="lib${LIBDIRSUFFIX}/mysql/plugin" \
  -DINSTALL_SBINDIR=libexec \
  -DINSTALL_SCRIPTDIR=bin \
  -DINSTALL_SQLBENCHDIR=share \
  -DINSTALL_SUPPORTFILESDIR=share/mysql \
  -DMYSQL_DATADIR="/var/lib/mysql" \
  -DMYSQL_UNIX_ADDR="/var/lib/mysql/mysql.sock" \
  -DENABLED_LOCAL_INFILE=ON \
  -DENABLE_DTRACE=OFF \
  -DWITH_EMBEDDED_SERVER=ON \
  -DWITH_PCRE=system \
  -DWITH_SSL=system \
  -DWITH_ZLIB=system \
  -DWITH_JEMALLOC=OFF \
  -DWITHOUT_TOKUDB=${TOKUDBOPTS:-ON} \
  -DTMPDIR=/var/tmp \
  -DWITH_MYSQLD_LDFLAGS="-pie -Wl,-z,relro,-z,now" \
  -DMANUFACTURER:STRING="${SLKDIST}" \
  || exit $?

make -j${NJOBS} -k VERBOSE=1 || make VERBOSE=1 || exit $?
make install DESTDIR=${PKG} || exit $?

sed -e 's/-lprobes_mysql//' -e 's/-lmysqlclient_r/-lmysqlclient/' \
  ${PKG}/usr/bin/mysql_config >mysql_config.tmp
cp -f mysql_config.tmp ${PKG}/usr/bin/mysql_config || exit 1
chmod 755 ${PKG}/usr/bin/mysql_config

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqld.a

[ "${SB_RMLA}" = "YES" ] && rm -f ${PKG}/usr/lib*/mysql/*.*a ${PKG}/usr/lib*/*/plugin/*.*a

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

reldir=$(abs2rel /usr/bin /usr/share/mysql-test/lib/My/SafeProcess)

mv ${PKG}/usr/share/mysql-test/lib/My/SafeProcess/my_safe_process ${PKG}/usr/bin/ || exit 1
ln -s ${reldir}/my_safe_process ${PKG}/usr/share/mysql-test/lib/My/SafeProcess/my_safe_process

mkdir -p ${PKG}/var/log/${NAME}
touch ${PKG}/var/log/${NAME}/${NAME}.log.new
chmod 0750 ${PKG}/var/log/${NAME}
ln -sf ${NAME}/${NAME}.log ${PKG}/var/log/mysqld.log

mkdir -p ${PKG}/usr/lib/tmpfiles.d
install -pm0644 scripts/mysql.tmpfiles.d ${PKG}/usr/lib/tmpfiles.d/${NAME}.conf

# Fix funny permissions that cmake build scripts apply to config files
chmod 644 ${PKG}/usr/share/mysql/config.*.ini

rm -f ${PKG}/usr/{COPYING,README}

# Remove files we don't want installed at all
rm -f ${PKG}/usr/INSTALL-BINARY
rm -f ${PKG}/usr/docs/ChangeLog
rm -f ${PKG}/usr/data/mysql/.empty
rm -f ${PKG}/usr/data/test/.empty
rm -f ${PKG}/usr/bin/mysqlaccess.conf
rm -f ${PKG}/usr/share/mysql/binary-configure
rm -f ${PKG}/usr/share/mysql/magic
rm -f ${PKG}/usr/share/mysql/ndb-config-2-node.ini
rm -f ${PKG}/usr/share/mysql/mysql.server
rm -f ${PKG}/usr/share/mysql/mysqld_multi.server
rm -f ${PKG}/usr/man/man1/comp_err.1*
rm -f ${PKG}/usr/man/man1/mysql-stress-test.pl.1*
rm -f ${PKG}/usr/man/man1/mysql-test-run.pl.1*

rm -f ${PKG}/usr/bin/mysql_embedded
rm -f ${PKG}/usr/share/mysql/binary-configure
rm -f ${PKG}/usr/share/mysql/magic
rm -f ${PKG}/usr/share/mysql/ndb-config-2-node.ini
rm -f ${PKG}/usr/share/mysql/mysql.server
rm -f ${PKG}/usr/share/mysql/mysqld_multi.server
rm -f ${PKG}/usr/{,share/}man/man1/mysql-stress-test.pl.1*
rm -f ${PKG}/usr/{,share/}man/man1/mysql-test-run.pl.1*
rm -rf ${PKG}/etc/init.d
rm -f ${PKG}/etc/logrotate.d/mysql
rm -rf ${PKG}/usr/share/mysql/solaris/
rm -rf ${PKG}/usr/info

rmdir -p ${PKG}/usr/docs
rmdir -p ${PKG}/usr/data/*

mkdir -p ${PKG}/etc/ld.so.conf.d
echo "/usr/lib${LIBDIRSUFFIX}/mysql" \
  > ${PKG}/etc/ld.so.conf.d/50-${NAME}-${ARCH}.conf || exit 1

# put logrotate script where it needs to be
mkdir -p ${PKG}/etc/logrotate.d
mv ${PKG}/usr/share/mysql/mysql-log-rotate ${PKG}/etc/logrotate.d/mysqld.new || exit 1
chmod 644 ${PKG}/etc/logrotate.d/mysqld.new

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

unset MARCH
# multilib header hacks
case "${ARCH}" in
  i[3-6]86)  MARCH=i386
             ;;
    s390)    MARCH=s390
             ;;
    x86_64)  MARCH=x86_64
             ;;
esac

if [ -n "${MARCH}" ] ;then
  mv ${PKG}/usr/include/mysql/my_config.h \
    ${PKG}/usr/include/mysql/my_config_${MARCH}.h || exit 1
  zcat ${CWD}/my_config.h.gz \
    > ${PKG}/usr/include/mysql/my_config.h || exit 1

if [ -f ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h ] ;then
  mv ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h \
    ${PKG}/usr/include/mysql/storage/ndb/ndb_types_${MARCH}.h || exit 1
  zcat ${CWD}/ndb_types.h.gz \
    > ${PKG}/usr/include/mysql/storage/ndb/ndb_types.h || exit 1
fi

  case "${MARCH}" in
    s390x|x86_64)
     mv ${PKG}/usr/bin/mysql_config ${PKG}/usr/bin/mysql_config-64 || exit 1
     ;;
    *)
     mv ${PKG}/usr/bin/mysql_config ${PKG}/usr/bin/mysql_config-32 || exit 1
     ;;
  esac

  install -pm 0755 scripts/mysql_config_multilib ${PKG}/usr/bin/mysql_config || exit 1

fi

install -p -m 644 Docs/INFO_SRC ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/ || exit 1
install -p -m 644 Docs/INFO_BIN ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/ || exit 1

# Install support files
mkdir -p ${PKG}/etc
cp support-files/my-{huge,large,medium,small}.cnf ${PKG}/etc/

rm -f ${PKG}/etc/my.cnf
install -pm0644 scripts/my.cnf ${PKG}/etc/my.cnf || exit 1

for file in ${PKG}/etc/my.cnf.d/*.cnf ;do
  mv ${file} ${file}.new
done

# This is the directory where databases are stored
mkdir -p ${PKG}/var/lib/mysql
chmod 0755 ${PKG}/var/lib/mysql

# This is where the socket is stored
mkdir -p ${PKG}/var/run/${NAME}
chmod 0755 ${PKG}/var/run/${NAME}
mkdir -p ${PKG}/var/run/mysql
chmod 0755 ${PKG}/var/run/mysql

[ "${SB_MYSQLBENCH}" = "YES" ] || rm -rf ${PKG}/usr/share/mysql-test
[ "${SB_MYSQLTEST}" = "YES" ] || rm -rf ${PKG}/usr/share/mysql-bench

# Add init script:
mkdir -p ${PKG}/etc/rc.d
# This is intentionally chmod 644.
install -pm0644 scripts/mysql.init ${PKG}/etc/rc.d/rc.mysqld.new || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 scripts/mysql.service ${PKG}/lib/systemd/system/${NAME}.service || exit 1

install -m 755 scripts/mysql-prepare-db-dir ${PKG}/usr/libexec/mysql-prepare-db-dir || exit 1
install -m 755 scripts/mysql-wait-ready ${PKG}/usr/libexec/mysql-wait-ready || exit 1
install -m 755 scripts/mysql-check-socket ${PKG}/usr/libexec/mysql-check-socket || exit 1
install -m 755 scripts/mysql-check-upgrade ${PKG}/usr/libexec/mysql-check-upgrade || exit 1
install -m 644 scripts/mysql-scripts-common ${PKG}/usr/libexec/mysql-scripts-common || exit 1

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqlclient_r.so*
echo "INPUT(-lmysqlclient)" > ${PKG}/usr/lib${LIBDIRSUFFIX}/mysql/libmysqlclient_r.so

# Add a documentation directory:
mkdir -p ${DOCDIR}/Docs
if [ -d ${PKG}/usr/share/doc ] ;then
  mv ${PKG}/usr/share/doc/*/* ${DOCDIR}/
  rm -rf ${PKG}/usr/share/doc
  rmdir -p ${PKG}/usr/share
fi
cp -a \
  COPYING* MIRRORS README* ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
cp -a Docs/{*.{html,txt},Flags} ${DOCDIR}/Docs/
rm -f ${DOCDIR}/Docs/manual.txt
rm -rf ${DOCDIR}/MariaDB-server-*/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME}d -a -r etc/rc.d/rc.${NAME}d.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME}d etc/rc.d/rc.${NAME}d.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ var/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,systemd}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*.h.gz ${CWD}/rc.mysqld ${CWD}/*.1 \
    ${CWD}/mysql_config*.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/systemd/* \
    ${SBDIR}/systemd/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
   [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown mysql.mysql ./var/{lib,run}/mysql ./var/{run,log}/${NAME} ;
   [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown mysql.mysql ./var/log/${NAME}/${NAME}.log.new ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
