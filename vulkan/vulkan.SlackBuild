#!/bin/bash
#-- vulkan for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ vulkan.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# https://github.com/KhronosGroup

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=vulkan
GLSNAME=glslang
GLSNAME2=SPIRV-Tools
GLSNAME3=SPIRV-Headers
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.0.37.0}
GLSVER=${GLSVER:-6a60c2f9ead58eb9040e47e3e2ada01488648901}
GLSVER2=${GLSVER2:-945e9fc4b477ee55d2262249e5d1d886aa6ba679}
GLSVER3=${GLSVER3:-c470b68225a04965bf87d35e143ae92f831e8110}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-${VERSION//-/.}-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=Vulkan-LoaderAndValidationLayers-sdk-${VERSION}
GLSSRCDIR=${GLSNAME}-${GLSVER}
GLSSRCDIR2=${GLSNAME2}-${GLSVER2}
GLSSRCDIR3=${GLSNAME3}-${GLSVER3}
SRCARCHIVE=sdk-${VERSION}.tar.gz
GLSSRCARCHIVE=${GLSVER}.tar.gz
GLSSRCARCHIVE2=${GLSVER2}.tar.gz
GLSSRCARCHIVE3=${GLSVER3}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="https://github.com/KhronosGroup/Vulkan-LoaderAndValidationLayers/archive/${SRCARCHIVE}"
GLSDL_URL="https://github.com/KhronosGroup/${GLSNAME}/archive/${GLSSRCARCHIVE}"
GLSDL_URL2="https://github.com/KhronosGroup/${GLSNAME2}/archive/${GLSSRCARCHIVE2}"
GLSDL_URL3="https://github.com/KhronosGroup/${GLSNAME3}/archive/${GLSSRCARCHIVE3}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
GLSSRCARCHIVE=${GLSSRCDIR}.tar.gz
test -r ${CWD}/${GLSSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${GLSDL_URL} -O ${CWD}/${GLSSRCARCHIVE} || exit 1
GLSSRCARCHIVE2=${GLSSRCDIR2}.tar.gz
test -r ${CWD}/${GLSSRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${GLSDL_URL2} -O ${CWD}/${GLSSRCARCHIVE2} || exit 1
GLSSRCARCHIVE3=${GLSSRCDIR3}.tar.gz
test -r ${CWD}/${GLSSRCARCHIVE3} || ${DL_PROG} ${DL_OPTS} ${GLSDL_URL3} -O ${CWD}/${GLSSRCARCHIVE3} || exit 1

for file in ${GLSSRCARCHIVE} ${GLSSRCARCHIVE2} ${GLSSRCARCHIVE3} ;do
  if ! test -s ${CWD}/${file} ;then
    echo "${CWD}/${file} is empty"
    echo "Delete ${CWD}/${file}, check proper version/commit and try again."
    exit 1
  fi
done

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS+=" ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS+=" -fPIC"
else
  LIBDIRSUFFIX=""
fi

if test ${UID} != 0 && test "$(type -t fakeroot)" != 'file'; then
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i 's/\r//' README.md

# sigh inttypes
sed -i 's/inttypes.h/cinttypes/' layers/*.{cpp,h}

mkdir -p build/ external/glslang/build/install external/spirv-tools/build/ external/spirv-tools/external/spirv-headers
tar -xf ${CWD}/${GLSSRCARCHIVE} -C external/glslang --strip 1 || exit 1
tar -xf ${CWD}/${GLSSRCARCHIVE2} -C external/spirv-tools --strip 1 || exit 1
tar -xf ${CWD}/${GLSSRCARCHIVE3} -C external/spirv-tools/external/spirv-headers --strip 1 || exit 1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export FFLAGS="${SLKCFLAGS}"

( cd external/glslang/build || exit $?

  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    || exit $?

  make -j${NJOBS} || make || exit $?
  make install || exit $?
) || exit $?

( cd external/spirv-tools/build || exit $?

  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    || exit $?

  make -j${NJOBS} || make || exit $?
) || exit $?

( cd build || exit $?

  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_INSTALL_PREFIX:PATH=/usr \
    -DSYSCONF_INSTALL_DIR:PATH=/etc \
    -DINCLUDE_INSTALL_DIR:PATH=/usr/include \
    -DLIB_INSTALL_DIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DSHARE_INSTALL_PREFIX:PATH=/usr/share \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE:STRING=Release \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DCMAKE_SKIP_INSTALL_RPATH:BOOL=ON \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DBUILD_VKJSON:BOOL=OFF \
    -DCMAKE_INSTALL_SYSCONFDIR:PATH=/etc \
    -DBUILD_WSI_MIR_SUPPORT:BOOL=OFF \
    -DBUILD_WSI_WAYLAND_SUPPORT:BOOL=ON \
    || exit $?

  make -j${NJOBS} || make || exit $?
  make install/fast DESTDIR=${PKG} || exit $?

) || exit $?

# remove RPATH
if [ -x /usr/bin/chrpath ] ;then
  chrpath -d ${PKG}/usr/bin/vulkaninfo
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/vulkan/implicit_layer.d
mv ${PKG}/etc/vulkan/explicit_layer.d/ ${PKG}/usr/share/vulkan/ || exit 1

mkdir -p ${PKG}/etc/vulkan/icd.d

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE.txt COPYRIGHT.txt README.md CONTRIBUTING.md ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
else
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
