#!/bin/bash
#-- virtualbox for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ virtualbox.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.virtualbox.org/wiki/VirtualBox

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=VirtualBox
NAME=virtualbox
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.0.10}
DOCVER=${DOCVER:-5.0.10}
RVER=$(echo ${VERSION} | cut -d- -f1)
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  DARCH=amd64
else
  DARCH=x86
fi
BUILD=${BUILD:-1}
SLKDIST=${SLKDIST:-Slackware}
# <= 10 characters
SLKDSHORT=${SLKDSHORT:-Slack}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

if [ $(( $(echo -n ${SLKDSHORT} | wc -c) )) -gt 10 ] ;then
  echo "SLKDSHORT has more than 10 characters. Review it."
  exit 1
fi

# Set to YES to use system kbuild
SB_KBUILD=${SB_KBUILD:-NO}
# Set to YES to enable pam support
SB_PAM=${SB_PAM:-YES}
# Set to YES to enable change strings patch to systemctl commands
SB_SYSTEMD=${SB_SYSTEMD:-YES}
# Set to YES to apply custom bios logo
SB_VBOXLOGO=${SB_VBOXLOGO:-YES}

PYSITEARCH=$(python2 -c 'from distutils import sysconfig; print sysconfig.get_python_lib(1)')
PYSITELIB=$(python2 -c 'from distutils import sysconfig; print sysconfig.get_python_lib()')
PYABI=$(python2 -c 'import sys; sys.stdout.write(sys.version[:3])')
PYVER=$(python2 -c 'import sys; print sys.version.split(" ")[0]')

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOCSDIR=${CWD}/docs/${VERSION}

grep --quiet '^vboxusers:' /etc/group && SB_HGROUP=1

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
DOCSSRCARCHIVE=UserManual.pdf

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.virtualbox.org/${NAME}/${RVER}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || exit 1

mkdir -p ${DOCSDIR}
( cd ${DOCSDIR} || exit 1
  test -r ${DOCSSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${DOCSSRCARCHIVE} || exit 1
) || exit $?

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../qt4.options ] && source ../qt4.options

_qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
_qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
_qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

unset SLKLDFLAGS
[ "${LDFLAGS}" ] && SLKLDFLAGS="${LDFLAGS}"
unset CFLAGS CXXFLAGS CPPFLAGS

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

export JAVA_HOME=${JAVA_HOME:-"/usr/lib${LIBDIRSUFFIX}/java"}

cd ${TMP}
rm -rf ${SRCDIR}
tar xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

[ "${SB_KBUILD}" = "YES" ] && rm -rf kBuild/bin
rm -rf tools
find -name '*.py[co]' -delete

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

export BINUTILS_LD=bfd

rm -rf src/libs/boost-*/
rm -rf src/libs/libxml2-*/
rm -rf src/libs/libpng-*/
rm -rf src/libs/zlib-*/

if [ "${SB_VBOXLOGO}" = "YES" ] ;then
  SB_VBOXLOGO_DIR=${CWD}/vboxlogo
  if [ -r ${SB_VBOXLOGO_DIR}/vboxlogo.bmp.xz ] ;then
    echo "Using ${SB_VBOXLOGO_DIR}/vboxlogo.bmp.xz as custom bios logo."
    xzcat ${SB_VBOXLOGO_DIR}/vboxlogo.bmp.xz \
     > src/VBox/Devices/Graphics/BIOS/ose_logo.bmp || exit 1
  fi
fi

mkdir -p ${PKG}/usr/share/applications
sed \
  -e "s|@VBOX_PRODUCT@|Oracle VM VirtualBox|g" \
  -e "s|@VBOX_DOC_PATH@|/usr/lib${LIBDIRSUFFIX}/${NAME}/UserManual.pdf|g" \
  -e '/^Keywords.*=/s|^|X-|g' \
  -e "/^Icon=/s|=.*$|=${NAME}|g" src/VBox/Installer/common/${NAME}.desktop.in \
 > ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

sed -i -e '/fa_IR/d' \
  src/VBox/Frontends/VirtualBox/nls/ApprovedLanguages.kmk \
  src/VBox/Frontends/VirtualBox/VBoxUI.pro || exit 1
rm -f src/VBox/Frontends/VirtualBox/nls/VirtualBox_fa_IR.ts*

SLKCFLAGSC="$(echo ${SLKCFLAGS} | sed -e 's/-fPIC//g')"

sed \
  -e "s|_SLKCFLAGS_|${SLKCFLAGS}|g" \
  -e "s|_SLKCFLAGSC_|${SLKCFLAGSC}|g" \
  -e "s|_LIBDIR_|lib${LIBDIRSUFFIX}|g" \
  -e "s|_JAVA_HOME_|${JAVA_HOME}|g" \
  ${CWD}/${NAME}-LocalConfig.kmk \
  > LocalConfig.kmk

echo "KBUILD_PATH = ${SB_SROOT}/kBuild" >> LocalConfig.kmk
echo 'TOOL_GCC3_LD = g++' >> LocalConfig.kmk
echo 'TOOL_YASM_AS = yasm' >> LocalConfig.kmk
echo "VBOX_BUILD_PUBLISHER = _${SLKDSHORT}"  >> LocalConfig.kmk

sed -i -e "s|_SLKDIST_|${SLKDSHORT}|g" Config.kmk

if [ "${SB_PAM}" != "YES" ] ;then
  # Gentoo
  sed -i -e 's@^.*VBOX_WITH_PAM@#VBOX_WITH_PAM@' Config.kmk || exit 1
  sed -i -e 's@\(.*/auth/Makefile.kmk.*\)@#\1@' \
    src/VBox/HostServices/Makefile.kmk || exit 1
fi

sed -i \
  -e '/^INCX11=/s|/local/|/|g' \
  -e "/^LIBX11=/s|-L/usr/X11R6/lib -L/usr/X11R6/lib64 -L/usr/local/lib|-L/usr/lib${LIBDIRSUFFIX}|g" \
  configure || exit 1
sed -i -e "s|/usr/lib |/usr/lib${LIBDIRSUFFIX} |g" \
  src/VBox/RDP/client-*/Makefile.kmk || exit 1
# Respect LDFLAGS
sed -i -e "s/_LDFLAGS\.${DARCH}*.*=/& ${LDFLAGS}/g" \
  Config.kmk src/libs/xpcom18a4/Config.kmk || exit 1

# Dirty test for multilib
unset SB_MULTILIBOPTS
if [ "${ARCH}" = "x86_64" ] ;then
  touch multilibtest.c
  gcc -m32 -shared multilibtest.c -o multilibtest 2>/dev/null || SB_MULTILIBOPTS='--disable-vmmraw'
  [ -z "${SB_MULTILIBOPTS}" ] && echo "Multilib gcc detected."
fi

./configure \
  --disable-kmods \
  --disable-docs \
  --enable-vnc \
  --enable-webservice \
  ${SB_MULTILIBOPTS} \
  || exit $?

source ./env.sh || exit $?

kmk -j ${NJOBS} all || exit $?

( cd src/VBox/RDP/client-* || exit 1
  kmk -j ${NJOBS} all || exit $? 
) || exit $?

mkdir -p ${PKG}/usr/bin
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ExtensionPacks
mkdir -p ${PKG}/usr/share/${NAME}/extensions

# Python bindings
cp -a out/linux.${BUILD_PLATFORM_ARCH}/release/bin/sdk/installer sdk-py-installer || exit 1
install -pm0755 src/VBox/Installer/common/vboxapisetup.py sdk-py-installer/ || exit 1
( cd sdk-py-installer || exit 1
  export VBOX_INSTALL_PATH=/usr/lib${LIBDIRSUFFIX}/${NAME}
  python2 vboxapisetup.py build || exit $?
  python2 vboxapisetup.py install -O1 --skip-build --root ${PKG} || exit $?
) || exit $?

( cd out/linux.${BUILD_PLATFORM_ARCH}/release/bin || exit 1

  install -pm0750 VBoxManage VBoxSVC VBoxXPCOMIPCD VBoxTunctl \
    VBoxExtPackHelperApp VBoxBalloonCtrl vboxwebsrv \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit $?

  install -pm0710 VBoxAutostart VBoxHeadless VBoxSDL VirtualBox VBoxNetDHCP VBoxNetAdpCtl VBoxNetNAT \
     ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit $?

  # Libraries/etc
  install -pm0755 *.so \
    VBoxTestOGL vbox-img webtest \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit $?

  install -pm0755 vbox-img \
    ${PKG}/usr/bin/ || exit $?

  install -pm0755 rdesktop-vrdp ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit $?
  install -pm0644 *.fd *.r0 *.rc \
    ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit $?

  ln -sf ../lib${LIBDIRSUFFIX}/${NAME}/VBoxTunctl ${PKG}/usr/bin/VBoxTunctl || exit 1

  # Components
  cp -r components ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit 1
  chmod 0755 ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/components/*.so
  chmod 0644 ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/components/*.xpt

  ln -sf ../VBoxVMM.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/components/VBoxVMM.so || exit 1
  ln -sf ../VBoxREM.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/components/VBoxREM.so || exit 1
  ln -sf ../VBoxRT.so  ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/components/VBoxRT.so || exit 1
  ln -sf ../VBoxDDU.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/components/VBoxDDU.so || exit 1
  ln -sf ../VBoxXPCOM.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/components/VBoxXPCOM.so || exit 1

  ln -sf components/VBoxC.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/VBoxC.so || exit 1
  ln -sf components/VBoxSVCM.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/VBoxSVCM.so || exit 1
  ln -sf components/VBoxXPCOMIPCC.so ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/VBoxXPCOMIPCC.so || exit 1

  # extpack
  cp -a ExtensionPacks/* ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ExtensionPacks/ || exit 1

  # sdk
  cp -r sdk ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit 1

  # nls
  cp -r nls ${PKG}/usr/share/${NAME}/ || exit 1

  cp -r rdesktop-vrdp-keymaps ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/ || exit 1

  cp -r src ${PKG}/usr/share/${NAME}/vbox-kmod-src-${VERSION} || exit $?

) || exit $?

ln -sf rdesktop-vrdp-keymaps ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/keymaps || exit 1

cat > ${PKG}/usr/bin/rdesktop-vrdp <<EOF
#!/bin/sh
cd /usr/lib${LIBDIRSUFFIX}/${NAME}
exec /usr/lib${LIBDIRSUFFIX}/${NAME}/rdesktop-vrdp "\$@"
EOF
chmod 0755 ${PKG}/usr/bin/rdesktop-vrdp || exit 1

install -pm0750 ${CWD}/${NAME}.sh \
  ${PKG}/usr/bin/VBox || exit 1

ln -sf VBox ${PKG}/usr/bin/VirtualBox || exit 1
ln -sf VBox ${PKG}/usr/bin/virtualbox || exit 1
ln -sf VBox ${PKG}/usr/bin/VBoxManage || exit 1
ln -sf VBox ${PKG}/usr/bin/vboxmanage || exit 1
ln -sf VBox ${PKG}/usr/bin/VBoxSDL || exit 1
ln -sf VBox ${PKG}/usr/bin/vboxsdl || exit 1
ln -sf VBox ${PKG}/usr/bin/VBoxHeadless || exit 1
ln -sf VBox ${PKG}/usr/bin/vboxheadless || exit 1
ln -sf VBox ${PKG}/usr/bin/VBoxAutostart || exit 1
ln -sf VBox ${PKG}/usr/bin/vboxautostart || exit 1
ln -sf VBox ${PKG}/usr/bin/VBoxVRDP || exit 1
ln -sf VBox ${PKG}/usr/bin/VBoxBalloonCtrl || exit 1
ln -sf VBox ${PKG}/usr/bin/vboxballoonctrl || exit 1
ln -sf VBox ${PKG}/usr/bin/vboxwebsrv || exit 1

install -pm0750 src/VBox/Frontends/VBoxShell/vboxshell.py \
  ${PKG}/usr/bin/vboxshell || exit 1

install -pm0755 src/VBox/Installer/linux/VBoxSysInfo.sh \
  ${PKG}/usr/share/${NAME}/ || exit 1

mkdir -p ${PKG}/lib/udev
install -pm0750 src/VBox/Installer/linux/VBoxCreateUSBNode.sh \
  ${PKG}/lib/udev/ || exit 1

if [ -x /usr/bin/chrpath ] ;then
  chrpath --delete ${PKG}/usr/bin/vbox-img
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

install -pm0644 ${DOCSDIR}/${DOCSSRCARCHIVE} ${PKG}/usr/share/${NAME}/ || exit 1
if [ -f ${CWD}/${PNAME}.chm ] ;then
  install -pm0644 ${CWD}/${PNAME}.chm ${PKG}/usr/share/${NAME}/ || exit 1
fi

# create virtualbox configurations files
mkdir -p ${PKG}/etc/vbox ${PKG}/var/lib/vbox
cat > ${PKG}/etc/vbox/vbox.cfg.new <<EOF
INSTALL_DIR=/usr/lib${LIBDIRSUFFIX}/${NAME}
EOF

chmod 770 ${PKG}/var/lib/vbox

cat > ${PKG}/etc/vbox/autostart.conf.new <<'EOF'
# Default policy is to deny starting a VM, the other option is "allow".
default_policy = deny

# Bob is allowed to start virtual machines but starting them
# will be delayed for 10 seconds
bob = {
    allow = true
    startup_delay = 10
}

# Alice is not allowed to start virtual machines, useful to exclude certain users
# if the default policy is set to allow.
alice = {
    allow = false
}
EOF

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/virtualbox.new <<'EOF'
#   SHUTDOWN_USERS="foo bar"  
#     check for running VMs of user foo and user bar
#   SHUTDOWN=poweroff
#   SHUTDOWN=acpibutton
#   SHUTDOWN=savestate
#     select one of these shutdown methods for running VMs

#SHUTDOWN_USERS="foo bar"
#SHUTDOWN=savestate

# Autostart
# db dir (uncomment for enable)
#VBOXAUTOSTART_DB=/var/lib/vbox
# config filer (uncomment for enable)
#VBOXAUTOSTART_CONFIG=/etc/vbox/autostart.conf

# Set to YES to load vboxnetflt module
VBOXNETFLT=YES
# Set to YES to load vboxnetadp module
VBOXNETADP=YES
# Set to YES to load vboxpci module
VBOXPCI=YES

EOF

cat > ${PKG}/etc/default/vboxballoonctrl.new <<'EOF'
# User with permissions to run
#VBOXBALLOONCTRL_USER=
# Parameters to pass to service
#VBOXBALLOONCTRL_OPTIONS=
EOF

cat > ${PKG}/etc/default/vboxwebsrv.new <<'EOF'
# Copyright 1999-2008 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /var/cvsroot/gentoo-x86/app-emulation/virtualbox-bin/files/vboxwebsrv-confd,v 1.2 2008/08/10 14:38:45 jokey Exp $

# The host to bind to (defaults to "localhost").
VBOXWEBSRV_HOST="localhost"

# Which port to on the host (defaults to 18083).
VBOXWEBSRV_PORT="18083"

# Session timeout, in seconds. (defaults to 20).
VBOXWEBSRV_TIMEOUT=20

# The interval in which the webservice checks for
# timed-out clients, in seconds. Normally does not
# need to be changed (defaults to 5).
VBOXWEBSRV_INTERVAL=5 
EOF

mkdir -p ${PKG}/lib/udev/rules.d
cat >  ${PKG}/lib/udev/rules.d/10-${NAME}.rules <<EOF
KERNEL=="vboxdrv", NAME="vboxdrv", OWNER="root", GROUP="vboxusers", MODE="0660"
SUBSYSTEM=="usb_device", ACTION=="add", RUN="/lib/udev/VBoxCreateUSBNode.sh \$major \$minor \$attr{bDeviceClass} vboxusers"
SUBSYSTEM=="usb", ACTION=="add", ENV{DEVTYPE}=="usb_device", RUN="/lib/udev/VBoxCreateUSBNode.sh \$major \$minor \$attr{bDeviceClass} vboxusers"
SUBSYSTEM=="usb_device", ACTION=="remove", RUN="/lib/udev/VBoxCreateUSBNode.sh --remove \$major \$minor"
SUBSYSTEM=="usb", ACTION=="remove", ENV{DEVTYPE}=="usb_device", RUN="/lib/udev/VBoxCreateUSBNode.sh --remove \$major \$minor"
EOF

# freedesktop
desktop-file-edit \
  --remove-key="Encoding" \
  --remove-category="Emulator" \
  --remove-category="X-MandrivaLinux-System" \
  --remove-category="Application" \
  --add-category="Qt" \
  ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

for res in 16 20 32 40 48 64 128 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -pm0644 src/VBox/Artwork/OSE/${NAME}-${res}px.png \
    ${dir}/${NAME}.png || exit 1
done

for res in 16 20 24 32 40 48 64 72 96 128 256 512 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/mimetypes
  mkdir -p ${dir}
  for type in hdd ova ovf vbox vbox-extpack vbox vdi vhd vmdk;do
    install -pm0644 src/VBox/Artwork/other/${NAME}-${type}-${res}px.png \
      ${dir}/${NAME}-${type}.png || exit 1
  done
done

mkdir -p ${PKG}/usr/share/mime/packages
install -pm0644 ./src/VBox/Installer/common/${NAME}.xml \
  ${PKG}/usr/share/mime/packages/${NAME}.xml || exit 1

# Startup scripts.
mkdir -p ${PKG}/etc/rc.d
for file in vboxdrv vboxwebsrv vboxballoonctrl vboxautostart ;do
  install -pm0755 ${CWD}/rc.d/rc.${file} \
    ${PKG}/etc/rc.d/rc.${file}.new || exit 1
done

mkdir -p ${PKG}/var/log/setup
install -pm0755 ${CWD}/setup.onlyonce.rcvbox \
 ${PKG}/var/log/setup/setup.onlyonce.rcvbox || exit 1
chmod 0755 ${PKG}/var/log/setup/setup.onlyonce.rcvbox

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/systemd/*.service ${PKG}/lib/systemd/system/ || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING* doc/License-gpl-2.0.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -s ../../share/${NAME}/UserManual.pdf ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir -p ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-required \
  > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^vboxusers:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            vboxusers
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.vbox.new:
if [ -r etc/rc.d/rc.vboxdrv -a -r etc/rc.d/rc.vboxdrv.new ]; then
  chmod --reference=etc/rc.d/rc.vboxdrv etc/rc.d/rc.vboxdrv.new
fi
if [ -r etc/rc.d/rc.vboxwebsrv -a -r etc/rc.d/rc.vboxwebsrv.new ]; then
  chmod --reference=etc/rc.d/rc.vboxwebsrv etc/rc.d/rc.vboxwebsrv.new
fi
if [ -r etc/rc.d/rc.vboxautostart -a -r etc/rc.d/rc.vboxautostart.new ]; then
  chmod --reference=etc/rc.d/rc.vboxautostart etc/rc.d/rc.vboxautostart.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<EOF
for each in VBox vboxshell ; do
  ${CHROOT} /bin/chown root.vboxusers usr/bin/\${each}
  ${CHROOT} /bin/chmod 0750 usr/bin/\${each}
done
for each in VBoxManage VBoxSVC VBoxTunctl VBoxXPCOMIPCD VBoxBalloonCtrl vboxwebsrv VBoxExtPackHelperApp ; do
  ${CHROOT} /bin/chown root.vboxusers /usr/lib${LIBDIRSUFFIX}/virtualbox/\${each}
  ${CHROOT} /bin/chmod 0750 /usr/lib${LIBDIRSUFFIX}/virtualbox/\${each}
done
for each in VBoxAutostart VBoxHeadless VBoxSDL VirtualBox VBoxNetDHCP VBoxNetAdpCtl VBoxNetNAT; do
  ${CHROOT} /bin/chown root.vboxusers /usr/lib${LIBDIRSUFFIX}/virtualbox/\${each}
  ${CHROOT} /bin/chmod 4510 /usr/lib${LIBDIRSUFFIX}/virtualbox/\${each}
done
  ${CHROOT} /bin/chown root.vboxusers /lib/udev/VBoxCreateUSBNode.sh /var/lib/vbox
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,rc.d,systemd,vboxlogo}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}.sh ${CWD}/setup.*.rcvbox \
    ${CWD}/${NAME}-LocalConfig.kmk ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  install -m0644 ${CWD}/rc.d/rc.* \
    ${SBDIR}/rc.d/
  install -m0644 ${CWD}/systemd/*.service \
    ${SBDIR}/systemd/
  install -m0644 ${CWD}/vboxlogo/*.{xz,vboxlogo,sh,png} \
    ${SBDIR}/vboxlogo/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.vboxusers ./usr/bin/{VBox,vboxshell} ./lib/udev/VBoxCreateUSBNode.sh ./var/lib/vbox ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.vboxusers ./usr/lib${LIBDIRSUFFIX}/virtualbox/{VBoxManage,VBoxSVC,VBoxXPCOMIPCD,vboxwebsrv,VBoxHeadless,VBoxSDL,VBoxTunctl,VirtualBox,VBoxExtPackHelperApp,VBoxBalloonCtrl} ;
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chmod 4510 ./usr/lib${LIBDIRSUFFIX}/virtualbox/{VBoxAutostart,VBoxHeadless,VBoxSDL,VirtualBox,VBoxNetDHCP,VBoxNetAdpCtl,VBoxNetNAT} ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
