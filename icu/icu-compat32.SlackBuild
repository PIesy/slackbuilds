#!/bin/sh
#-- icu-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ icu.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://icu-project.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=icu
NAME=icu-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-56.1}
SVER=$(echo ${VERSION} | tr . _)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET32=${SLKTARGET32:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

# Set to YES to build without renaming
SB_RNMG=${SB_RNMG:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}
SRCARCHIVE=${SRCDIR}4c-${SVER}-src.tgz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.icu-project.org/files/${NAME}4c/${VERSION}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

unset SB_RNMGOPTS
if [ "${SB_RNMG}" = "YES" ] ;then
  sed -i \
    -e "s/#define U_DISABLE_RENAMING 0/#define U_DISABLE_RENAMING 1/" \
    source/common/unicode/uconfig.h || exit 1
  SB_RNMGOPTS='--disable-renaming'
fi

sed -i \
  -e '/^# end/d' \
  -e 's|^# Copyright|_# Copyright|g' \
  -e 's|^#||g' \
  -e 's|^_# Copyright|# Copyright|g' \
  -e '/^SHAREDLIBCFLAGS=/aSHAREDLIBCXXFLAGS=-fPIC' \
  -e '/^SHAREDLIBCFLAGS=/aSHAREDLIBCPPFLAGS=-DPIC' \
  source/config/icu.pc.in || exit 1

for variable in CFLAGS CPPFLAGS CXXFLAGS FFLAGS LDFLAGS; do
  sed \
    -e "/^${variable} =.*/s: *@${variable}@\( *$\)\?::" \
    -i source/config/icu.pc.in \
    -i source/config/Makefile.inc.in \
    || exit 1
done

( cd source

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  autoreconf -ivf || exit $?
fi

CFLAGS="${SLKCFLAGS} -fno-strict-aliasing" \
CXXFLAGS="${SLKCFLAGS} -fno-strict-aliasing" \
./configure \
  --prefix=/usr \
  --bindir=/usr/bin \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --with-data-packaging=library \
  ${SB_RNMGOPTS} \
  --disable-samples \
  --with-library-bits=32 \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

sed -i -- "s/-nodefaultlibs -nostdlib//" config/mh-linux
sed -i 's|^LIBS =.*|LIBS = -L../lib -licuuc -lpthread -lm|' i18n/Makefile
sed -i 's|^LIBS =.*|LIBS = -nostdlib -L../lib -licuuc -licui18n -lc|' io/Makefile
sed -i 's|^LIBS =.*|LIBS = -nostdlib -L../lib -licuuc -lc|' layout/Makefile
sed -i 's|^LIBS =.*|LIBS = -nostdlib -L../lib -licuuc -licule -lc|' layoutex/Makefile
sed -i 's|^LIBS =.*|LIBS = -nostdlib -L../../lib -licutu -licuuc -lc|' tools/ctestfw/Makefile
sed -i 's|^LIBS =.*|LIBS = -nostdlib -L../../lib -licui18n -licuuc -lpthread -lc|' tools/toolutil/Makefile

test -f uconfig.h.prepend && sed -e '/^#define __UCONFIG_H__/ r uconfig.h.prepend' -i common/unicode/uconfig.h

make -j${NJOBS} VERBOSE=1 || make VERBOSE=1 || exit $?

) || exit 1

make -C source install DESTDIR=${PKG} || exit 1
cp -pR ./source/tools/ctestfw/libicutest.so* ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1
chmod +x ${PKG}/usr/lib${LIBDIRSUFFIX}/*.so.*
sed -i s/\\\$\(THREADSCFLAGS\)// ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/icu*.pc || exit 1
sed -i s/\\\$\(THREADSCXXFLAGS\)// ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/icu*.pc || exit 1
sed -i s/\\\$\(THREADSCPPFLAGS\)/-D_REENTRANT/ ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/icu*.pc || exit 1

sed -i \
  -e "s|${SLKCFLAGS}|-O2|g" \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/icu*.pc || exit 1

rm -rf ${PKG}/usr/{bin,sbin,doc,include,libexec,man,info,share} ${PKG}/{etc,var}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
