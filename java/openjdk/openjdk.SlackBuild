#!/bin/sh
#-- openjdk for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ openjdk.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Portions adapted from Eric Hameleers SlackBuild and Arch PKGBUILD

# http://openjdk.java.net/
# http://icedtea.classpath.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=icedtea
NAME=openjdk
NAME2=openjdk-jre
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
PKG2=${PKGF}/${NAME2}

VERSION=${VERSION:-8.u111_3.2.0}
JDKUVER="$(echo ${VERSION} | cut -d_ -f1 | cut -d'u' -f2)"
ITVER="$(echo ${VERSION} | cut -d_ -f2)"
if [ "$( echo ${ITVER} | cut -d . -f 3 )" = "0" ] ;then
  LVER="${ITVER:0:3}"
else
  LVER="${ITVER}"
fi

# See icedtea Makefile.am. They must match, else remove them before.
CACAO_VER=900db2220376
JAMVM_VER=ec18fb9e49e62dce16c5094ef1527eed619463aa

if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-$(awk '{print $2}' /etc/slackware-version)}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
DOCDIR2=${PKG2}/usr/doc/${NAME2}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/java/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME2=${NAME2}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to bootstrap build
SB_BOOTSTRAP=${SB_BOOTSTRAP:-NO}
# Set to YES to enable custom ca-certificates cacerts support
SB_CACERTS=${SB_CACERTS:-YES}
# Set to YES to build with debug info
SB_DEBUG=${SB_DEBUG:-NO}
# Set to YES to enable krb support
SB_KRB5=${SB_KRB5:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/sources
VDOWNDIR=${CWD}/sources/${ITVER}

SRCDIR=${PNAME}-${ITVER}
SRCARCHIVE=${SRCDIR}.tar.xz

OPENJDK_SRCARCHIVE=openjdk.tar.xz
CORBA_SRCARCHIVE=corba.tar.xz
JAXP_SRCARCHIVE=jaxp.tar.xz
JAXWS_SRCARCHIVE=jaxws.tar.xz
JDK_SRCARCHIVE=jdk.tar.xz
LANGTOOLS_SRCARCHIVE=langtools.tar.xz
HOTSPOT_SRCARCHIVE=hotspot.tar.xz
NASHORN_SRCARCHIVE=nashorn.tar.xz  
CACAO_SRCARCHIVE=cacao-${CACAO_VER}.tar.xz
JAMVM_SRCARCHIVE=jamvm-${JAMVM_VER}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://icedtea.classpath.org/download/source/${SRCARCHIVE}"
HGDL_URL="http://icedtea.classpath.org/download/drops/icedtea8/${ITVER}"
CPDL_URL="http://icedtea.classpath.org/download/drops"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

mkdir -p ${VDOWNDIR}
( cd ${VDOWNDIR} || exit 1
  test -r ${OPENJDK_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${OPENJDK_SRCARCHIVE} || exit 1
  test -r ${CORBA_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${CORBA_SRCARCHIVE} || exit 1
  test -r ${JAXP_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${JAXP_SRCARCHIVE} || exit 1
  test -r ${JAXWS_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${JAXWS_SRCARCHIVE} || exit 1
  test -r ${JDK_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${JDK_SRCARCHIVE} || exit 1
  test -r ${LANGTOOLS_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${LANGTOOLS_SRCARCHIVE} || exit 1
  test -r ${HOTSPOT_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${HOTSPOT_SRCARCHIVE} || exit 1
  test -r ${NASHORN_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HGDL_URL}/${NASHORN_SRCARCHIVE} || exit 1

  cd ${DOWNDIR} || exit 1
  test -r ${CACAO_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${CPDL_URL}/cacao/${CACAO_SRCARCHIVE} || exit 1
  test -r ${JAMVM_SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${CPDL_URL}/jamvm/${JAMVM_SRCARCHIVE} || exit 1

  EMPTY=0

### Uneeded, remove someday
if false ;then
  for file in ${OPENJDK_SRCARCHIVE} ${CORBA_SRCARCHIVE} ${JAXP_SRCARCHIVE} \
    ${JAXWS_SRCARCHIVE} ${JDK_SRCARCHIVE} ${LANGTOOLS_SRCARCHIVE} \
     ${HOTSPOT_SRCARCHIVE} ${CACAO_SRCARCHIVE}
  do
    if ! test -s ${file} ;then
      echo "${DOWNDIR}/${file} is empty"
      echo
      EMPTY=1
    fi
  done
  if [ "${EMPTY}" -ne 0 ] ;then
    echo "Some file are empty"
    echo "Delete them, check version and try again."
    exit 1
  fi
fi

) || exit $?

UVER="$(tar xOf ${CWD}/${SRCARCHIVE} ${SRCDIR}/Makefile.am 2> /dev/null | grep ^JDK_UPDATE_VERSION | awk '{print $3}')"
if [ "${UVER}" != "${JDKUVER}" ] ;then
  echo "Version mismatch. You have jdk update ${UVER} in ${CWD}/${SRCARCHIVE} instead ${JDKUVER}"
  echo "Fix jdk update in VERSION variable -> 7.u${UVER}_${ITVER}"
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
  LIB_ARCH=amd64
else
  LIBDIRSUFFIX=""
  LIB_ARCH=i386
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKGF}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

SB_SROOT="$(pwd)"

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e "/DIST_ID=/s|=.*$|=\"${SLKDIST} ${SLKVER}, package ${VERSION}-${ARCH}-${BUILD}\"|g" \
  configure || exit 1

unset CLASSPATH
unset JAVA_HOME
unset MAKEFLAGS

export SB_JAVA_HOME=/usr/lib${LIBDIRSUFFIX}/java

export ALT_PARALLEL_COMPILE_JOBS="${NJOBS}"
export HOTSPOT_BUILD_JOBS="${ALT_PARALLEL_COMPILE_JOBS}"
[ "${SB_DEBUG}" = "YES" ] && export STRIP_POLICY=min_strip
export LANG=C
export OS_VARIANT_NAME="${SLKDIST}"
export OS_VARIANT_VERSION="${SLKVER}"

unset SB_CACERTSOPTS SB_DEBUGOPTS SB_KRB5OPTS SB_PAOPTS
if [ "${SB_BOOTSTRAP}" = "YES" ]; then
  # Use gcc's java compiler:
  export JVMDIR=/usr/lib${LIBDIRSUFFIX}/jvm
  export ALT_BOOTDIR=/usr/lib${LIBDIRSUFFIX}/jvm
  export RTJAR=${SB_SROOT}/bootstrap/boot/jre/lib/rt.jar
  ! echo ${PATH} | grep -q jvm/bin && export PATH="/usr/lib${LIBDIRSUFFIX}/jvm/bin${PATH:+:$PATH}"
  SB_BOOTSTRAPOPTS="--enable-bootstrap --with-ecj-jar=/usr/share/java/ecj.jar --with-gcj=/usr/bin/gcj"
else
  # Use a pre-installed OpenJDK:
  export JVMDIR=/usr/lib${LIBDIRSUFFIX}/java
  SB_BOOTSTRAPOPTS="--disable-bootstrap --disable-jamvm"
fi
[ "${SB_CACERTS}" = "YES" ] && SB_CACERTSOPTS='--with-cacerts-file=/etc/pki/java/cacerts'
[ "${SB_DEBUG}" = "YES" ] || SB_DEBUGOPTS='--disable-native-debuginfo --disable-java-debuginfo'
[ "${SB_KRB5}" = "YES" ] || SB_KRB5OPTS='--disable-system-kerberos'

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

./configure \
  --prefix=${SB_JAVA_HOME} \
  --disable-silent-rules \
  --with-pkgversion="${SLKDIST} ${VERSION}-${BUILD}-${ARCH}" \
  --with-parallel-jobs=${HOTSPOT_BUILD_JOBS} \
  --with-corba-src-zip=${VDOWNDIR}/${CORBA_SRCARCHIVE} \
  --with-hotspot-src-zip=${VDOWNDIR}/${HOTSPOT_SRCARCHIVE} \
  --with-jaxp-src-zip=${VDOWNDIR}/${JAXP_SRCARCHIVE} \
  --with-jaxws-src-zip=${VDOWNDIR}/${JAXWS_SRCARCHIVE} \
  --with-jdk-src-zip=${VDOWNDIR}/${JDK_SRCARCHIVE} \
  --with-langtools-src-zip=${VDOWNDIR}/${LANGTOOLS_SRCARCHIVE} \
  --with-nashorn-src-zip==${VDOWNDIR}/${NASHORN_SRCARCHIVE} \
  --with-openjdk-src-zip=${VDOWNDIR}/${OPENJDK_SRCARCHIVE} \
  --with-jdk-home=${JVMDIR} \
  --disable-downloading \
  --disable-Werror \
  --disable-docs \
  --disable-jdk-tests \
  --disable-langtools-tests \
  ${SB_CACERTSOPTS} \
  ${SB_KRB5OPTS} \
  --enable-system-gif \
  --enable-system-jpeg \
  --enable-system-lcms \
  --enable-system-pcsc \
  --enable-system-png \
  --enable-system-sctp \
  --enable-system-zlib \
  --enable-nss \
  --enable-infinality=no \
  ${SB_DEBUGOPTS} \
  ${SB_BOOTSTRAPOPTS} \
  --target=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

sed -i -e "s/-o native-ecj/-lgcj -o native-ecj/" Makefile

make || exit $?

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

##################################### JRE ######################################

# Move the generated jre and sdk images to the respective packages:
mkdir -p ${PKG2}/${SB_JAVA_HOME}/jre
cp -a openjdk.build/j2sdk-image/jre/{bin,lib} ${PKG2}/${SB_JAVA_HOME}/jre/ || exit $?

find ${PKG2} -name 'libjvm.so' -exec strip --strip-debug {} ';'

ln -sf java/jre/lib/${LIB_ARCH}/server/libjvm.so \
  ${PKG2}/usr/lib${LIBDIRSUFFIX}/libjvm.so || exit 1

mkdir -p ${PKG2}/usr/bin

# Link binaries into /usr/bin
reldir=$(abs2rel /${SB_JAVA_HOME}/jre/bin /usr/bin)
( cd ${PKG2}/${SB_JAVA_HOME}/jre/bin
  for file in *; do
    ln -sf ${reldir}/${file} ${PKG2}/usr/bin/ || exit 1
  done
)

# Install man pages
mkdir -p ${PKG2}/usr/man/{,ja/}man1
install -pm644 openjdk.build/j2re-image/man/man1/*.1 ${PKG2}/usr/man/man1/ || exit 1
install -pm644 openjdk.build/j2re-image/man/ja_JP.UTF-8/man1/*.1 ${PKG2}/usr/man/ja/man1/ || exit 1

# Use ca-certificates cacerts
if [ "${SB_CACERTS}" = "YES" ]  ;then
  rm -f ${PKG2}/etc/pki/java/cacerts
  rm -f ${PKG2}/${SB_JAVA_HOME}/jre/lib/security/cacerts
  ln -sf ../../../../../../etc/pki/java/cacerts \
    ${PKG2}/${SB_JAVA_HOME}/jre/lib/security/cacerts || exit 1
fi

( cd ${PKG2}/${SB_JAVA_HOME}/jre/lib || exit 1
  mv fontconfig.Fedora.properties.src fontconfig.properties || exit 1
  mv -f fontconfig.Fedora.bfc fontconfig.bfc || exit 1
  rm -f fontconfig.*.bfc
  rm -f fontconfig.*.properties.src
  rm -f fontconfig.properties.src
) || exit 1

cat > ${PKG2}/${SB_JAVA_HOME}/jre/lib/swing.properties <<EOF
#swing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel
#swing.defaultlaf=javax.swing.plaf.metal.MetalLookAndFeel
#swing.defaultlaf=com.sun.java.swing.plaf.motif.MotifLookAndFeel
#swing.defaultlaf=com.jgoodies.plaf.windows.ExtWindowsLookAndFeel
#swing.defaultlaf=com.jgoodies.plaf.plastic.PlasticLookAndFeel
#swing.defaultlaf=com.jgoodies.plaf.plastic.Plastic3DLookAndFeel
#swing.defaultlaf=com.jgoodies.plaf.plastic.PlasticXPLookAndFeel
EOF

# User-modifiable configuration files go to /etc :
mkdir -p ${PKG2}/etc/java/{cursors,management,security}

reldir=$(abs2rel /etc/java /${SB_JAVA_HOME}/jre/lib/${LIB_ARCH})
mv ${PKG2}/${SB_JAVA_HOME}/jre/lib/${LIB_ARCH}/jvm.cfg ${PKG2}/etc/java/jvm.cfg.new || exit 1
ln -sf ${reldir}/jvm.cfg ${PKG2}/${SB_JAVA_HOME}/jre/lib/${LIB_ARCH}/jvm.cfg

reldir=$(abs2rel /etc/java /${SB_JAVA_HOME}/jre/lib)
for file in \
  {calendars,content-types,flavormap,fontconfig,logging,net}.properties \
  psfont.properties.ja {psfontj2d,sound,swing,tz}.properties ;
  do
  mv ${PKG2}/${SB_JAVA_HOME}/jre/lib/${file} ${PKG2}/etc/java/${file}.new || exit 1
  ln -sf ${reldir}/${file} ${PKG2}/${SB_JAVA_HOME}/jre/lib/${file}
done

install -pm0644 ${PKG2}/${SB_JAVA_HOME}/jre/lib/fontconfig.bfc ${PKG2}/etc/java/ || exit 1

reldir=$(abs2rel /etc/java/cursors /${SB_JAVA_HOME}/jre/lib/images/cursors)
mv ${PKG2}/${SB_JAVA_HOME}/jre/lib/images/cursors/cursors.properties \
  ${PKG2}/etc/java/cursors/cursors.properties.new || exit 1
ln -sf ${reldir}/cursors.properties \
  ${PKG2}/${SB_JAVA_HOME}/jre/lib/images/cursors/cursors.properties

reldir=$(abs2rel /etc/java/management /${SB_JAVA_HOME}/jre/lib/management)
mv ${PKG2}/${SB_JAVA_HOME}/jre/lib/management/jmxremote.password.template \
  ${PKG2}/${SB_JAVA_HOME}/jre/lib/management/jmxremote.password || exit 1
mv ${PKG2}/${SB_JAVA_HOME}/jre/lib/management/snmp.acl.template \
  ${PKG2}/${SB_JAVA_HOME}/jre/lib/management/snmp.acl || exit 1
for file in management.properties jmxremote.access jmxremote.password snmp.acl ;do
  mv ${PKG2}/${SB_JAVA_HOME}/jre/lib/management/${file} ${PKG2}/etc/java/management/${file}.new || exit 1
  ln -sf ${reldir}/${file} ${PKG2}/${SB_JAVA_HOME}/jre/lib/management/${file}
done

reldir=$(abs2rel /etc/java/security /${SB_JAVA_HOME}/jre/lib/security)
for file in java.policy java.security nss.cfg ;do
  mv ${PKG2}/${SB_JAVA_HOME}/jre/lib/security/${file} ${PKG2}/etc/java/security/${file}.new || exit 1
  ln -sf ${reldir}/${file} ${PKG2}/${SB_JAVA_HOME}/jre/lib/security/${file}
done

mkdir -p ${PKG2}/etc/profile.d
cat > ${PKG2}/etc/profile.d/${NAME}.sh.new <<EOF
#!/bin/sh
export JAVA_HOME=${SB_JAVA_HOME}

# Enable this for non-reparenting window managers
#export _JAVA_AWT_WM_NONREPARENTING=1

# Extra settings
#export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
EOF

cat > ${PKG2}/etc/profile.d/${NAME}.csh.new <<EOF
#!/bin/csh
setenv JAVA_HOME ${SB_JAVA_HOME}

# Enable this for non-reparenting window managers
#setenv _JAVA_AWT_WM_NONREPARENTING 1

# Extra settings
#export _JAVA_OPTIONS='-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel'
EOF

chmod 0755 ${PKG2}/etc/profile.d/${NAME}.*sh.new || exit 1

################################## End of JRE ##################################

##################################### JDK ######################################

mkdir -p ${PKG}/${SB_JAVA_HOME}
cp -a openjdk.build/j2sdk-image/{bin,include,lib} ${PKG}/${SB_JAVA_HOME}/ || exit $?

mkdir -p ${PKG}/usr/bin ${PKG}/usr/man/{,ja/}man1

# Link binaries into /usr/bin and man pages
reldir=$(abs2rel /${SB_JAVA_HOME}/bin /usr/bin)
( cd ${PKG}/${SB_JAVA_HOME}/bin
  for file in *; do
    if [ -e ${PKG2}/${SB_JAVA_HOME}/jre/bin/${file} ]; then
      ln -sf ../jre/bin/${file} ${file}
    else
      [ "${file}" == "java-rmi.cgi" ] && continue
      ln -sf ${reldir}/${file} ${PKG}/usr/bin/ || exit 1
      install -pm644 ${SB_SROOT}/openjdk.build/j2sdk-image/man/man1/${file}.1 \
        ${PKG}/usr/man/man1/
      install -pm644 ${SB_SROOT}/openjdk.build/j2sdk-image/man/ja/man1/${file}.1 \
        ${PKG}/usr/man/ja/man1/
    fi
  done
)

chmod 0644 ${PKG}/${SB_JAVA_HOME}/lib/sa-jdi.jar

install -pm0644 openjdk.build/j2sdk-image/src.zip ${PKG}/${SB_JAVA_HOME}/ || exit 1


################################## End of JDK ##################################

mkdir -p ${PKG}/usr/share/applications
mkdir -p ${PKG2}/usr/share/{applications,icons}

SB_DFI(){
desktop-file-install \
  --vendor="icedtea" --mode 0644 \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  --set-icon="java" \
  --remove-category="Monitor" \
  --remove-category="X-Red-Hat-Base" \
  --remove-category="X-Ximian-Settings" $@
}

SB_DFI \
  --set-key="Exec" \
  --set-value="jconsole" \
  jconsole.desktop || exit 1

SB_DFI \
  --set-key="Exec" \
  --set-value="policytool" \
  policytool.desktop || exit 1

mv ${PKG}/usr/share/applications/*policytool.desktop \
  ${PKG2}/usr/share/applications/ || exit 1

for res in 16 24 32 48 ;do
  dir=${PKG2}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -pm0644 openjdk/jdk/src/solaris/classes/sun/awt/X11/java-icon${res}.png \
    ${dir}/java.png || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR} ${DOCDIR2}
cp -a \
  AUTHORS COPYING README NEWS ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog

cp -a \
  ${CWD}/ChangeLog.SB ${DOCDIR2}/
for file in ASSEMBLY_EXCEPTION LICENSE THIRD_PARTY_README ;do
  cp -a openjdk.build/j2sdk-image/jre/${file} ${DOCDIR2}/
  ln -s ../${NAME2}-${VERSION}/${file} ${DOCDIR}/
done
find ${PKG}/usr/doc/ -type d -print0 | xargs -0 chmod 0755
find ${PKG}/usr/doc/ -type f -print0 | xargs -0 chmod 0644
find ${PKG}/usr/doc/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
for mandir in ${PKG}/usr ${PKG2}/usr ;do

  if [ -d ${mandir}/share/man ]; then
    mv ${mandir}/share/man ${mandir}/man
    rmdir ${mandir}/share
  fi
  if [ -d ${mandir}/man ]; then
    ( cd ${mandir}/man
      for manpagedir in $(find . -type d -name "man*") ; do
        ( cd ${manpagedir}
          for eachpage in $( find . -type l -maxdepth 1) ; do
            ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
            rm -f ${eachpage}
          done
          gzip -9 *.?
          # Prevent errors
          rm -f *.gz.gz
        )
      done
    )
  fi
done

mkdir -p ${PKG}/install ${PKG2}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat ${CWD}/slack-desc.jre > ${PKG2}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-desc.jre \
  > ${PKG2}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
EOF

cat > ${PKG2}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/hicolor > /dev/null 2>&1 || :
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on ${NAME}.sh.new:
if [ -r etc/profile.d/${NAME}.sh -a -r etc/profile.d/${NAME}.sh.new ]; then
  chmod --reference=etc/profile.d/${NAME}.sh etc/profile.d/${NAME}.sh.new
fi
if [ -r etc/profile.d/${NAME}.csh -a -r etc/profile.d/${NAME}.csh.new ]; then
  chmod --reference=etc/profile.d/${NAME}.csh etc/profile.d/${NAME}.csh.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG2}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG2}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG2}/install/doinst.sh
  echo >> ${PKG2}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc ${PKG2}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc* ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${ROOTCOMMANDS2}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
