#!/bin/sh
#-- spideroakone for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ spideroakone.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# https://spideroak.com/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=SpiderOakONE
NAME=spideroakone
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-6.0.1}
# x86 or x86_64
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  PARCH=amd64
else
  ARCH=x86
  PARCH=i386
fi
SLKTARGET=${SLKTARGET:-x86_64}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set what package type to download. deb or rpm.
SB_PACK=${SB_PACK:-deb}

# Do no blame SpiderOak devs if setting YES in these
# Set to YES to use system libs
# curl
SB_CURL=${SB_CURL:-YES}
# libdbusmenu-qt
SB_DBUSMENU_QT=${SB_DBUSMENU_QT:-YES}
# python
SB_PY=${SB_PY:-YES}
# python-pillow
SB_PIL=${SB_PIL:-YES}
# pyopenssl
SB_PYOSSL=${SB_PYOSSL:-NO}
# Set to YES if to use system Qt and PyQt
SB_QT=${SB_QT:-YES}

PYSITEARCH=$(python2 -c 'from distutils import sysconfig; print sysconfig.get_python_lib(1)')
PYSITELIB=$(python2 -c 'from distutils import sysconfig; print sysconfig.get_python_lib()')
PYABI=$(python2 -c 'import sys; print (sys.version[:3])')
PYVER=$(python2 -c 'import sys; print sys.version.split(" ")[0]')

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
if [ "${SB_PACK}" = "deb" ] ;then
  SRCARCHIVE=${NAME}_${VERSION}_${PARCH}.deb
  DISTRO=ubuntu
else
  SRCARCHIVE=${PNAME}-${VERSION}-1.${ARCH}.rpm
  DISTRO=fedora
fi

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="https://spideroak.com/getbuild?platform=${DISTRO}&arch=${ARCH}&version=${VERSION}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, and try again."
  exit 1
fi

if [ "${SB_PACK}" = "deb" ] ;then
  RVER="$(ar p ${CWD}/${SRCARCHIVE} control.tar.gz 2> /dev/null | tar zxO ./control 2> /dev/null | grep ^Version | awk '{print $2}' | cut -d- -f1 | cut -d\: -f2)"

elif [ "${SB_PACK}" = "rpm" ] ;then
  RVER="$(rpm -qp --qf %{version} ${CWD}/${SRCARCHIVE} 2> /dev/null)"
fi
if [ "${RVER}" != "${VERSION}" ] ;then
  echo "Version mismatch"
  echo "You have ${RVER} in ${CWD}/${SRCARCHIVE} instead ${VERSION} "
  echo "Edit VERSION variable and try again"
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir ${SRCDIR}
cd ${SRCDIR} || exit 1
if [ "${SB_PACK}" = "deb" ] ;then
  ar p ${CWD}/${SRCARCHIVE} data.tar.gz | tar xvz || exit 1
else
  ( set -o pipefail ; rpm2cpio ${CWD}/${SRCARCHIVE} | cpio -imdv --no-absolute-filenames ) || exit $?
fi

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

mv usr/share/pixmaps/${PNAME}.png usr/share/pixmaps/${NAME}.png
mv usr/share/applications/${PNAME}.desktop usr/share/applications/${NAME}.desktop 2>/dev/null

sed -i -e "s|/opt/${PNAME}/lib|/usr/lib${LIBDIRSUFFIX}/${PNAME}|g" usr/bin/${PNAME} || exit 1

mkdir -p ${PKG}/usr/bin
install -pm0755 usr/bin/${PNAME} ${PKG}/usr/bin/ || exit 1

PROGDIR=/usr/lib${LIBDIRSUFFIX}/${PNAME}
mkdir -p ${PKG}/${PROGDIR}

mv opt/${PNAME}/lib/* ${PKG}/${PROGDIR}/ || exit 1

rm -f ${PKG}/${PROGDIR}/lib{gcc_s,stdc++,z}.so.*
rm -f ${PKG}/${PROGDIR}/libgssapi_krb5.so.*
rm -f ${PKG}/${PROGDIR}/libsepol.so.*
rm -f ${PKG}/${PROGDIR}/*/*/*.exe

( cd ${PKG}/${PROGDIR}
  # https://bugs.gentoo.org/show_bug.cgi?id=400979
  for x in $(find) ; do
    # Use \x7fELF header to separate ELF executables and libraries
    [[ -f ${x} && $(od -t x1 -N 4 "${x}") == *"7f 45 4c 46"* ]] || continue
    patchelf --set-rpath '$ORIGIN' "${x}" || exit 1
  done
) || exit $?

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

missing(){
  if ! [ -e "$1" ] ;then
    echo "File $1 is missing!"
    exit 5
  fi
}

xtcsoname(){
  objdump -p "${1}" | grep SONAME | awk '{print $2}'
}

# curl
if [ "${SB_CURL}" = "YES" ] ;then
  reldir=$(abs2rel ${PYSITELIB} ${PROGDIR})
  missing ${PYSITELIB}/pycurl.so
  rm -f ${PKG}/${PROGDIR}/pycurl.so
  ln -sf ${reldir}/pycurl.so ${PKG}/${PROGDIR}/pycurl.so
  rm -fv ${PKG}/${PROGDIR}/libcurl.so.*
  rm -fv ${PKG}/${PROGDIR}/libssh2.so.*
fi

if [ "${SB_DBUSMENU_QT}" = "YES" ] ;then
  ( cd ${PKG}/${PROGDIR} || exit 1
    for file in libdbusmenu-qt*.so* ;do
      SONAME=$(xtcsoname ${file})
      missing /usr/lib${LIBDIRSUFFIX}/${SONAME}
      rm -fv ${file}
    done
  ) || exit $?
fi

# python
if [ "${SB_PY}" = "YES" ] ;then
  reldir=$(abs2rel /usr/lib${LIBDIRSUFFIX}/python${PYABI}/lib-dynload ${PROGDIR})
  for file in \
    _bisect _codecs_cn _codecs_hk _codecs_iso2022 _codecs_jp _codecs_kr _codecs_tw \
    _collections _ctypes _csv _functools _hashlib _heapq _hotshot _io _json _locale \
    _lsprof _multibytecodec _random _socket _sqlite3 _ssl _struct array binascii \
    bz2 cPickle cStringIO datetime fcntl grp itertools math mmap operator parser \
    pyexpat resource select strop termios time unicodedata zlib
    do
    missing /usr/lib${LIBDIRSUFFIX}/python${PYABI}/lib-dynload/${file}.so
    rm -fv ${PKG}/${PROGDIR}/${file}.so
    ln -sf ${reldir}/${file}.so ${PKG}/${PROGDIR}/${file}.so
    rm -fv ${PKG}/${PROGDIR}/py
    rm -fv ${PKG}/${PROGDIR}/libexpat.so.*
    rm -fv ${PKG}/${PROGDIR}/libsqlite3.so.*
  done
fi

if [ "${SB_PIL}" = "YES" ] ;then
  reldir=$(abs2rel ${PYSITELIB}/PIL ${PROGDIR})
  missing ${PYSITELIB}/PIL/_imaging.so
  rm -fv ${PKG}/${PROGDIR}/PIL._imaging.so
  ln -sf ${reldir}/_imaging.so ${PKG}/${PROGDIR}/PIL._imaging.so
fi

if [ "${SB_PYOSSL}" = "YES" ] ;then
  reldir=$(abs2rel ${PYSITELIB}/OpenSSL ${PROGDIR})
  for file in crypto rand SSL ;do
    missing ${PYSITELIB}/OpenSSL/${file}.so
    rm -fv ${PKG}/${PROGDIR}/OpenSSL.${file}.so
    ln -sf ${reldir}/${file}.so ${PKG}/${PROGDIR}/OpenSSL.${file}.so
  done
  SB_OSSL=YES
else
  SSLLIB="$(objdump -p "${PKG}/${PROGDIR}/OpenSSL.SSL.so" | grep NEEDED | fgrep libssl.so | awk '{print $2}')"
  SYSSSLLIB="$(ls /usr/lib${LIBDIRSUFFIX}/libssl.so.*.*)"
  [ "/usr/lib${LIBDIRSUFFIX}/${SSLLIB}" = "${SYSSSLLIB}" ] && SB_OSSL=YES
fi

if [ "${SB_QT}" = "YES" ] ;then
  reldir=$(abs2rel ${PYSITELIB} ${PROGDIR})

  missing ${PYSITELIB}/sip.so
  rm -f ${PKG}/${PROGDIR}/sip.so
  ln -sf ${reldir}/sip.so ${PKG}/${PROGDIR}/sip.so

  for file in Qt QtCore QtGui QtNetwork ;do
    missing ${PYSITELIB}/PyQt4/${file}.so
    rm -fv ${PKG}/${PROGDIR}/PyQt4.${file}.so
    ln -sf ${reldir}/PyQt4/${file}.so ${PKG}/${PROGDIR}/PyQt4.${file}.so
  done
  rm -fv ${PKG}/${PROGDIR}/lib{Qt,png12}*.so.*
  rm -rfv ${PKG}/${PROGDIR}/plugins
fi

if [ "${SB_CURL}" = "YES" ] && [ "${SB_PY}" = "YES" ] && [ "${SB_OSSL}" = "YES" ] ;then
  rm -fv ${PKG}/${PROGDIR}/lib{crypto,ssl}.so.*
fi

mkdir -p ${PKG}/usr/lib/sysctl.d
cat > ${PKG}/usr/lib/sysctl.d/30-spideroak.conf <<'EOF'
fs.inotify.max_user_watches = 65536
EOF

mkdir -p ${PKG}/usr/man/man1
zcat usr/share/man/man1/${PNAME}.1.gz > ${PKG}/usr/man/man1/${PNAME}.1 || exit 1

mkdir -p ${PKG}/usr/share/applications
desktop-file-install \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  --remove-category="SpiderOak" \
  --remove-category="Archiving" \
  --remove-category="Utility" \
  --add-category="Qt" \
  --set-icon="${NAME}" \
  --set-key="Exec" \
  --set-value="${PNAME}" \
  usr/share/applications/${NAME}.desktop || exit 1

mkdir -p ${PKG}/usr/share/pixmaps
install -pm0644 usr/share/pixmaps/${NAME}.png \
  ${PKG}/usr/share/pixmaps/ || exit 1

for res in 16 22 24 32 48 64 42 96 128 192 256 512 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  convert usr/share/pixmaps/${NAME}.png -filter Lanczos -resize ${res}x${res}  \
    ${dir}/${NAME}.png || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  usr/share/doc/${NAME}/copyright ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r usr/share/doc/${NAME}/changelog.gz ] \
  && zcat usr/share/doc/${NAME}/changelog.gz | head -n 1000 > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/hicolor > /dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
