#!/bin/sh
#-- nessus-core for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ nessus-core.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2013 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.nessus.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=nessus-core
NAME=nessus
NAME2=nessus-server
PKGF=${PKGF:-${TMP}/package-${PNAME}}
PKG=${PKG:-${PKGF}/${NAME}}
PKG2=${PKG2:-${PKGF}/${NAME2}}

VERSION=${VERSION:-2.2.11}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/nessus/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGNAME2=${NAME2}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}
SRCARCHIVE=${SRCDIR}-${VERSION}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
#DL_URL="ftp://ftp.nessus.org/pub/nessus/nessus-${VERSION}/src/${SRCARCHIVE}"
DL_URL="http://www.nessus.org/download/index.php"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG} ${PKG2}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"

./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --libdir=/var/lib \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --enable-syslog \
  --enable-tcpwrappers \
  --enable-save-sessions \
  --enable-save-kb \
  --disable-gtk \
  --disable-static \
  --without-x \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make || exit 1
mv -f nessus/nessus nessus-text || exit 1
make distclean

./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --libdir=/var/lib \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --enable-syslog \
  --enable-tcpwrappers \
  --enable-save-sessions \
  --enable-save-kb \
  --enable-gtk \
  --disable-static \
  --with-x \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make || exit 1
make install DESTDIR=${PKG} || exit 1

install -p -m 0755 nessus-text ${PKG}/usr/bin/nessus-text || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mv ${PKG}/etc ${PKG2}/etc || exit 1

mkdir -p ${PKG2}/usr/bin
mv ${PKG}/usr/bin/nessus-fetch ${PKG2}/usr/bin/nessus-fetch || exit 1
mv ${PKG}/usr/sbin ${PKG2}/usr/sbin || exit 1

mkdir -m 0755 -p ${PKG2}/etc/pki/nessus/{private,}/CA
chmod 0700 ${PKG2}/etc/pki/nessus/private/CA
touch ${PKG2}/etc/pki/nessus/private/CA/{cakey,serverkey}.pem.new
chmod 0600 ${PKG2}/etc/pki/nessus/private/CA/{cakey,serverkey}.pem.new
touch ${PKG2}/etc/pki/nessus/private/CA/{cacert,servercert}.pem.new
chmod 0644 ${PKG2}/etc/pki/nessus/private/CA/{cacert,servercert}.pem.new

mv ${PKG}/var ${PKG2}/
chmod 0750 ${PKG2}/var/lib/nessus

# install services file
install -p -m 644 nessus-services \
                  ${PKG2}/var/lib/nessus/nessus-services || exit 1

mkdir -p ${PKG2}/var/lib/nessus/plugins

mkdir -p ${PKG2}/etc/nessus
zcat ${CWD}/nessusd.conf.new.gz \
  > ${PKG2}/etc/nessus/nessusd.conf.new || exit 1
zcat ${CWD}/nessusd.rules.new.gz \
  > ${PKG2}/etc/nessus/nessusd.rules.new || exit 1
zcat ${CWD}/nessusd.users.new.gz \
  > ${PKG2}/etc/nessus/nessusd.users.new || exit 1
chmod 0600 ${PKG2}/etc/nessus/*.new

mkdir -p ${PKG2}/etc/logrotate.d
cat > ${PKG2}/etc/logrotate.d/nessusd <<'EOF'
/var/log/nessus/nessusd.messages {
  missingok
  notifempty
  create 0600 root root
  postrotate
      /bin/systemctl try-restart nessusd.service > /dev/null 2>/dev/null || test -x /etc/rc.d/rc.nessusd && /etc/rc.d/rc.nessusd condrestart >/dev/null 2>/dev/null || :
  endscript
}
EOF

mkdir -p ${PKG2}/etc/default
cat > ${PKG2}/etc/default/nessusd.new <<'EOF'
#
# nessus service options
#
#OPTIONS=""
EOF

mkdir -p ${PKG2}/etc/rc.d
install -pm0644 ${CWD}/rc.nessusd \
  ${PKG2}/etc/rc.d/rc.nessusd.new || exit 1

mkdir -p ${PKG2}/var/log/setup
zcat ${CWD}/setup.onlyonce.rcnessusd.gz \
  > ${PKG2}/var/log/setup/setup.onlyonce.rcnessusd || exit 1
chmod 0755 ${PKG2}/var/log/setup/setup.onlyonce.rcnessusd || exit 1

mkdir -p ${PKG2}/lib/systemd/system
install -pm0644 ${CWD}/nessusd.service ${PKG2}/lib/systemd/system/ || exit 1


mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Name=Nessus
GenericName=Security scanner
Comment=Nessus client
Exec=${NAME}
Icon=${NAME}
StartupNotify=true
Terminal=false
Type=Application
Categories=GTK;System;Security;
EOF

mkdir -p ${PKG}/usr/share/icons/hicolor/48x48/apps
zcat ${CWD}/${NAME}.png.gz \
  > ${PKG}/usr/share/icons/hicolor/48x48/apps/${NAME}.png

( cd ${PKG}/usr/share/icons/hicolor
  for size in 16x16 32x32 ;do
    dir=${size}/apps
    mkdir -p ${dir}
    convert 48x48/apps/${NAME}.png -filter Lanczos \
            -resize ${size} ${dir}/${NAME}.png
  done
)

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  TODO CHANGES README_SSL doc/*txt doc/WARNING.* nessus/COPYING \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
zcat ${CWD}/faq.html.gz > ${DOCDIR}/faq.html
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi
mkdir -p ${PKG2}/usr/man/man1
mv ${PKG}/usr/man/man1/nessus-fetch.1* ${PKG2}/usr/man/man1/
mv ${PKG}/usr/man/man8 ${PKG2}/usr/man/

mkdir -p ${PKG}/install ${PKG2}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required
cat ${CWD}/slack-desc.server > ${PKG2}/install/slack-desc
cat ${CWD}/slack-required.server > ${PKG2}/install/slack-required

cat > ${PKG2}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
 	CHROOT="chroot \${ROOTDIR} "
 	ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.nessusd.new:
if [ -r etc/rc.d/rc.nessusd -a -r etc/rc.d/rc.nessusd.new ]; then
  chmod --reference=etc/rc.d/rc.nessusd etc/rc.d/rc.nessusd.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG2}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG2}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG2}/install/doinst.sh
  echo >> ${PKG2}/install/doinst.sh
)

cat >> ${PKG2}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${PKG2}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/setup.*.gz ${CWD}/rc.* ${CWD}/nessusd.service \
    ${CWD}/${NAME}.png.gz ${CWD}/faq.html.gz ${CWD}/nessusd.*.new.gz \
    ${CWD}/${FEDORADIST} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${ROOTCOMMANDS2}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
  /bin/su -c "${ROOTCOMMANDS2}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
