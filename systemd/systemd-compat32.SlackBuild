#!/bin/sh
#-- systemd-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ systemd-compat32.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.freedesktop.org/wiki/Software/systemd

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=systemd
NAME=systemd-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-232}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET32=${SLKTARGET32:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

# Set to YES to enable pam support
SB_PAM=${SB_PAM:-YES}
# Set ntp pool
SB_NTPPOOL=${SB_NTPPOOL:-south-america}
SB_NTPPOOLLST=({0..3}.${SB_NTPPOOL}.pool.ntp.org)
# Set YES to enable QR support (qrencode)
SB_QR=${SB_QR:-NO}

if [ -d /etc/pki/tls ] ;then
  SB_CABDIR=/etc/pki/tls
else
  SB_CABDIR=/etc/ssl
fi

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/patches/backports

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=v${VERSION}.tar.gz
PSRCARCHIVES=${PNAME}-backports.lst

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="https://github.com/${PNAME}/${PNAME}/archive/${SRCARCHIVE}"

SRCARCHIVE=${SRCDIR}.tar.gz
# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} -O ${CWD}/${SRCARCHIVE} || exit 1

mkdir -p ${DOWNDIR}
( cd ${DOWNDIR} || exit 1
  [ -f ${CWD}/${PSRCARCHIVES} ] || exit 0
  cat ${CWD}/${PSRCARCHIVES} | while IFS= read -r source ;do
    commit="$(echo "${source}" | awk '{print $1}')"
    test -r ${commit}.patch || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${commit}.patch || exit 1
  done
) || exit $?

if ! test -s ${CWD}/${SRCARCHIVE} ;then
  echo "${CWD}/${SRCARCHIVE} is empty"
  echo "Delete ${CWD}/${SRCARCHIVE}, check VERSION and try again."
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS+=" ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

find src/ -name '*-name.gperf' -print -delete
find src/ \( -name '*-to-name.h' -o -name '*-from-name.h' \) -print -delete

sed -i -e '/^exec_prefix=/s|=.*$|=/|g' \
  src/libudev/libudev.pc.in || exit 1

if [ ! -r configure ] || [ "${SB_AUTOGEN}" = "YES" ] ;then
  sh autogen.sh || exit $?
fi

sed -i -e 's|/etc/hostname|/etc/HOSTNAME|g' \
  src/hostname/hostnamed.c src/core/hostname-setup.c src/firstboot/firstboot.c || exit 1

sed -i -e 's|cpp |cpp -m32 |g' Makefile.in || exit 1c

unset SB_PAMOPTS SB_QROPTS
[ "${SB_PAM}" = "YES" ] || SB_PAMOPTS='--disable-pam'
[ "${SB_QR}" = "YES" ] || SB_QROPTS='--disable-qrencode'

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
CPPFLAGS+=" $(pkg-config --cflags-only-I liblz4)" \
AR_FLAGS='cru --target elf32-i386' \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --libexecdir=/lib \
  --with-rootprefix= \
  --with-rootlibdir=/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-dependency-tracking \
  --enable-split-usr \
  --enable-lz4 \
  ${SB_PAMOPTS} \
  --disable-audit \
  --disable-tcpwrap \
  --disable-selinux \
  --disable-libcryptsetup \
  --disable-microhttpd \
  --disable-binfmt \
  --disable-vconsole \
  --disable-machined \
  --disable-bootchart \
  --disable-quotacheck \
  --disable-firstboot \
  --disable-randomseed \
  --disable-backlight \
  --disable-importd \
  --disable-hostnamed \
  --disable-networkd \
  --disable-timedated \
  --disable-timesyncd \
  --disable-localed \
  --disable-coredump \
  --disable-efi \
  --disable-introspection \
  --disable-manpages \
  --disable-gtk-doc-html \
  --without-python \
  --with-default-dnssec=no \
  --without-kill-user-processes \
  --with-sysvinit-path="" \
  --with-sysvrcnd-path="" \
  --with-rc-local-script-path-start=/etc/rc.d/rc.local \
  --with-rc-local-script-path-stop=/etc/rc.d/rc.local_shutdown \
  --with-certificate-root=${SB_CABDIR} \
  --with-ntp-servers="${SB_NTPPOOLLST[*]}" \
  ${SB_QROPTS} \
  --build=${SLKTARGET32}-${SLKDTARGET}-linux || exit $?

export GCC_COLORS=""

make -j${NJOBS} || make || exit $?
make install DESTDIR=${PKG} \
  pkgconfigdatadir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
  sharepkgconfigdir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
  || exit $?

[ "${SB_RMLA}" = "YES" ] && find ${PKG} -name '*.la' -exec rm {} ';'

rmdir -p ${PKG}/lib${LIBDIRSUFFIX}/security
rmdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/security

rm -rf ${PKG}/usr/{bin,sbin,doc,include,libexec,man,info,share} ${PKG}/{etc,var,bin,lib/{udev,firmware,systemd},sbin,bin}
rm -rf ${PKG}/usr/lib/ConsoleKit ${PKG}/usr/lib/{*.d,kernel,rpm,systemd}/
rmdir -p ${PKG}/lib ${PKG}/usr/lib

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
