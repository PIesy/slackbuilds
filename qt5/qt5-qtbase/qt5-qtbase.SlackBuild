#!/bin/sh
#-- qt5-qtbase for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ qt5-qtbase.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://qt-project.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=qtbase
NAME=qt5-qtbase
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.5.1}
RVER=$(echo ${VERSION} | cut -d- -f1)
SVER=$(echo ${RVER} | cut -d. -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/qt5/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable precompiled headers
SB_PCH=${SB_PCH:-NO}
# Set to YES to build demo and examples
SB_DEMOS=${SB_DEMOS:-NO}
# Set to YES to enable postgresql plugin
SB_PGSQL=${SB_PGSQL:-YES}
# Set to YES to enable systemd journald support
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-opensource-src-${RVER}
SRCARCHIVE=${PNAME}-opensource-src-${VERSION}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.qt-project.org/official_releases/qt/${SVER}/${VERSION}/submodules/${SRCARCHIVE}"
DL_URLB="http://download.qt-project.org/snapshots/qt/${SVER}/${VERSION//RC/rc}/submodules/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

unset CFLAGS CXXFLAGS CPPFLAGS

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

# Set the config option variables if they are not already set:
[ -r ../qt5.options ] && source ../qt5.options

# these should match contents of qt5.macros:
_qt5_prefix=${_qt5_prefix:-/usr/lib${LIBDIRSUFFIX}/qt5}
_qt5_archdatadir=${_qt5_archdatadir:-/usr/lib${LIBDIRSUFFIX}/qt5}
_qt5_bindir=${_qt5_bindir:-${_qt5_prefix}/bin}
_qt5_datadir=${_qt5_datadir:-/usr/share/qt5}
_qt5_docdir=${_qt5_docdir:-/usr/doc/qt5}
_qt5_examplesdir=${_qt5_examplesdir:-${_qt5_prefix}/examples}
_qt5_headerdir=${_qt5_headerdir:-/usr/include/qt5}
_qt5_importdir=${_qt5_importdir:-${_qt5_archdatadir}/imports}
_qt5_libdir=${_qt5_libdir:-/usr/lib${LIBDIRSUFFIX}}
_qt5_libexecdir=${_qt5_libexecdir:-${_qt5_archdatadir}/libexec}
_qt5_plugindir=${_qt5_plugindir:-${_qt5_archdatadir}/plugins}
_qt5_settingsdir=${_qt5_settingsdir:-/etc/xdg}
_qt5_sysconfdir=${_qt5_sysconfdir:-${_qt5_settingsdir}}
_qt5_translationdir=${_qt5_translationdir:-/usr/share/qt5/translations}

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# drop -fexceptions from $SLKCFLAGS
SLKCFLAGS="$(echo ${SLKCFLAGS} | sed 's|-fexceptions||g')"

## customize our platform
if [ "lib${LIBDIRSUFFIX}" == "lib64" ] ;then
  platform=linux-g++-64
else
  platform=linux-g++
fi

sed -i \
  -e "s|-O2|${SLKCFLAGS}|g" \
  -e '/^QMAKE_LIBDIR_X11/d' \
  -e '/^QMAKE_LIBDIR_OPENGL/d' \
  mkspecs/linux-g++{,-32,-64}/qmake.conf || exit 1

sed -i \
  -e "s|-O2|${SLKCFLAGS}|g" \
  -e "s|-O3|${SLKCFLAGS}|g" \
  mkspecs/common/qcc-base.conf || exit 1
  
if [ "${_qt4_libdir}" == "/usr/lib${LIBDIRSUFFIX}" ] ;then
  sed -i \
    -e "s,QMAKE_LIBDIR_X11.*,QMAKE_LIBDIR_X11\t=," \
    -e "s,QMAKE_INCDIR_X11.*,QMAKE_INCDIR_X11\t=," \
    -e "s,QMAKE_INCDIR_OPENGL.*,QMAKE_INCDIR_OPENGL\t=," \
    -e "s,QMAKE_LIBDIR_OPENGL.*,QMAKE_LIBDIR_OPENGL\t=," \
    mkspecs/common/linux.conf
fi

sed -i -e 's|libsystemd-journal|libsystemd|g' \
  config.tests/unix/journald/journald.pro src/corelib/global/global.pri || exit 1

unset SLKLDFLAGS
if [ "${LDFLAGS}" ] ;then
  SLKLDFLAGS="${LDFLAGS}"
  sed -i -e "s|^\(QMAKE_LFLAGS_RELEASE.*\)|\1 ${SLKLDFLAGS}|" \
    mkspecs/common/g++-unix.conf || exit 1
fi
unset LDFLAGS

# move some bundled libs to ensure they're not accidentally used
( cd src/3rdparty
  mkdir UNUSED
  mv freetype libjpeg libpng sqlite xcb xkbcommon zlib UNUSED/
) || exit $?

unset SB_DEMOSOPTS SB_PCHOPTS SB_PGSQLOPTS SB_SYSTEMDOPTS
if [ "${SB_DEMOS}" != "YES" ] ; then
  sed -i '/^CFG_NOBUILD_PARTS=/s|"$| demos examples"|g' \
    configure || exit 1
  SB_DEMOSOPTS="-nomake demos -nomake examples"
fi
[ "${SB_PCH}" == "YES" ] || SB_PCHOPTS="-no-pch"
[ "${SB_PGSQL}" = "YES" ] && SB_PGSQLOPTS="-plugin-sql-psql"
[ "${SB_SYSTEMD}" = "YES" ] && SB_SYSTEMDOPTS='-journald'

./configure -v \
  -confirm-license \
  -opensource \
  -prefix ${_qt5_prefix} \
  -archdatadir ${_qt5_archdatadir} \
  -bindir ${_qt5_bindir} \
  -datadir ${_qt5_datadir} \
  -docdir ${_qt5_docdir} \
  -examplesdir ${_qt5_examplesdir} \
  -headerdir ${_qt5_headerdir} \
  -importdir ${_qt5_importdir} \
  -libdir ${_qt5_libdir} \
  -libexecdir ${_qt5_libexecdir} \
  -plugindir ${_qt5_plugindir} \
  -sysconfdir ${_qt5_sysconfdir} \
  -translationdir ${_qt5_translationdir} \
  -platform ${platform} \
  -release \
  -shared \
  -accessibility \
  -dbus-linked \
  -fontconfig \
  -glib \
  -gtkstyle \
  -iconv \
  -icu \
  -openssl-linked \
  -optimized-qmake \
  -nomake tests \
  ${SB_PCHOPTS} \
  -no-rpath \
  -no-separate-debug-info \
  -no-strip \
  ${SB_PGSQLOPTS} \
  -system-harfbuzz \
  -system-libjpeg \
  -system-libpng \
  -system-pcre \
  -system-sqlite \
  -system-xkbcommon \
  -system-zlib \
  ${SB_SYSTEMDOPTS} \
  || exit $?

make -j${NJOBS} || make || exit $?
make install INSTALL_ROOT=${PKG} || exit $?

# create/own dirs
mkdir -p ${PKG}/${_qt5_archdatadir}/mkspecs/modules
mkdir -p ${PKG}/${_qt5_importdir}
mkdir -p ${PKG}/${_qt5_libexecdir}
mkdir -p ${PKG}/${_qt5_plugindir}/iconengines
mkdir -p ${PKG}/${_qt5_translationdir}

# put non-conflicting binaries with -qt5 postfix in ${_bindir}
if [ "/usr/bin" != "${_qt5_bindir}" ] ;then
  reldir=$(perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' /usr/bin ${_qt5_bindir})
  reldir2=$(perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' ${_qt5_bindir} /usr/bin)
  mkdir -p ${PKG}/usr/bin
  ( cd ${PKG}/${_qt5_bindir}
    for i in * ; do
      case "${i}" in
        moc|qdbuscpp2xml|qdbusxml2cpp|qmake|rcc|syncqt|uic)
          ln -sv  ${reldir2}/${i} ${reldir}/${i}-qt5
          ln -sv ${i} ${i}-qt5
          ;;
       *)
          ln -sv  ${reldir2}/${i} ${reldir}/${i}
          ;;
      esac
    done
  ) || exit 1
fi

## .prl/.la file love
# nuke .prl reference(s) to %%buildroot, excessive (.la-like) libs
( cd ${PKG}/${_qt5_libdir}
  for prl_file in libQt5*.prl ; do
    sed -i -e "/^QMAKE_PRL_BUILD_DIR/d" ${prl_file}
    if [ -f "$(basename ${prl_file} .prl).so" ]; then
      rm -fv "$(basename ${prl_file} .prl).la"
      sed -i -e "/^QMAKE_PRL_LIBS/d" ${prl_file}
    fi
  done
)

sed -i \
  -e "s|-L${SB_SROOT}/lib||g" \
  -e "/^Libs.private/s|-L/usr/lib${LIBDIRSUFFIX} ||g" \
  -e "/^QMAKE_PRL_LIBS/s|-L/usr/lib${LIBDIRSUFFIX} ||g" \
   ${PKG}/${_qt5_libdir}/pkgconfig/*.pc \
  ${PKG}/${_qt5_libdir}/*.prl

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

unset MARCH
# multilib: qconfig.h
case "${ARCH}" in
  i[3-6]86)  MARCH=32
             ;;
    s390)    MARCH=32
             ;;
    x86_64)  MARCH=64
             ;;
esac

if [ -n "${MARCH}" ] ;then
  mv ${PKG}/${_qt5_headerdir}/QtCore/qconfig.h \
    ${PKG}/${_qt5_headerdir}/QtCore/qconfig-${MARCH}.h || exit 1

cat > ${PKG}/${_qt5_headerdir}/QtCore/qconfig.h <<'EOF'
/* qconfig.h */
/* This file is here to prevent a file conflict on multiarch systems.  A
 * conflict will occur because qconfig.h has arch-specific definitions.
 *
 * DO NOT INCLUDE THE NEW FILE DIRECTLY -- ALWAYS INCLUDE THIS ONE INSTEAD. */

#ifndef QCONFIG_MULTILIB_H
#define QCONFIG_MULTILIB_H
#include <bits/wordsize.h>

#if __WORDSIZE == 32
#include "QtCore/qconfig-32.h"
#elif __WORDSIZE == 64
#include "QtCore/qconfig-64.h"
#else
#error "unexpected value for __WORDSIZE macro"
#endif

#endif
EOF
  chmod 0644 ${PKG}/${_qt5_headerdir}/QtCore/qconfig.h || exit 1
fi

mkdir -p ${PKG}/etc/xdg/qtchooser
( cd ${PKG}/etc/xdg/qtchooser
  echo "${_qt5_bindir}" >  5.conf
  echo "${_qt5_prefix}" >> 5.conf
  if [ -n "${MARCH}" ] ;then
    mv 5.conf 5-${MARCH}.conf
    ln -sf 5-${MARCH}.conf 5.conf
  fi
)

# Put this back as shipped:
sed -i -e "s|${SLKCFLAGS}|-O2|g" \
  ${PKG}/${_qt5_archdatadir}/mkspecs/*/qmake.conf || exit 1
sed -i \
  -e "s|${SLKCFLAGS}|-O2|g" \
  -e "/QMAKE_CFLAGS_OPTIMIZE_FULL/s|${SLKCFLAGS}|-O3|g" \
  mkspecs/common/qcc-base.conf || exit 1

if [ "${SLKLDFLAGS}" ] ;then
  sed -i -e "/^QMAKE_LFLAGS_RELEASE/s| ${SLKLDFLAGS}||g" \
    ${PKG}/${_qt5_archdatadir}/mkspecs/common/g++-unix.conf || exit 1
fi

if [ "${_qt5_docdir}" != "${_qt5_prefix}/doc" ] ;then
  # -doc make symbolic link to _qt5_docdir
  rm -rf ${PKG}/${_qt5_prefix}/doc
  ln -s  ../../doc/qt5 ${PKG}/${_qt5_prefix}/doc
fi

# Qt5.pc
cat > ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/Qt5.pc <<EOFP
prefix=${_qt5_prefix}
archdatadir=${_qt5_archdatadir}
bindir=${_qt5_bindir}
datadir=${_qt5_datadir}

docdir=${_qt5_docdir}
examplesdir=${_qt5_examplesdir}
headerdir=${_qt5_headerdir}
importdir=${_qt5_importdir}
libdir=${_qt5_libdir}
libexecdir=${_qt5_libexecdir}
moc=${_qt5_bindir}/moc
plugindir=${_qt5_plugindir}
qmake=${_qt5_bindir}/qmake
settingsdir=${_qt5_settingsdir}
sysconfdir=${_qt5_sysconfdir}
translationdir=${_qt5_translationdir}

Name: Qt5
Description: Qt5 Configuration
Version: ${RVER}
EOFP

# rpm macros
mkdir -p ${PKG}/usr/lib/rpm/macros.d
cat > ${PKG}/usr/lib/rpm/macros.d/macros.qt5 <<EOFM
%_qt5 ${NAME}
%_qt5_version ${RVER}
%_qt5_evr ${version}-${BUILD}
%_qt5_prefix %{_libdir}/qt5
%_qt5_archdatadir %{_qt5_prefix}
%_qt5_bindir %{_qt5_prefix}/bin
%_qt5_datadir %{_datadir}/qt5
%_qt5_docdir %{_docdir}/qt5
%_qt5_examples %{_qt5_prefix}/examples
%_qt5_headerdir %{_includedir}/qt5
%_qt5_importdir %{_qt5_archdatadir}/imports
%_qt5_libdir %{_libdir}
%_qt5_libexecdir %{_qt5_archdatadir}/libexec
%_qt5_plugindir %{_qt5_archdatadir}/plugins
%_qt5_qmake %{_qt5_bindir}/qmake
%_qt5_settingsdir %{_sysconfdir}/xdg
%_qt5_sysconfdir %{_qt5_settingsdir}
%_qt5_translationdir %{_datadir}/qt5/translations

%qmake_qt5 \
  %{_qt5_qmake} \\\
  QMAKE_CFLAGS_DEBUG="${CFLAGS:-%optflags}" \\\
  QMAKE_CFLAGS_RELEASE="${CFLAGS:-%optflags}" \\\
  QMAKE_CXXFLAGS_DEBUG="${CXXFLAGS:-%optflags}" \\\
  QMAKE_CXXFLAGS_RELEASE="${CXXFLAGS:-%optflags}" \\\
  QMAKE_LFLAGS_DEBUG="${LDFLAGS:-%{?__global_ldflags}}" \\\
  QMAKE_LFLAGS_RELEASE="${LDFLAGS:-%{?__global_ldflags}}" \\\
  QMAKE_STRIP=
EOFM

mkdir -p ${PKG}/etc/X11/xinit/xinitrc.d
cat > ${PKG}/etc/X11/xinit/xinitrc.d/10-qt5-check-opengl2.sh <<'EOF'
#!/bin/sh
OPENGL_VERSION=$(LANG=C glxinfo | grep '^OpenGL version string: ' | sed -e 's/^OpenGL version string: \([0-9]\).*$/\1/g')
if [ "${OPENGL_VERSION}" -lt 2 ]; then
  QT_XCB_FORCE_SOFTWARE_OPENGL=1
  export QT_XCB_FORCE_SOFTWARE_OPENGL
fi
EOF
chmod 0755 ${PKG}/etc/X11/xinit/xinitrc.d/10-qt5-check-opengl2.sh || exit 1

mkdir -p ${PKG}/etc/xdg/QtProject
cat > ${PKG}/etc/xdg/QtProject/qtlogging.ini.new <<'EOF'
[Rules]
*.debug=false
EOF

# Add a documentation directory:
( cd ${PKG}/usr/doc && ln -s ${NAME} ${NAME}-${VERSION} )
#mkdir -p ${DOCDIR}
cp -a \
  LICENSE.GPL LICENSE.LGPL LGPL_EXCEPTION.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r dist/changes-${VERSION} ] && head -n 1000 dist/changes-${VERSION} > ${DOCDIR}/changes-${VERSION}
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
