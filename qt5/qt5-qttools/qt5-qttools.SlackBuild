#!/bin/sh
#-- qt5-qttools for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ qt5-qttools.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://qt-project.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=qttools
NAME=qt5-qttools
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-5.5.1}
RVER=$(echo ${VERSION} | cut -d- -f1)
SVER=$(echo ${RVER} | cut -d. -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/qt5/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-opensource-src-${RVER}
SRCARCHIVE=${PNAME}-opensource-src-${VERSION}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.qt-project.org/official_releases/qt/${SVER}/${VERSION}/submodules/${SRCARCHIVE}"
DL_URLB="http://download.qt-project.org/snapshots/qt/${SVER}/${VERSION//RC/rc}/submodules/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../qt5.options ] && source ../qt5.options

# these should match contents of qt5.macros:
_qt5_prefix=${_qt5_prefix:-/usr/lib${LIBDIRSUFFIX}/qt5}
_qt5_archdatadir=${_qt5_archdatadir:-/usr/lib${LIBDIRSUFFIX}/qt5}
_qt5_bindir=${_qt5_bindir:-${_qt5_prefix}/bin}
_qt5_qmake=${_qt5_qmake:-${_qt5_bindir}/qmake}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt5_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt5_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

rm -rf src/assistant/3rdparty/clucene

for filepro in $(find . -type f -name "*.pro") ; do
  echo "QMAKE_CFLAGS_RELEASE += ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_CXXFLAGS_RELEASE += ${SLKCFLAGS}" >> "${filepro}"
  echo "QMAKE_LFLAGS_RELEASE += ${LDFLAGS}" >> "${filepro}"
done

${_qt5_qmake} || exit $?

make -j${NJOBS} || make || exit $?
make install INSTALL_ROOT=${PKG} || exit $?

# put non-conflicting binaries with -qt5 postfix in ${_bindir}
if [ "/usr/bin" != "${_qt5_bindir}" ] ;then
  reldir=$(perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' /usr/bin ${_qt5_bindir})
  reldir2=$(perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' ${_qt5_bindir} /usr/bin)
  mkdir -p ${PKG}/usr/bin
  ( cd ${PKG}/${_qt5_bindir}
    for i in * ; do
      case "${i}" in
        assistant|designer|lconvert|linguist|lrelease|lupdate|pixeltool|qcollectiongenerator|qdbus|qdbusviewer|qhelpconverter|qhelpgenerator)
          ln -sv  ${reldir2}/${i} ${reldir}/${i}-qt5
          ln -sv ${i} ${i}-qt5
          ;;
       *)
          ln -sv  ${reldir2}/${i} ${reldir}/${i}
          ;;
      esac
    done
  ) || exit 1
fi

## .prl/.la file love
# nuke .prl reference(s) to %%buildroot, excessive (.la-like) libs
( cd ${PKG}/${_qt5_libdir}
  for prl_file in libQt5*.prl ; do
    sed -i -e "/^QMAKE_PRL_BUILD_DIR/d" ${prl_file}
    if [ -f "$(basename ${prl_file} .prl).so" ]; then
      rm -fv "$(basename ${prl_file} .prl).la"
      sed -i -e "/^QMAKE_PRL_LIBS/d" ${prl_file}
    fi
  done
)

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add desktop file(s)
mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/qt5-assistant.desktop <<EOF1
[Desktop Entry]
Name=Qt5 Assistant
Comment=Shows Qt5 documentation and examples
Exec=assistant-qt5
Icon=assistant5
Terminal=false
Type=Application
Categories=Qt;Development;Documentation;
EOF1

cat > ${PKG}/usr/share/applications/qt5-designer.desktop <<EOF2
[Desktop Entry]
Name=Qt5 Designer
GenericName=Interface Designer
Comment=Design GUIs for Qt5 applications
Exec=designer-qt5
Icon=designer5
MimeType=application/x-designer;
Terminal=false
Type=Application
Categories=Qt;Development;
EOF2

cat > ${PKG}/usr/share/applications/qt5-linguist.desktop <<EOF3
[Desktop Entry]
Name=Qt5 Linguist
Comment=Add translations to Qt5 applications
Exec=linguist-qt5
Icon=linguist5
MimeType=application/x-linguist;
Terminal=false
Type=Application
Categories=Qt;Development;Translation;
EOF3

if 0 ;then
cat > ${PKG}/usr/share/applications/qt5-config.desktop <<EOF4
[Desktop Entry]
Name=Qt5 Config
Comment=Configure Qt5 behavior, styles, fonts
Exec=qtconfig-qt5
Icon=qt5-logo
Terminal=false
Type=Application
Categories=Qt;Settings;
EOF4
fi

cat > ${PKG}/usr/share/applications/qt5-qdbusviewer.desktop <<EOF5
[Desktop Entry]
Name=Qt5 QDbusViewer
GenericName=D-Bus Debugger
Comment=Debug D-Bus applications
Exec=qdbusviewer-qt5
Icon=qdbusviewer5
Terminal=false
Type=Application
Categories=Qt;Development;Debugger;
EOF5

# qt5-logo (generic) icons
mkdir -p ${PKG}/usr/share/icons/hicolor/128x128/apps
zcat ${CWD}/hi128-app-qt5-logo.png.gz \
  > ${PKG}/usr/share/icons/hicolor/128x128/apps/qt5-logo.png || exit 1

# assistant icon
install -p -m0644 src/assistant/assistant/images/assistant-128.png \
  ${PKG}/usr/share/icons/hicolor/128x128/apps/assistant5.png

# designer icon
install -p -m0644 src/designer/src/designer/images/designer.png \
  ${PKG}/usr/share/icons/hicolor/128x128/apps/designer5.png

# qdbusviewer icon
install -p -m0644 src/qdbus/qdbusviewer/images/qdbusviewer-128.png \
  ${PKG}/usr/share/icons/hicolor/128x128/apps/qdbusviewer5.png

for res in 16 20 22 24 32 36 48 64 72 96 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  for icon in qt5-logo assistant5 designer5 qdbusviewer5 ;do
    convert ${PKG}/usr/share/icons/hicolor/128x128/apps/${icon}.png -depth 8 \
      -filter Lanczos -resize ${res}x${res} ${dir}/${icon}.png || exit 1
  done
done

# linguist icons
for icon in src/linguist/linguist/images/icons/linguist-*-32.png ; do
  size=$(echo $(basename ${icon}) | cut -d- -f2)
  install -p -m644 -D ${icon} \
    ${PKG}/usr/share/icons/hicolor/${size}x${size}/apps/linguist5.png
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE.GPL LICENSE.LGPL LGPL_EXCEPTION.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-required \
  > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/hi128-app-qt5-logo.png.gz ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
