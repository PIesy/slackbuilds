#!/bin/bash
#-- xulrunner for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ xulrunner.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil..
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mozilla.org/projects/xulrunner/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=firefox
NAME=xulrunner
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-44.0}
GECKO_DIR_VER=${VERSION}
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-$(awk '{print $2}' /etc/slackware-version)}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable system cairo
SB_CAIRO=${SB_CAIRO:-NO}
# Set to YES to enable KDE integration support
# do not push any dependencies, needs optional kmozillahelper and kde session
SB_KDE=${SB_KDE:-YES}
# Set to YES to enable pulseaudio support
SB_PA=${SB_PA:-YES}
# Set to YES to enable Social API
SB_SOCIAL=${SB_SOCIAL:-NO}
# Set to YES to enable WebGL
SB_WEBGL=${SB_WEBGL:-YES}
# Set to YES to enable WebRTC
SB_WEBRTC=${SB_WEBRTC:-NO}
# Set to YES to enable WebSMS backend
SB_WEBSMS=${SB_WEBSMS:-NO}
# Set to YES to enable HTML Speech API
SB_WEBSPEECH=${SB_WEBSPEECH:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

if ! [ -x /usr/bin/autoconf-2.13 ] ;then
  echo 'Needs autoconf-2.13 (autoconf213) installed!'
  exit 1
fi

# Set default mail application
SB_DMAIL=${SB_DMAIL:-/usr/bin/thunderbird}

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${PNAME}-${VERSION}.source.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_MOZ=${MIRROR_MOZ:-http://download.cdn.mozilla.net/pub/mozilla.org}
DL_URL="${MIRROR_MOZ}/${PNAME}/releases/${VERSION}/source"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || exit 1
test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SSRCARCHIVE}

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

rm -rf gcc/ gcc.tar.xz

unset DBUS_SESSION_BUS_ADDRESS ORBIT_SOCKETDIR SESSION_MANAGER
unset XDG_SESSION_COOKIE XAUTHORITY MAKEFLAGS SDL_LINUX_JOYSTICK

rm -f .mozconfig
cat ${CWD}/${NAME}-mozconfig > .mozconfig || exit 1

if [ "${SB_CAIRO}" = "YES" ] ;then
  echo "ac_add_options --enable-system-cairo" >> .mozconfig
else
  echo "ac_add_options --disable-system-cairo" >> .mozconfig
fi

if [ "${SB_PA}" = "YES" ] ;then
  echo "ac_add_options --enable-pulseaudio" >> .mozconfig
else
  echo "ac_add_options --disable-pulseaudio" >> .mozconfig
fi

if [ "${SB_WEBGL}" = "YES" ] ;then
  echo "ac_add_options --enable-webgl" >> .mozconfig
else
  echo "ac_add_options --disable-webgl" >> .mozconfig
fi

if [ "${SB_WEBRTC}" = "YES" ] ;then
  echo "ac_add_options --enable-webrtc" >> .mozconfig
else
  echo "ac_add_options --disable-webrtc" >> .mozconfig
fi

if [ "${SB_WEBSMS}" = "YES" ] ;then
  echo "ac_add_options --enable-websms-backend" >> .mozconfig
else
  echo "ac_add_options --disable-websms-backend" >> .mozconfig
fi

if [ "${SB_WEBSPEECH}" = "YES" ] ;then
  echo "ac_add_options --enable-webspeech" >> .mozconfig
else
  echo "ac_add_options --disable-webspeech" >> .mozconfig
fi

rm -f configure

if [ "${SB_SOCIAL}" != "YES" ] ;then
  sed -i \
    -e '/MOZ_SOCIAL=/s|=1|=|g'\
    configure.in || exit 1
fi

sed -i \
  -e '/MOZ_ENABLE_GCONF=/s|=1|=|g'\
  -e '/MOZ_ENABLE_GNOMEVFS=/s|=1|=|g' \
  -e '/MOZ_ENABLE_LIBGNOME=/s|=1|=|g' \
  configure.in || exit 1

echo "ac_add_options --build=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1
echo "ac_add_options --host=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1
echo "ac_add_options --target=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1

INTERNAL_APP_NAME=${NAME}-${GECKO_DIR_VER}
mozappdir=/usr/lib${LIBDIRSUFFIX}/${NAME}

INTERNAL_APP_SDK_NAME=${NAME}-devel-${GECKO_DIR_VER}
MOZ_APP_SDK_DIR=/usr/lib${LIBDIRSUFFIX}/${INTERNAL_APP_SDK_NAME}

# Mozilla builds with -Wall with exception of a few warnings which show up
# everywhere in the code; so, don't override that.
MOZ_OPT_FLAGS="$(echo ${SLKCFLAGS} | sed -e 's/-Wall//' -e 's/-fexceptions/-fno-exceptions/g')"

export CFLAGS="${MOZ_OPT_FLAGS}"
export CXXFLAGS="${MOZ_OPT_FLAGS} -fpermissive -mno-avx"

export PREFIX='/usr'
export LIBDIR="/usr/lib${LIBDIRSUFFIX}"

make -f client.mk build STRIP="/bin/true" MOZ_MAKE_FLAGS="-j${NJOBS}" MOZ_SERVICES_SYNC="1" || exit 1

# set up our default preferences
cat ${CWD}/${NAME}-chinfo-default-prefs.js > slk-default-prefs

if [ "${SB_WEBRTC}" != "YES" ] ;then
cat >> slk-default-prefs << EOF
pref("loop.enabled", false);
EOF
fi

# set up default homepage and mail app
cat >> slk-default-prefs << EOF
pref("network.protocol-handler.app.mailto", "${SB_DMAIL}");
EOF
mv slk-default-prefs objdir/dist/bin/defaults/pref/all-slackware.js || exit 1

DESTDIR=${PKG} make -C objdir install || exit 1

mkdir -p ${PKG}{/usr/lib${LIBDIRSUFFIX},/usr/bin,/usr/share/applications}

# Start script install
rm -f ${PKG}/usr/bin/${NAME}
install -pm0755 ${CWD}/${NAME}.sh.in \
  ${PKG}/usr/bin/${NAME} || exit 1

rm -f ${PKG}${mozappdir}/${NAME}-config

# Link pc files (for compatibility with 1.9.1)
ln -s libxul.pc \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/libxul-unstable.pc || exit 1
ln -s libxul-embedding.pc \
  ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/libxul-embedding-unstable.pc || exit 1

# Fix multilib devel conflicts...
unset mozbits
if [ "${ARCH}" = "x86_64" ] ;then
  export mozbits=64
else
  export mozbits=32
fi

function install_file() {
genheader=$*
mv ${genheader}.h ${genheader}${mozbits}.h
cat > ${genheader}.h << EOF
// This file exists to fix multilib conflicts
#if defined(__x86_64__) || defined(__ia64__) || defined(__s390x__) || defined(__powerpc64__) || (defined(__sparc__) && defined(__arch64__))
#include "${genheader}64.h"
#else
#include "${genheader}32.h"
#endif
EOF
}

( cd ${PKG}/usr/include/${INTERNAL_APP_NAME}
  install_file "mozilla-config" || exit 1
  install_file "js-config" || exit 1
)

chmod 0755 ${PKG}/${MOZ_APP_SDK_DIR}/sdk/bin/{header,typelib}.py

rm -rf ${PKG}/${MOZ_APP_SDK_DIR}/include
ln -s  ../../include/${INTERNAL_APP_NAME} \
  ${PKG}/${MOZ_APP_SDK_DIR}/include

rm -rf ${PKG}/${MOZ_APP_SDK_DIR}/idl
ln -s ../../share/idl/${INTERNAL_APP_NAME} \
  ${PKG}/${MOZ_APP_SDK_DIR}/idl

rm -rf ${PKG}/${MOZ_APP_SDK_DIR}/bin
ln -s ../${NAME} \
  ${PKG}${MOZ_APP_SDK_DIR}/bin

rm -rf ${PKG}/${MOZ_APP_SDK_DIR}/lib
ln -s sdk/lib \
  ${PKG}${MOZ_APP_SDK_DIR}/lib

# Link libraries in sdk directory instead of copying them:
( cd ${PKG}/${MOZ_APP_SDK_DIR}/sdk/lib || exit 1
  for i in *.so; do
    rm -f ${i} || exit 1
    ln -s ../../../${NAME}/${i} ${i} || exit 1
  done
) || exit $?

# Move sdk/bin to xulrunner libdir
( cd ${PKG}/${MOZ_APP_SDK_DIR}/sdk/bin || exit 1
  mv ply *.py ${PKG}${mozappdir}/ || exit 1
) || exit $?
rm -rf ${PKG}/${MOZ_APP_SDK_DIR}/sdk/bin
ln -s ../../${NAME} \
  ${PKG}${MOZ_APP_SDK_DIR}/sdk/bin || exit 1

# Install xpcshell
cp objdir/dist/bin/xpcshell ${PKG}${mozappdir}/ || exit 1

# install install_app.py
cp  objdir/dist/bin/install_app.py ${PKG}${mozappdir}/ || exit 1

# Install run-mozilla.sh
cp objdir/dist/bin/run-mozilla.sh ${PKG}${mozappdir}/ || exit 1

mkdir -p ${PKG}/etc/ld.so.conf.d
cat > ${PKG}/etc/ld.so.conf.d/${NAME}-${ARCH}.conf <<EOF
${mozappdir}
EOF

# Use the system hunspell dictionaries
rm -rf ${PKG}${mozappdir}/dictionaries
ln -s ../../share/myspell ${PKG}${mozappdir}/dictionaries

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/man/man1
zcat ${CWD}/${NAME}.1.gz \
  > ${PKG}/usr/man/man1/${NAME}.1 || exit 1

# Copy over the LICENSE
install -p -c -m 644 LICENSE ${PKG}/${mozappdir}/

# Remove tmp files
find ${PKG} -name '.mkdir.done' -delete

# ghost files
touch ${PKG}/${mozappdir}/components/compreg.dat
touch ${PKG}/${mozappdir}/components/xpti.dat

( cd ${PKG}/${mozappdir}
  python -mcompileall *.py
  python -O -mcompileall *.py
)

rmdir -p ${PKG}/usr/share/applications

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -f usr/lib${LIBDIRSUFFIX}/${NAME}/components/compreg.dat ] ;then
  \${CHROOT} rm -f /${mozappdir#\/}/components/compreg.dat 1> /dev/null 2> /dev/null
fi
if [ -f usr/lib${LIBDIRSUFFIX}/${NAME}/components/xpti.dat ] ;then
  \${CHROOT} rm -f /${mozappdir#\/}/components/xpti.dat 1> /dev/null 2> /dev/null
fi

EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/${NAME}*mozconfig*  \
                 ${CWD}/*.sh.in ${CWD}/*.js ${CWD}/${NAME}.spec \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
