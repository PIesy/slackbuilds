#!/bin/bash
#-- gcc-java for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ gcc-java.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://gcc.gnu.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}
# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=gcc
NAME=gcc-java
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-6.1.0}
#antlr
AVER=${AVER:-3.4}

# Set to 0 to enable release instead snapshot
CHECKOUT=${CHECKOUT:-20160714}
RVER=$(echo ${VERSION} | cut -d- -f1)
SVER=$(echo ${RVER} | cut -d. -f1)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
TARGET=${TARGET:-${SLKTARGET}-${SLKDTARGET}-linux}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-${VERSION//-/.}-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable test
SB_TEST=${SB_TEST:-NO}
# Set to YES to use standalone libffi
SB_SFFI=${SB_SFFI:-YES}
# Set to YES to use awt gtk
SB_GTK=${SB_GTK:-NO}

if [ -x /usr/bin/python ] ;then
  PYABI=$(python -c 'import sys; sys.stdout.write(sys.version[:3])')
else
  PYABI=2.7
fi

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ "${CHECKOUT}" != "0" ] ;then
  SRCDIR=${PNAME}-${SVER}-${CHECKOUT}
else
  SRCDIR=${PNAME}-${VERSION}
fi
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sig
SRCARCHIVE2=ecj-latest.jar
ASRCARCHIVE=antlr-runtime-${AVER}.jar

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}/${NAME}-${VERSION}/${SRCARCHIVE}"
SDL_URL="${MIRROR_GNU}/${NAME}/${NAME}-${VERSION}/${SSRCARCHIVE}"
MIRROR_GCC=${MIRROR_GCC:-ftp://gcc.gnu.org/pub/gcc}
DL_URLB="${MIRROR_GCC}/snapshots/${SVER}-${CHECKOUT}/${SRCARCHIVE}"
DL_URL2="ftp://sourceware.org/pub/java/${SRCARCHIVE2}"
ADL_URL="https://oss.sonatype.org/content/repositories/releases/org/antlr/antlr-runtime/${AVER}/${ASRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1
test -r ${CWD}/${ASRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${ADL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS+=" ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS+=" -fPIC"
  LIB_ARCH=amd64
else
  LIBDIRSUFFIX=""
  LIB_ARCH=i386
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

# This testcase doesn't compile.
rm -rf libjava/testsuite/libjava.lang/PR35020*

install -m0644 ${CWD}/${SRCARCHIVE2} ./ecj.jar || exit 1
install -m0644 ${CWD}/${ASRCARCHIVE} ./${ASRCARCHIVE} || exit 1

echo "${RVER}" > gcc/BASE-VER
echo "${SLKDIST} ${RVER}-${BUILD}" > gcc/DEV-PHASE

./contrib/gcc_update --touch

LC_ALL=C sed -i -e 's/\xa0/ /' gcc/doc/options.texi

export CONFIG_SITE=NONE

export BINUTILS_LD=bfd

SB_SROOT="$(pwd)"

if [ "${ARCH}" = "x86_64" ]; then
  GCC_ARCHOPTS="--disable-multilib"
else
  GCC_ARCHOPTS="--with-arch=${ARCH}"
fi

unset SB_GTKOPTS
[ "${SB_GTK}" = "YES" ] && SB_GTKOPTS='--enable-java-awt=gtk'

mkdir gcc-java.build.lnx

# build gcc-java
( cd gcc-java.build.lnx;

  CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS}" \
  ${SB_SROOT}/configure --prefix=/usr \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --infodir=/usr/info \
     --mandir=/usr/man \
     --disable-werror \
     --enable-shared \
     --disable-bootstrap \
     --enable-languages=java \
     --enable-threads=posix \
     --enable-checking=release \
     --with-system-zlib \
     --enable-lto \
     --enable-plugin \
     --with-python-dir=/lib${LIBDIRSUFFIX}/python${PYABI}/site-packages \
     --enable-__cxa_atexit \
     --disable-libunwind-exceptions \
     --disable-libstdcxx-pch \
     --disable-libssp \
     --disable-objc-gc \
     --with-gnu-ld \
     --with-linker-hash-style=gnu \
     --with-default-libstdcxx-abi=gcc4-compatible \
     --enable-gnu-indirect-function \
     --verbose \
     --enable-java-home \
     --with-java-home=/usr/lib${LIBDIRSUFFIX}/jvm/jre \
     --with-jvm-root-dir=/usr/lib${LIBDIRSUFFIX}/jvm \
     --with-jvm-jar-dir=/usr/lib${LIBDIRSUFFIX}/jvm/jvm-exports \
     --with-arch-directory=${LIB_ARCH} \
     --with-antlr-jar=${TMP}/${SRCDIR}/${ASRCARCHIVE} \
     ${SB_GTKOPTS} \
     --disable-gtktest \
     ${GCC_ARCHOPTS} \
     --build=${TARGET} \
     --target=${TARGET} \
     --host=${TARGET} || exit $?

make -j${NJOBS} || make || exit $?

# Set SB_TEST=YES to run the tests
if [ "${SB_TEST}" = "YES" ] ;then 
  echo '====================TESTING========================='
  make -j${NJOBS} check || true
  echo '====================TESTING END====================='
fi

make install-target-libjava DESTDIR=${PKG} || exit $?
make -C gcc java.install-common java.install-man DESTDIR=${PKG} || exit $?

) || exit $?

[ "${SB_RMLA}" = "YES" ] && find ${PKG} -name '*.la' -delete

export FULLPATH=/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}
export FULLEPATH=/usr/libexec/gcc/${TARGET}/${VERSION}

install -pm0755 gcc-java.build.lnx/gcc/jc1 ${PKG}/${FULLEPATH}/ || exit 1
install -pm0755 gcc-java.build.lnx/gcc/jvgenmain ${PKG}/${FULLEPATH}/ || exit 1

( cd ${PKG}
  find . | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . -name "lib*\.a" -exec strip -g "{}" \;
)

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

getsoname(){
  objdump -p "$1" | grep SONAME | awk '{print $2}' | head -n1
}

if [ "${ARCH}" = "x86_64" ]; then
  sed -i \
    -e "s|lib${LIBDIRSUFFIX}/\.\./lib${LIBDIRSUFFIX}|lib${LIBDIRSUFFIX}|g" \
    ${PKG}/usr/lib*/*.la
  sed -i -e "s|lib${LIBDIRSUFFIX}/\.\./lib|lib|g" ${PKG1}/usr/lib/*.la
fi

( cd ${PKG}/usr/lib${LIBDIRSUFFIX}

  reldir="$(abs2rel /usr/lib${LIBDIRSUFFIX} ${FULLPATH})"
  ln -sf ${reldir}/$(getsoname libgcj.so.*) ${PKG}/${FULLPATH}/libgcj.so
  ln -sf ${reldir}/$(getsoname libgcj-tools.so.*) ${FULLPATH}/libgcj-tools.so
  ln -sf ${reldir}/$(getsoname libgij.so.*) ${PKG}/${FULLPATH}/libgij.so

  mv -f libgcj_bc.so ${PKG}/${FULLPATH}/

  mv -f libgcj.spec ${PKG}/${FULLPATH}/
  sed -i -e 's/lib: /&%{static:%eJava programs cannot be linked statically}/' \
    ${PKG}/${FULLPATH}/libgcj.spec

  find -L ${PKG}/${FULLPATH}/ -type l -delete
)

rm -f ${PKG}/usr/bin/jar
rm -f ${PKG}/usr/bin/fastjar
rm -f ${PKG}/usr/info/fastjar*

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/libgcc*
rm -f ${PKG}/${FULLPATH}/*.o
rm -f ${PKG}/${FULLPATH}/*.a
rm -f ${PKG}/${FULLPATH}/include/unwind.h
rmdir ${PKG}/usr/man/man*

if [ "${SB_SFFI}" = "YES" ] ;then
  rm -f ${PKG}/usr/include/ffi.h
  rm -f ${PKG}/${FULLPATH}/include/ffi.h
  rm -f ${PKG}/${FULLPATH}/include/ffitarget.h
  rm -f ${PKG}/usr/man/man3/ffi*
fi

( cd ${PKG}/usr/lib${LIBDIRSUFFIX}/python${PYABI}
  python -mcompileall .
)

ln -s libgcj-${SVER}.pc ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/libgcj.pc || exit 1

for i in libgcj libgcj-tools ;do
  ln -s ${i}-${VERSION}.jar ${PKG}/usr/share/java/${i}.jar
done

mv ${PKG}/usr/info/cp-tools.info ${PKG}/usr/info/cp-tools-gcj.info

# The ecj wrapper script:
sed -e "s,@JAVADIR@,/usr/share/java," ${CWD}/ecj.sh > ${PKG}/usr/bin/ecj
chmod 755 ${PKG}/usr/bin/ecj
# And add the missing javac symlink:
ln -s ../../../bin/ecj ${PKG}/usr/lib${LIBDIRSUFFIX}/jvm/bin/javac

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  libjava/{COPYING,HACKING,LIBGCJ_LICENSE,NEWS,README,THANKS} ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r libjava/ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-required \
  > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/ecj.sh  ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
