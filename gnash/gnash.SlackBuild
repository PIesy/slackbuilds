#!/bin/sh
#-- gnash for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ gnash.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2014 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.gnu.org/software/gnash/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=gnash
KNAME=${NAME}-klash
MPNAME=${NAME}-plugin
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
KPKG=${PKGF}/${KNAME}
MPPKG=${PKGF}/${MPNAME}

VERSION=${VERSION:-0.8.10}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-4}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGKNAME=${KNAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKGMPNAME=${MPNAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to add kde plugin
SB_KDE=${SB_KDE:-YES}
# Set to YES to enable mozilla plugin
SB_MOZPLUG=${SB_MOZPLUG:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sig
SRCARCHIVE2=${NAME}-splash.swf

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}/${VERSION}"
DL_URL2="http://www.getgnash.org/${SRCARCHIVE2}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../KDE.options ] && source ../KDE.options
[ -r /etc/profile.d/kde4.sh ] && source /etc/profile.d/kde4.sh

_kde4_prefix=${_kde4_prefix:-/usr}
_kde4_sysconfdir=${_kde4_sysconfdir:-/etc}
_kde4_libdir=${_kde4_libdir:-/usr/lib${LIBDIRSUFFIX}}
_kde4_libexecdir=${_kde4_libexecdir:-/usr/libexec/kde4}
_kde4_datadir=${_kde4_datadir:-/usr/share}
_kde4_sharedir=${_kde4_sharedir:-/usr/share}
_kde4_iconsdir=${_kde4_iconsdir:-${_kde4_sharedir}/icons}
_kde4_configdir=${_kde4_configdir:-${_kde4_sharedir}/config}
_kde4_appsdir=${_kde4_appsdir:-${_kde4_sharedir}/kde4/apps}
_kde4_docdir=${_kde4_docdir:-${_kde4_prefix}/doc}
_kde4_bindir=${_kde4_bindir=:-${_kde4_prefix}/bin}
_kde4_sbindir=${_kde4_sbindir:-${_kde4_prefix}/sbin}
_kde4_includedir=${_kde4_includedir:-${_kde4_prefix}/include/kde4}
_kde4_buildtype=${_kde4_buildtype:-release}
_kde4_macros_api=${_kde4_macros_api:-2}

if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${KPKG} ${MPPKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:$PATH}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|/imageformats|/plugins|g' macros/kde4.m4 || exit 1

unset SBGUIOPTS SB_KDEOPTS
if [ "${SB_KDE}" = "YES" ] ;then
  SB_GUIOPTS=",qt4,kde4"
  SB_KDEOPTS="--with-kde4-prefix=$(kde4-config --expandvars --prefix) \
    --with-kde4-lib=${_kde4_libdir}/kde4/devel \
    --with-kde4-incl=${_kde4_includedir} \
    --with-kde4-plugindir=${_kde4_libdir}/kde4"
fi

sh ./autogen.sh || exit 1

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --htmldir=/usr/share/gnash/html \
  --disable-silent-rules \
  --disable-static \
  --disable-rpath \
  --disable-ghelp \
  --disable-testsuite \
  --without-swfdec-testsuite \
  --without-ming \
  --enable-cygnal \
  --enable-gui=gtk${SB_GUIOPTS},sdl \
  --enable-media=gst \
  --enable-doublebuf \
  --enable-write \
  --without-gconf \
  --with-plugins-install=system \
  --enable-extensions=fileio,dejagnu,mysql \
  --with-npapi-plugindir=/usr/lib${LIBDIRSUFFIX}/mozilla/plugins \
  ${SB_KDEOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1

make install install-plugin DESTDIR=${PKG} \
  INSTALL='install -p' || exit $?

rm -f ${PKG}/usr/lib*/*.la
rm -f ${PKG}/usr/lib*/${NAME}/*.la
rm -f  ${PKG}${_kde4_libdir}/kde4/libklashpart.la

mv ${PKG}/etc/${NAME}rc ${PKG}/etc/${NAME}rc.new || exit 1

rm -rf ${PKG}/var
# don't package libltdl related files!
rm -f ${PKG}/usr/li*b/gnash/libltdl*
rm -f ${PKG}/usr/include/ltdl.h

mkdir -p ${PKG}/usr/info
cp doc/C/gnash_*.info ${PKG}/usr/info/ || exit 1

rmdir ${PKG}/usr/include

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

install -pm0644 ${CWD}/${SRCARCHIVE2} ${PKG}/usr/share/${NAME}/ || exit 1

rm -f ${PKG}/usr/share/icons/hicolor/32x32/apps/*.xpm
install -pm0644 ./gui/images/GnashG.png \
  ${PKG}/usr/share/icons/hicolor/32x32/apps/${NAME}.png || exit 1

if [ "${SB_KDE}" = "YES" ] ;then
  mkdir -p ${KPKG}/${_kde4_bindir}
  mv ${PKG}/${_kde4_bindir}/{qt4-gnash,gnash-qt-launcher} \
     ${KPKG}/${_kde4_bindir}/ || exit 1
  mkdir -p ${KPKG}/${_kde4_libdir}
  mv ${PKG}/${_kde4_libdir}/kde4 \
    ${KPKG}/${_kde4_libdir}/ || exit 1
  mkdir -p ${KPKG}/${_kde4_appsdir}
  mv ${PKG}/${_kde4_appsdir}/klash \
     ${KPKG}/${_kde4_appsdir}/ || exit 1
  mkdir -p ${KPKG}/${_kde4_datadir}/kde4/services
  mv ${PKG}/${_kde4_datadir}/kde4/services \
     ${KPKG}/${_kde4_datadir}/kde4/ || exit 1
  mkdir -p ${KPKG}/${_kde4_datadir}/applications
  mv ${PKG}/usr/share/applications/klash.desktop \
    ${KPKG}/${_kde4_datadir}/applications/ || exit 1
  mkdir -p ${KPKG}/${_kde4_datadir}/icons/hicolor/32x32/apps
  convert packaging/klash.xpm \
    ${KPKG}/${_kde4_datadir}/icons/hicolor/32x32/apps/klash.png || exit 1

  mkdir -p ${KPKG}/install
  cat ${CWD}/slack-desc.klash > ${KPKG}/install/slack-desc
  cat ${CWD}/slack-required.klash | sed \
  -e "s|_VERSION_|${VERSION}|g "> ${KPKG}/install/slack-required

else
  rm -rf ${PKG}/${_kde4_bindir}/kde4-gnash
  rm -rf ${PKG}/${_kde4_libdir}/kde4
  rm -rf ${PKG}/${_kde4_appsdir}/klash
  rm -rf ${PKG}/${_kde4_datadir}/kde4/services
fi
rmdir -p ${PKG}/${_kde4_bindir} ${PKG}/${_kde4_libdir}
rmdir -p ${PKG}/${_kde4_appsdir} ${PKG}/${_kde4_datadir}/kde4

# Mozilla plugin
if [ "${SB_MOZPLUG}" = "YES" ] ;then
  mkdir -p ${MPPKG}/usr/lib${LIBDIRSUFFIX}
  mv ${PKG}/usr/lib${LIBDIRSUFFIX}/mozilla ${MPPKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1

  if [ -f ${PKG}/etc/${NAME}pluginrc ] ;then
    mkdir -p ${MPPKG}/etc
    mv ${PKG}/etc/${NAME}pluginrc ${MPPKG}/etc/${NAME}pluginrc.new || exit 1
  fi

  mkdir -p ${MPPKG}/install
  cat ${CWD}/slack-desc.plugin > ${MPPKG}/install/slack-desc
  cat ${CWD}/slack-required.plugin | sed -e "s|_VERSION_|${VERSION}|g" \
    > ${MPPKG}/install/slack-required

if [ -f ${MPPKG}/etc/${NAME}pluginrc.new ] ;then
cat > ${MPPKG}/install/doinst.sh <<EOF
#!/bin/sh
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${MPPKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${MPPKG}/install/doinst.sh
  echo >> ${MPPKG}/install/doinst.sh
)
fi
else
  rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/mozilla
  rm -rf ${PKG}/etc/${NAME}pluginrc
fi
rmdir -p ${PKG}/etc

# Add a documentation directory:
mkdir -p ${DOCDIR}
if [ -d ${PKG}/usr/share/doc ] ;then
  mv ${PKG}/usr/share/doc/*/* ${DOCDIR}/
  rm -rf ${PKG}/usr/share/doc
  rmdir -p ${PKG}/usr/share
fi
cp -a \
  AUTHORS COPYING README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${NAME}_ref.info.gz 2>/dev/null
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${NAME}_user.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
   ${PKG}/install/slack-desc ${KPKG}/install/slack-desc ${MPPKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

if [ "${SB_KDE}" = "YES" ] ;then
  KROOTCOMMANDS="set -o errexit -o xtrace ; cd ${KPKG} ;
    /bin/chown --recursive root:root .  ;"

  KROOTCOMMANDS="${KROOTCOMMANDS}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGKNAME}.${PKGFORMAT} "

  if test ${UID} = 0; then
    eval ${KROOTCOMMANDS}
    set +o xtrace
  elif test "$(type -t fakeroot)" = 'file'; then
    echo -e "\e[1mEntering fakeroot environment.\e[0m"
    echo ${KROOTCOMMANDS} | fakeroot
  else
    echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
    /bin/su -c "${KROOTCOMMANDS}"
  fi
fi

if [ "${SB_MOZPLUG}" = "YES" ] ;then
  MPROOTCOMMANDS="set -o errexit -o xtrace ; cd ${MPPKG} ;
    /bin/chown --recursive root:root .  ;"

  MPROOTCOMMANDS="${MPROOTCOMMANDS}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGMPNAME}.${PKGFORMAT} "

  if test ${UID} = 0; then
    eval ${MPROOTCOMMANDS}
    set +o xtrace
  elif test "$(type -t fakeroot)" = 'file'; then
    echo -e "\e[1mEntering fakeroot environment.\e[0m"
    echo ${MPROOTCOMMANDS} | fakeroot
  else
    echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
    /bin/su -c "${MPROOTCOMMANDS}"
  fi
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
