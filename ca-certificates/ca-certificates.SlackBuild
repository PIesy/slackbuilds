#!/bin/sh
#-- ca-certificates for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ ca-certificates.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Mostly adapted (copied) from Fedora Spec file

# https://fedoraproject.org/wiki/CA-Certificates

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=ca-certificates
PKG=${PKG:-${TMP}/package-${NAME}}

# Year.NSS_BUILTINS_LIBRARY_VERSION from nssckbi.h
VERSION=${VERSION:-2016.2.10}
LVER=$(echo ${VERSION} | cut -d. -f2-)
PVER=${PVER:-2.5}
ARCH=noarch
SLKTARGET=${SLKTARGET:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to use latest mozilla files
SB_LATEST=${SB_LATEST:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

PKIDIR=/etc/pki
SB_CABDIR=/etc/ssl

catrustdir=${PKIDIR}/ca-trust
classic_tls_bundle=ca-bundle.crt
trusted_all_bundle=ca-bundle.trust.crt
legacy_default_bundle=ca-bundle.legacy.default.crt
legacy_disable_bundle=ca-bundle.legacy.disable.crt
neutral_bundle=ca-bundle.neutral-trust.crt
bundle_supplement=ca-bundle.supplement.p11-kit
java_bundle=cacerts

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=certdata.txt
VSRCARCHIVE=nssckbi.h
SRCARCHIVE2=update-ca-trust
SRCARCHIVE3=trust-fixes
SRCARCHIVE4=certdata2pem.py
SRCARCHIVE5=ca-legacy
PSRCARCHIVE=diff-from-upstream-${PVER}.patch

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
if [ "${SB_LATEST}" = "YES" ] ;then
  MOZHG_PREFIX='projects/nss/raw-file/default'
else
  MOZHG_PREFIX='releases/mozilla-release/file/default/security/nss'
fi
DL_URL="https://hg.mozilla.org/${MOZHG_PREFIX}/lib/ckfw/builtins"

FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${VSRCARCHIVE} ;do
  if ! test -r ${CWD}/${file} ;then
    if [ "${SB_LATEST}" = "YES" ] ;then
      ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
    else
      link="$(lynx -nonumbers -dump ${DL_URL}/${file} | grep raw-file | grep ${file} | head -n1)"
      ${DL_PROG} ${DL_OPTS} ${link} || exit 1
    fi
  fi
done

#test -r ${CWD}/${PSRCARCHIVE} || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${PSRCARCHIVE} || exit 1

RVER="$(grep "NSS_BUILTINS_LIBRARY_VERSION " ${CWD}/${VSRCARCHIVE} | awk '{print $3}' | tr -d \")"
if [ "${RVER}" != "${LVER}" ] ;then
  echo "Version mismatch. You have ${RVER} in ${CWD}/${VSRCARCHIVE} instead ${LVER} "
  echo "Remove ${CWD}/${SRCARCHIVE} and ${CWD}/${VSRCARCHIVE} or change VERSION and try again"
  exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir ${SRCDIR} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

cp -f ${CWD}/update-ca-trust.8.txt . || exit 1
cp -f ${CWD}/ca-legacy.8.txt . || exit 1

mkdir -p certs/legacy-{default,disable}
( cd certs 
  cp ${CWD}/${SRCARCHIVE} . || exit 1
  if [ -f ${CWD}/${PSRCARCHIVE} ] ;then
    patch -p0 -E --backup --verbose -i ${CWD}/${PSRCARCHIVE} || exit 1
  fi
  python ${CWD}/${SRCARCHIVE4} >c2p.log 2>c2p.err || exit 1
) || exit $?

for file in ${CWD}/extra/*.crt ;do
  if [ -e "${file}" ] ;then
    fixfile="$(echo $(basename ${file}) | sed -e 's|-|_|g;s| ||g')"
    cp "${file}" certs/"${fixfile}" || exit 1
  fi
done

( cat <<EOF
# This is a bundle of X.509 certificates of public Certificate
# Authorities.  It was generated from the Mozilla root CA list.
# These certificates are in the OpenSSL "TRUSTED CERTIFICATE"
# format and have trust bits set accordingly.
# An exception are auxiliary certificates, without positive or negative
# trust, but are used to assist in finding a preferred trust path.
# Those neutral certificates use the plain BEGIN CERTIFICATE format.
#
# Source: nss/lib/ckfw/builtins/certdata.txt
# Source: nss/lib/ckfw/builtins/nssckbi.h
#
# Generated from:
EOF
   cat ${CWD}/${VSRCARCHIVE} | grep -w NSS_BUILTINS_LIBRARY_VERSION | awk '{print "# " $2 " " $3}';
   echo '#';
) > ${trusted_all_bundle}

touch ${neutral_bundle}

for f in certs/*.crt; do
  echo "processing ${f}"
  tbits=$(sed -n '/^# openssl-trust/{s/^.*=//;p;}' ${f})
  distbits=$(sed -n '/^# openssl-distrust/{s/^.*=//;p;}' ${f})
  alias=$(sed -n '/^# alias=/{s/^.*=//;p;q;}' ${f} | sed "s/'//g" | sed 's/"//g')
  targs=""
  if [ -n "${tbits}" ]; then
    for t in ${tbits}; do
      targs="${targs} -addtrust ${t}"
    done
  fi
  if [ -n "${distbits}" ]; then
    for t in ${distbits}; do
      targs="${targs} -addreject ${t}"
    done
  fi
  if [ -n "${targs}" ]; then
    echo "trust flags ${targs} for ${f}" >> info.trust
    openssl x509 -text -in "${f}" -trustout ${targs} -setalias "${alias}" >> ${trusted_all_bundle} || exit $?
  else
    echo "no trust flags for ${f}" >> info.notrust
    # p11-kit-trust defines empty trust lists as "rejected for all purposes".
    # That's why we use the simple file format
    #   (BEGIN CERTIFICATE, no trust information)
    # because p11-kit-trust will treat it as a certificate with neutral trust.
    # This means we cannot use the -setalias feature for neutral trust certs.
    openssl x509 -text -in "${f}" >> ${neutral_bundle} || exit $?
  fi
done

touch ${legacy_default_bundle}

NUM_LEGACY_DEFAULT=$(find certs/legacy-default -type f | wc -l)
if [ ${NUM_LEGACY_DEFAULT} -ne 0 ]; then
  for f in certs/legacy-default/*.crt; do
    echo "processing ${f}"
    tbits=$(sed -n '/^# openssl-trust/{s/^.*=//;p;}' ${f})
    alias=$(sed -n '/^# alias=/{s/^.*=//;p;q;}' ${f} | sed "s/'//g" | sed 's/"//g')
    targs=""
    if [ -n "${tbits}" ]; then
      for t in ${tbits}; do
        targs="${targs} -addtrust ${t}"
      done
    fi
    if [ -n "${targs}" ]; then
      echo "legacy default flags ${targs} for ${f}" >> info.trust
      openssl x509 -text -in "${f}" -trustout ${targs} -setalias "${alias}" >> ${legacy_default_bundle} || exit $?
    fi
  done
fi

touch ${legacy_disable_bundle}
NUM_LEGACY_DISABLE=$(find certs/legacy-disable -type f | wc -l)
if [ ${NUM_LEGACY_DISABLE} -ne 0 ]; then
  for f in certs/legacy-disable/*.crt; do
    echo "processing ${f}"
    tbits=$(sed -n '/^# openssl-trust/{s/^.*=//;p;}' ${f})
    alias=$(sed -n '/^# alias=/{s/^.*=//;p;q;}' ${f} | sed "s/'//g" | sed 's/"//g')
    targs=""
    if [ -n "${tbits}" ]; then
      for t in ${tbits}; do
        targs="${targs} -addtrust ${t}"
      done
    fi
    if [ -n "${tbits}" ]; then
      echo "legacy disable flags ${targs} for ${f}" >> info.trust
      openssl x509 -text -in "${f}" -trustout ${targs} -setalias "${alias}" >> ${legacy_disable_bundle} || exit $?
    fi
  done
fi

P11FILES=$(find certs -name *.p11-kit | wc -l)
if [ ${P11FILES} -ne 0 ]; then
  for p in certs/*.p11-kit; do
    cat "${p}" >> ${bundle_supplement}
  done
fi
# Append Fedora trust fixes
cat ${CWD}/${SRCARCHIVE3} >> ${bundle_supplement} || exit $?

mkdir -p ${PKG}/${catrustdir}/source/{anchors,blacklist}
mkdir -p ${PKG}/${catrustdir}/extracted
mkdir -p ${PKG}/${catrustdir}/extracted/pem
mkdir -p ${PKG}/${catrustdir}/extracted/openssl
mkdir -p ${PKG}/${catrustdir}/extracted/java
mkdir -p ${PKG}/usr/share/pki/ca-trust-source/{anchors,blacklist}
mkdir -p ${PKG}/usr/share/pki/ca-trust-legacy

readmedir=${CWD}/readmes
install -p -m 644 ${readmedir}/README.usr ${PKG}/usr/share/pki/ca-trust-source/README
install -p -m 644 ${readmedir}/README.etc ${PKG}/${catrustdir}/README
install -p -m 644 ${readmedir}/README.extr ${PKG}/${catrustdir}/extracted/README
install -p -m 644 ${readmedir}/README.java ${PKG}/${catrustdir}/extracted/java/README
install -p -m 644 ${readmedir}/README.openssl ${PKG}/${catrustdir}/extracted/openssl/README
install -p -m 644 ${readmedir}/README.pem ${PKG}/${catrustdir}/extracted/pem/README
install -p -m 644 ${readmedir}/README.src ${PKG}/${catrustdir}/source/README

install -p -m 644 ${trusted_all_bundle} \
  ${PKG}/usr/share/pki/ca-trust-source/${trusted_all_bundle} || exit 1
install -p -m 644 ${neutral_bundle} \
  ${PKG}/usr/share/pki/ca-trust-source/${neutral_bundle} || exit 1
install -p -m 644 ${bundle_supplement} \
  ${PKG}/usr/share/pki/ca-trust-source/${bundle_supplement} || exit 1

install -p -m 644 ${legacy_default_bundle} \
  ${PKG}/usr/share/pki/ca-trust-legacy/${legacy_default_bundle} || exit 1
install -p -m 644 ${legacy_disable_bundle} \
  ${PKG}/usr/share/pki/ca-trust-legacy/${legacy_disable_bundle} || exit 1

touch -r ${CWD}/${SRCARCHIVE} ${PKG}/usr/share/pki/ca-trust-source/${trusted_all_bundle}
touch -r ${CWD}/${SRCARCHIVE} ${PKG}/usr/share/pki/ca-trust-source/${neutral_bundle}
touch -r ${CWD}/${SRCARCHIVE} ${PKG}/usr/share/pki/ca-trust-source/${bundle_supplement}
touch -r ${CWD}/${SRCARCHIVE} ${PKG}/usr/share/pki/ca-trust-legacy/${legacy_default_bundle}
touch -r ${CWD}/${SRCARCHIVE} ${PKG}/usr/share/pki/ca-trust-legacy/${legacy_disable_bundle}

mkdir -p ${PKG}/usr/bin
install -p -m 755 ${CWD}/${SRCARCHIVE2} ${PKG}/usr/bin/update-ca-trust || exit 1
install -p -m 755 ${CWD}/${SRCARCHIVE5} ${PKG}/usr/bin/ca-legacy || exit 1

install -p -m 644 ${CWD}/ca-legacy.conf ${PKG}/${catrustdir}/ca-legacy.conf.new || exit 1

# touch ghosted files that will be extracted dynamically
touch ${PKG}/${catrustdir}/extracted/pem/tls-ca-bundle.pem
touch ${PKG}/${catrustdir}/extracted/pem/email-ca-bundle.pem
touch ${PKG}/${catrustdir}/extracted/pem/objsign-ca-bundle.pem
touch ${PKG}/${catrustdir}/extracted/openssl/${trusted_all_bundle}
touch ${PKG}/${catrustdir}/extracted/java/${java_bundle}

mkdir -p ${PKG}/${SB_CABDIR}/certs ${PKG}/${PKIDIR}/java
sln ../ssl ${PKG}/${PKIDIR}/tls

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

# legacy filenames
sln $(abs2rel ${catrustdir}/extracted/pem ${SB_CABDIR})/tls-ca-bundle.pem \
  ${PKG}/${SB_CABDIR}/cert.pem || exit 1
sln $(abs2rel ${catrustdir}/extracted/pem ${SB_CABDIR}/certs)/tls-ca-bundle.pem \
  ${PKG}/${SB_CABDIR}/certs/${classic_tls_bundle} || exit 1
sln $(abs2rel ${catrustdir}/extracted/openssl ${SB_CABDIR}/certs)/${trusted_all_bundle} \
  ${PKG}/${SB_CABDIR}/certs/${trusted_all_bundle} || exit 1
sln $(abs2rel ${catrustdir}/extracted/java ${PKIDIR}/java)/${java_bundle} \
  ${PKG}/${PKIDIR}/java/${java_bundle} || exit 1

# manpage
asciidoc -v -d manpage -b docbook update-ca-trust.8.txt || exit 1
xsltproc --nonet -o update-ca-trust.8 \
  /usr/share/asciidoc/docbook-xsl/manpage.xsl update-ca-trust.8.xml || exit 1

asciidoc.py -v -d manpage -b docbook ca-legacy.8.txt
xsltproc --nonet -o ca-legacy.8 \
  /usr/share/asciidoc/docbook-xsl/manpage.xsl ca-legacy.8.xml || exit 1

mkdir -p ${PKG}/usr/man/man8
install -pm0644 update-ca-trust.8 ${PKG}/usr/man/man8/ || exit 1
install -pm0644 ca-legacy.8 ${PKG}/usr/man/man8/ || exit 1

# Add a documentation directeory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          sln $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
EOF

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
${CHROOT} /usr/bin/ca-legacy install >/dev/null 2>&1
${CHROOT} /usr/bin/update-ca-trust >/dev/null 2>&1
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/readmes
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/${FEDORADIST} ${CWD}/${SRCARCHIVE2} ${CWD}/${SRCARCHIVE3} \
    ${CWD}/${SRCARCHIVE4} ${CWD}/*.8.txt ${CWD}/ca-legacy.conf ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/readmes/*.* \
    ${SBDIR}/readmes/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
