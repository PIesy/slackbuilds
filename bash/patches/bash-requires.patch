diff -up bash-4.4/builtins.h.requires bash-4.4/builtins.h
--- bash-4.4/builtins.h.requires	2016-12-23 15:25:59.727282600 -0200
+++ bash-4.4/builtins.h	2016-12-23 15:27:19.543572277 -0200
@@ -42,6 +42,7 @@
 #define ASSIGNMENT_BUILTIN 0x10	/* This builtin takes assignment statements. */
 #define POSIX_BUILTIN	0x20	/* This builtins is special in the Posix command search order. */
 #define LOCALVAR_BUILTIN   0x40	/* This builtin creates local variables */
+#define REQUIRES_BUILTIN 0x40	/* This builtin requires other files. */
 
 #define BASE_INDENT	4
 
diff -up bash-4.4/builtins/mkbuiltins.c.requires bash-4.4/builtins/mkbuiltins.c
--- bash-4.4/builtins/mkbuiltins.c.requires	2016-01-25 16:29:03.000000000 -0200
+++ bash-4.4/builtins/mkbuiltins.c	2016-12-23 15:29:08.121836995 -0200
@@ -73,6 +73,7 @@ extern char *strcpy ();
 #define BUILTIN_FLAG_ASSIGNMENT 0x02
 #define BUILTIN_FLAG_LOCALVAR	0x04
 #define BUILTIN_FLAG_POSIX_BUILTIN 0x08
+#define BUILTIN_FLAG_REQUIRES	0x08
 
 #define BASE_INDENT	4
 
@@ -173,11 +174,19 @@ char *posix_builtins[] =
   (char *)NULL
 };
 
+/* The builtin commands that cause requirements on other files. */
+static char *requires_builtins[] =
+{
+  ".", "command", "exec", "source", "inlib",
+  (char *)NULL
+};
+
 /* Forward declarations. */
 static int is_special_builtin ();
 static int is_assignment_builtin ();
 static int is_localvar_builtin ();
 static int is_posix_builtin ();
+static int is_requires_builtin ();
 
 #if !defined (HAVE_RENAME)
 static int rename ();
@@ -831,6 +840,9 @@ builtin_handler (self, defs, arg)
     new->flags |= BUILTIN_FLAG_LOCALVAR;
   if (is_posix_builtin (name))
     new->flags |= BUILTIN_FLAG_POSIX_BUILTIN;
+  if (is_requires_builtin (name))
+    new->flags |= BUILTIN_FLAG_REQUIRES;
+
 
   array_add ((char *)new, defs->builtins);
   building_builtin = 1;
@@ -1250,12 +1262,13 @@ write_builtins (defs, structfile, extern
 		  else
 		    fprintf (structfile, "(sh_builtin_func_t *)0x0, ");
 
-		  fprintf (structfile, "%s%s%s%s%s, %s_doc,\n",
+		  fprintf (structfile, "%s%s%s%s%s%s, %s_doc,\n",
 		    "BUILTIN_ENABLED | STATIC_BUILTIN",
 		    (builtin->flags & BUILTIN_FLAG_SPECIAL) ? " | SPECIAL_BUILTIN" : "",
 		    (builtin->flags & BUILTIN_FLAG_ASSIGNMENT) ? " | ASSIGNMENT_BUILTIN" : "",
 		    (builtin->flags & BUILTIN_FLAG_LOCALVAR) ? " | LOCALVAR_BUILTIN" : "",
 		    (builtin->flags & BUILTIN_FLAG_POSIX_BUILTIN) ? " | POSIX_BUILTIN" : "",
+		    (builtin->flags & BUILTIN_FLAG_REQUIRES) ? " | REQUIRES_BUILTIN" : "",
 		    document_name (builtin));
 
 		  /* Don't translate short document summaries that are identical
@@ -1645,6 +1658,13 @@ is_posix_builtin (name)
   return (_find_in_table (name, posix_builtins));
 }
 
+static int
+is_requires_builtin (name)
+     char *name;
+{
+  return (_find_in_table (name, requires_builtins));
+}
+
 #if !defined (HAVE_RENAME)
 static int
 rename (from, to)
diff -up bash-4.4/doc/bash.1.requires bash-4.4/doc/bash.1
--- bash-4.4/doc/bash.1.requires	2016-08-26 10:45:17.000000000 -0300
+++ bash-4.4/doc/bash.1	2016-12-23 15:25:59.730281967 -0200
@@ -238,6 +238,14 @@ The shell becomes restricted (see
 .B "RESTRICTED SHELL"
 below).
 .TP
+.B \-\-rpm-requires
+Produce the list of files that are required for the 
+shell script to run.  This implies '-n' and is subject
+to the same limitations as compile time error checking checking;
+Command substitutions, Conditional expressions and
+.BR eval
+builtin are not parsed so some dependencies may be missed.
+.TP
 .B \-\-verbose
 Equivalent to \fB\-v\fP.
 .TP
diff -up bash-4.4/doc/bashref.texi.requires bash-4.4/doc/bashref.texi
--- bash-4.4/doc/bashref.texi.requires	2016-09-07 18:13:36.000000000 -0300
+++ bash-4.4/doc/bashref.texi	2016-12-23 15:25:59.732281545 -0200
@@ -6243,6 +6243,13 @@ standard.  @xref{Bash POSIX Mode}, for a
 @item --restricted
 Make the shell a restricted shell (@pxref{The Restricted Shell}).
 
+@item --rpm-requires
+Produce the list of files that are required for the 
+shell script to run.  This implies '-n' and is subject
+to the same limitations as compile time error checking checking;
+Command substitutions, Conditional expressions and @command{eval}
+are not parsed so some dependencies may be missed.
+
 @item --verbose
 Equivalent to @option{-v}.  Print shell input lines as they're read.
 
diff -up bash-4.4/eval.c.requires bash-4.4/eval.c
--- bash-4.4/eval.c.requires	2016-06-02 19:49:27.000000000 -0300
+++ bash-4.4/eval.c	2016-12-23 15:26:57.812111821 -0200
@@ -56,6 +56,7 @@ extern int need_here_doc;
 extern int current_command_number, current_command_line_count, line_number;
 extern int expand_aliases;
 extern char *ps0_prompt;
+extern int rpm_requires;
 
 #if defined (HAVE_POSIX_SIGNALS)
 extern sigset_t top_level_mask;
@@ -148,7 +149,7 @@ reader_loop ()
 
       if (read_command () == 0)
 	{
-	  if (interactive_shell == 0 && read_but_dont_execute)
+	  if (interactive_shell == 0 && (read_but_dont_execute && !rpm_requires))
 	    {
 	      last_command_exit_value = EXECUTION_SUCCESS;
 	      dispose_command (global_command);
diff -up bash-4.4/execute_cmd.c.requires bash-4.4/execute_cmd.c
--- bash-4.4/execute_cmd.c.requires	2016-12-23 15:25:59.675293581 -0200
+++ bash-4.4/execute_cmd.c	2016-12-23 15:25:59.733281333 -0200
@@ -533,6 +533,8 @@ async_redirect_stdin ()
 
 #define DESCRIBE_PID(pid) do { if (interactive) describe_pid (pid); } while (0)
 
+extern int rpm_requires;
+
 /* Execute the command passed in COMMAND, perhaps doing it asynchronously.
    COMMAND is exactly what read_command () places into GLOBAL_COMMAND.
    ASYNCHROUNOUS, if non-zero, says to do this command in the background.
@@ -565,7 +567,13 @@ execute_command_internal (command, async
 
   if (breaking || continuing)
     return (last_command_exit_value);
-  if (command == 0 || read_but_dont_execute)
+  if (command == 0 || (read_but_dont_execute && !rpm_requires))
+    return (EXECUTION_SUCCESS);
+  if (rpm_requires && command->type == cm_function_def)
+    return last_command_exit_value =
+      execute_intern_function (command->value.Function_def->name,
+                              command->value.Function_def);
+  if (read_but_dont_execute)
     return (EXECUTION_SUCCESS);
 
   QUIT;
@@ -5751,7 +5759,7 @@ execute_intern_function (name, funcdef)
 
   if (check_identifier (name, posixly_correct) == 0)
     {
-      if (posixly_correct && interactive_shell == 0)
+      if (posixly_correct && interactive_shell == 0 && rpm_requires == 0)
 	{
 	  last_command_exit_value = EX_BADUSAGE;
 	  jump_to_top_level (ERREXIT);
diff -up bash-4.4/execute_cmd.h.requires bash-4.4/execute_cmd.h
--- bash-4.4/execute_cmd.h.requires	2016-02-11 18:01:05.000000000 -0200
+++ bash-4.4/execute_cmd.h	2016-12-23 15:25:59.733281333 -0200
@@ -22,6 +22,8 @@
 #define _EXECUTE_CMD_H_
 
 #include "stdc.h"
+#include "variables.h"
+#include "command.h"
 
 #if defined (ARRAY_VARS)
 struct func_array_state
diff -up bash-4.4/make_cmd.c.requires bash-4.4/make_cmd.c
--- bash-4.4/make_cmd.c.requires	2016-03-31 15:16:24.000000000 -0300
+++ bash-4.4/make_cmd.c	2016-12-23 15:26:35.976673086 -0200
@@ -42,11 +42,15 @@
 #include "flags.h"
 #include "make_cmd.h"
 #include "dispose_cmd.h"
+#include "execute_cmd.h"
 #include "variables.h"
 #include "subst.h"
 #include "input.h"
 #include "ocache.h"
 #include "externs.h"
+#include "builtins.h"
+
+#include "builtins/common.h"
 
 #if defined (JOB_CONTROL)
 #include "jobs.h"
@@ -57,6 +61,10 @@
 extern int line_number, current_command_line_count, parser_state;
 extern int last_command_exit_value;
 extern int shell_initialized;
+extern int rpm_requires;
+
+static char *alphabet_set = "abcdefghijklmnopqrstuvwxyz"
+                     "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 
 int here_doc_first_line = 0;
 
@@ -839,6 +847,27 @@ make_coproc_command (name, command)
   return (make_command (cm_coproc, (SIMPLE_COM *)temp));
 }
 
+static void
+output_requirement (deptype, filename)
+const char *deptype;
+char *filename;
+{
+  if (strchr(filename, '$') || (filename[0] != '/' && strchr(filename, '/')))
+    return;
+
+  /* 
+      if the executable is called via variable substitution we can
+      not dermine what it is at compile time.  
+
+      if the executable consists only of characters not in the
+      alphabet we do not consider it a dependency just an artifact
+      of shell parsing (ex "exec < ${infile}").
+  */
+
+  if (strpbrk(filename, alphabet_set))
+    printf ("%s(%s)\n", deptype, filename);
+}
+
 /* Reverse the word list and redirection list in the simple command
    has just been parsed.  It seems simpler to do this here the one
    time then by any other method that I can think of. */
@@ -856,6 +885,27 @@ clean_simple_command (command)
 	REVERSE_LIST (command->value.Simple->redirects, REDIRECT *);
     }
 
+  if (rpm_requires && command->value.Simple->words)
+    {
+      char *cmd0;
+      char *cmd1;
+      struct builtin *b;
+
+      cmd0 = command->value.Simple->words->word->word;
+      b = builtin_address_internal (cmd0, 0);
+      cmd1 = 0;
+      if (command->value.Simple->words->next)
+        cmd1 = command->value.Simple->words->next->word->word;
+
+      if (b) {
+        if ( (b->flags & REQUIRES_BUILTIN) && cmd1)
+          output_requirement ("executable", cmd1);
+      } else {
+        if (!assignment(cmd0, 0))
+          output_requirement (find_function(cmd0) ? "function" : "executable", cmd0);
+      }
+    } /*rpm_requires*/
+
   parser_state &= ~PST_REDIRLIST;
   return (command);
 }
diff -up bash-4.4/shell.c.requires bash-4.4/shell.c
--- bash-4.4/shell.c.requires	2016-05-06 12:23:43.000000000 -0300
+++ bash-4.4/shell.c	2016-12-23 15:25:59.734281122 -0200
@@ -201,6 +201,9 @@ int have_devfd = 0;
 /* The name of the .(shell)rc file. */
 static char *bashrc_file = DEFAULT_BASHRC;
 
+/* Non-zero if we are finding the scripts requirements. */
+int rpm_requires;
+
 /* Non-zero means to act more like the Bourne shell on startup. */
 static int act_like_sh;
 
@@ -264,6 +267,7 @@ static const struct {
   { "protected", Int, &protected_mode, (char **)0x0 },
 #endif
   { "rcfile", Charp, (int *)0x0, &bashrc_file },
+  { "rpm-requires", Int, &rpm_requires, (char **)0x0 },
 #if defined (RESTRICTED_SHELL)
   { "restricted", Int, &restricted, (char **)0x0 },
 #endif
@@ -500,6 +504,12 @@ main (argc, argv, env)
   if (dump_translatable_strings)
     read_but_dont_execute = 1;
 
+  if (rpm_requires)
+    {
+      read_but_dont_execute = 1;
+      initialize_shell_builtins ();
+    }
+
   if (running_setuid && privileged_mode == 0)
     disable_priv_mode ();
 
