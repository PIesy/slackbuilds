#!/bin/bash
#-- binutils for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ binutils.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://sources.redhat.com/binutils
# http://www.kernel.org/pub/linux/utils/kernel/ksymoops/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=binutils
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.25.1}
OFVER=${OFVER:-2.19.51.0.2}
unset TARFMT
if [ -z "$( echo ${VERSION} | cut -d . -f 5 )" ] ;then
  TARFMT=bz2
  SIGFMT=${TARFMT}.sig
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
TARGET=${TARGET:-${SLKTARGET}-${SLKDTARGET}-linux}
BUILD=${BUILD:-4}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
KDOCDIR=${PKG}/usr/doc/${KNAME}-${KSYMVER}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set gold as default ld
SB_GOLD=${SB_GOLD:-NO}

# Set to YES to enable test
SB_TEST=${SB_TEST:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.${TARFMT:-xz}
SSRCARCHIVE=${SRCDIR}.tar.${SIGFMT:-sign}
SRCARCHIVE2=release.${NAME}-${VERSION}
SRCARCHIVE3=${NAME}-${OFVER}-output-format.sed.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/devel/${NAME}"
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URLB="${MIRROR_GNU}/${NAME}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
done
if [ -n "$( echo ${VERSION} | cut -d . -f 5 )" ] ;then
  test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE2} || exit 1
fi
test -r ${CWD}/${KSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${KDL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e "/bfd-plugins/s|/lib/|/lib${LIBDIRSUFFIX}/|g" bfd/plugin.c || exit 1

perl -pi -e 's/i\[3-7\]86/i[34567]86/g' */conf*
sed -i -e "s/%{release}/${BUILD}/g" bfd/Makefile{.am,.in}
sed -i -e '/^libopcodes_la_\(DEPENDENCIES\|LIBADD\)/s,$, ../bfd/libbfd.la,' \
  opcodes/Makefile.{am,in}
if gcc ${SLKCFLAGS} -v --help 2>&1 | grep -q -- -Bsymbolic-functions; then
  sed -i -e 's/^libbfd_la_LDFLAGS = /&-Wl,-Bsymbolic-functions /' bfd/Makefile.{am,in}
  sed -i -e 's/^libopcodes_la_LDFLAGS = /&-Wl,-Bsymbolic-functions /' opcodes/Makefile.{am,in}
fi

# Undo the name change to run the testsuite.
for tool in binutils gas ld
do
  sed -i -e "2aDEJATOOL = $tool" ${tool}/Makefile.am
  sed -i -e "s/^DEJATOOL = .*/DEJATOOL = ${tool}/" ${tool}/Makefile.in
done
touch */configure

export BINUTILS_LD=bfd

unset SB_GOLDOPTS SB_LDOPTS
if [ "${SB_GOLD}" = "YES" ] ;then
  SB_GOLDOPTS=default
else
  SB_LDOPTS=default
fi

# Build for an x86 glibc2-based Linux system:
CFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --mandir=/usr/man \
  --infodir=/usr/info \
  --enable-shared \
  --enable-multilib \
  --enable-targets=${TARGET} \
  --enable-gold=${SB_GOLDOPTS:-yes} \
  --enable-ld=${SB_LDOPTS:-yes} \
  --enable-64-bit-bfd \
  --enable-lto \
  --enable-plugins \
  --enable-threads \
  --enable-deterministic-archives \
  --build=${TARGET} || exit $?

make clean || exit 1
make -j${NJOBS} tooldir=/usr || exit 1
make tooldir=/usr info || exit 1

if [ "${SB_TEST}" = "YES" ] ;then 
  echo '====================TESTING========================='
  make -k check LDFLAGS="" < /dev/null > check.log 2>&1
  cat check.log || exit 1
  cat {gas/testsuite/gas,ld/ld,binutils/binutils}.sum || exit 1
  echo '====================TESTING END====================='
else
  echo '=================TESTSUITE DISABLED================='
fi

# Install into the $PKG location:
make install DESTDIR=${PKG} || exit 1
make prefix=${PKG}/usr infodir=${PKG}/usr/info install-info

# Rebuild libiberty.a with -fPIC
make -C libiberty clean || exit 1
make CFLAGS="-g -fPIC ${SLKCFLAGS}" -C libiberty || exit 1

# Rebuild libbfd.a with -fPIC.
# Without the hidden visibility the 3rd party shared libraries would export
# the bfd non-stable ABI.
make -C bfd clean
make CFLAGS="-g -fPIC ${SLKCFLAGS} -fvisibility=hidden" -C bfd || exit 1

# Rebuild libopcodes.a with -fPIC.
make -C opcodes clean
make CFLAGS="-g -fPIC ${SLKCFLAGS}" -C opcodes || exit $?

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/ld.new <<EOF
# Set default linker (bfd or gold)
# BINUTILS_LD from environment override it
# if not bfd or ld, it defaults to bfd
DEF_LD=_DEF_LD_
EOF

rm -f ${PKG}/usr/bin/ld
cat > ${PKG}/usr/bin/ld <<'EOF'
#!/bin/sh
# binutils ld wrapper

unset DEF_LD
[ -e /etc/default/ld ] && . /etc/default/ld
DEF_LD=${DEF_LD:-_DEF_LD_}

# export BINUTILS_LD to bypass /etc/default/ld setting
if [ -n "${BINUTILS_LD}" ] ;then
  case "${BINUTILS_LD}" in
    bfd|gold)
      DEF_LD="${BINUTILS_LD}"
      ;;
    *)
      DEF_LD=bfd
      ;;
  esac
fi

case "${DEF_LD}" in
  bfd|gold)
    ;;
  *)
    DEF_LD=bfd
    ;;
esac

if ! [ -x /usr/bin/ld.${DEF_LD} ] ; then
  echo "/usr/bin/ld.${DEF_LD} is not executable or not exists"
  echo 'Verify your installation.'
  exit 1
fi

exec /usr/bin/ld.${DEF_LD} ${1+"$@"}
EOF
chmod 755 ${PKG}/usr/bin/ld || exit 1

if [ "${SB_GOLD}" = "YES" ] ;then
  sed -i -e 's|_DEF_LD_|gold|g' \
    ${PKG}/etc/default/ld.new ${PKG}/usr/bin/ld
else
  sed -i -e 's|_DEF_LD_|bfd|g' \
    ${PKG}/etc/default/ld.new ${PKG}/usr/bin/ld
fi

install -m 644 bfd/libbfd.a ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1
install -m 644 libiberty/libiberty.a ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1
install -m 644 include/libiberty.h ${PKG}/usr/include/ || exit 1
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/libopcodes.a
install -m 644 opcodes/libopcodes.a ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1

rm -rf ${PKG}/usr/lib${LIBDIRSUFFIX}/ldscripts

# Add fresh ldscripts:
cp -a ${PKG}/usr/${SLKTARGET}-${SLKDTARGET}-linux/lib/ldscripts ${PKG}/usr/lib${LIBDIRSUFFIX}/ || exit 1

mv ${PKG}/usr/bin/strings ${PKG}/usr/bin/strings-GNU
mv ${PKG}/usr/man/man1/strings.1 ${PKG}/usr/man/man1/strings-GNU.1 || exit 1

chmod +x ${PKG}/usr/lib${LIBDIRSUFFIX}/lib*.so*

# Missing?
cp -a gas/doc/as.1 ${PKG}/usr/man/man1/

# Remove Windows/Novell only man pages
rm -f ${PKG}/usr/man/man1/{dlltool,nlmconv,windres}*

# Now we must remember to adjust ldscripts (real dir is /usr/lib/ldscripts/,
# links go in /usr/*-linux/lib/ ), and the bin links:
mkdir -p ${PKG}/usr/${SLKTARGET}-${SLKDTARGET}-linux/lib
( cd ${PKG}/usr/${SLKTARGET}-${SLKDTARGET}-linux/lib ; rm -rf ldscripts ; ln -sf ../../lib${LIBDIRSUFFIX}/ldscripts . )
mkdir -p ${PKG}/usr/${SLKTARGET}-${SLKDTARGET}-linux/bin
( cd ${PKG}/usr/${SLKTARGET}-${SLKDTARGET}-linux/bin
  for file in * ; do
    if [ -r "../../bin/${file}" ]; then
      rm -f ${file}
      ln -sf ../../bin/${file} .
    fi
  done
)

# Prevent programs to link against libbfd and libopcodes dynamically,
# they are changing far too often (ksymoops is a exception :) )
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/lib{bfd,opcodes}.so || exit 1

# Remove libtool files, which reference the .so libs
rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/lib{bfd,opcodes}.la

# Sanity check --enable-64-bit-bfd really works.
grep '^#define BFD_ARCH_SIZE 64$' ${PKG}/usr/include/bfd.h || exit 1
# Fix multilib conflicts of generated values by __WORDSIZE-based expressions.
sed -i \
  -e '/^#include "ansidecl.h"/{p;s~^.*$~#include <bits/wordsize.h>~;}' \
  -e 's/^#define BFD_DEFAULT_TARGET_SIZE \(32\|64\) *$/#define BFD_DEFAULT_TARGET_SIZE __WORDSIZE/' \
  -e 's/^#define BFD_HOST_64BIT_LONG [01] *$/#define BFD_HOST_64BIT_LONG (__WORDSIZE == 64)/' \
  -e 's/^#define BFD_HOST_64_BIT \(long \)\?long *$/#if __WORDSIZE == 32\
#define BFD_HOST_64_BIT long long\
#else\
#define BFD_HOST_64_BIT long\
#endif/' \
  -e 's/^#define BFD_HOST_U_64_BIT unsigned \(long \)\?long *$/#define BFD_HOST_U_64_BIT unsigned BFD_HOST_64_BIT/' \
  ${PKG}/usr/include/bfd.h || exit 1
touch -r bfd/bfd-in2.h ${PKG}/usr/include/bfd.h

# Generate .so linker scripts for dependencies; imported from glibc/Makerules:

# This fragment of linker script gives the OUTPUT_FORMAT statement
# for the configuration we are building.
zcat ${CWD}/${SRCARCHIVE3} > ${SRCARCHIVE3%.gz} || exit 1
OUTPUT_FORMAT="\
/* Ensure this .so library will not be used by a link for a different format
   on a multi-architecture system.  */
$(gcc ${SLKCFLAGS} ${LDFLAGS} -shared -x c /dev/null -o /dev/null -Wl,--verbose -v 2>&1 | sed -n -f "${SRCARCHIVE3%.gz}")"

tee ${PKG}/usr/lib${LIBDIRSUFFIX}/libbfd.so <<EOH
/* GNU ld script */

$OUTPUT_FORMAT

/* The libz dependency is unexpected by legacy build scripts.  */
INPUT ( /usr/lib${LIBDIRSUFFIX}/libbfd.a -liberty -lz -ldl)
EOH

tee ${PKG}/usr/lib${LIBDIRSUFFIX}/libopcodes.so <<EOH
/* GNU ld script */

$OUTPUT_FORMAT

INPUT ( /usr/lib${LIBDIRSUFFIX}/libopcodes.a -lbfd )
EOH

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/bfd-plugins

for bin in \
  addr2line ar as c++filt dwp elfedit gprof ld ld.bfd ld.gold \
  nm objcopy objdump ranlib readelf size strip ;
do
  ln -sf ${bin} ${PKG}/usr/bin/${TARGET}-${bin} || exit 1
done

ln -sf strings-GNU ${PKG}/usr/bin/${TARGET}-strings || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/${SRCARCHIVE2} COPYING* ChangeLog.linux MAI* README* \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/bfd.info.gz 2>/dev/null
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${SRCARCHIVE3} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
