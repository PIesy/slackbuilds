#!/bin/sh
#-- util-linux for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ util-linux.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://userweb.kernel.org/~kzak/util-linux-ng/
# ftp://ftp.kernel.org/pub/linux/utils/util-linux-ng/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=util-linux
ADJTNAME=adjtimex
HNNAME=hostname
SETSERNAME=setserial
ZIPTNAME=ziptool
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.29}
SVER=$(echo ${VERSION} | cut -d - -f1 | cut -d . -f1-2)
ADJTVER=${ADJTVER:-1.29}
ADJTPVER=${ADJTPVER:-1.29-4}
HNVER=${HNVER:-3.15}
SETSERVER=${SETSERVER:-2.17}
ZIPTVER=${ZIPTVER:-1.4.0}

if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
ADJTDOCDIR=${PKG}/usr/doc/${ADJTNAME}-${ADJTVER}
SETSERDOCDIR=${PKG}/usr/doc/${SETSERNAME}-${SETSERVER}
ZIPTDOCDIR=${PKG}/usr/doc/${ZIPTNAME}-${ZIPTVER}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

grep --quiet '^uuidd:' /etc/group && SB_HGROUP=1
grep --quiet '^uuidd:' /etc/passwd && SB_HUSER=1

# Set to YES to enale mtab symlink support.
SB_MTABSYM=${SB_MTABSYM:-YES}
# Set to YES to use with shadow with pam support.
SB_PAM=${SB_PAM:-YES}
# Set to YES if using with systemd
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SB_PAMD_DIR=${CWD}/pamd

SRCDIR=${NAME}-${VERSION}
ADJTSRCDIR=${ADJTNAME}-${ADJTVER}
HNSRCDIR=${HNNAME}
SETSERSRCDIR=${SETSERNAME}-${SETSERVER}
ZIPTSRCDIR=${ZIPTNAME}-${ZIPTVER}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCDIR}.tar.sign
ADJTSRCARCHIVE=${ADJTNAME}_${ADJTVER}.orig.tar.gz
PADJTSRCARCHIVE=${ADJTNAME}_${ADJTPVER}.debian.tar.xz
HNSRCARCHIVE=${HNSRCDIR}_${HNVER}.tar.gz
SETSERSRCARCHIVE=${SETSERSRCDIR}.tar.gz
ZIPTSRCARCHIVE=${ZIPTSRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/utils/${NAME}/v${SVER}"
#DL_URL="ftp://ftp.infradead.org/pub/${NAME}/v${SVER}"
MIRROR_DEB=${MIRROR_DEB:-ftp://ftp.debian.org}
ADJTDL_URL="${MIRROR_DEB}/debian/pool/main/a/${ADJTNAME}/${ADJTSRCARCHIVE}"
PADJTDL_URL="${MIRROR_DEB}/debian/pool/main/a/${ADJTNAME}/${PADJTSRCARCHIVE}"
HNDL_URL="${MIRROR_DEB}/debian/pool/main/h/${HNNAME}/${HNSRCARCHIVE}"
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
SETSERDL_URL="${MIRROR_SF}/${SETSERNAME}/${SETSERSRCARCHIVE}"
#ZIPTDL_URL="http://wolfpack.twu.net/users/wolfpack/${ZIPTSRCARCHIVE}"
MIRROR_SLK=${MIRROR_SLK:-ftp://ftp.slackware.com/pub/slackware}
ZIPTDL_URL="${MIRROR_SLK}/slackware-current/source/a/${NAME}/${ZIPTSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
test -r ${CWD}/${ADJTSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${ADJTDL_URL} || exit 1
#test -r ${CWD}/${PADJTSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PADJTDL_URL} || exit 1
test -r ${CWD}/${HNSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${HNDL_URL} || exit 1
test -r ${CWD}/${SETSERSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${SETSERDL_URL} || exit 1
test -r ${CWD}/${ZIPTSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${ZIPTDL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

tar -xvf ${CWD}/${ZIPTSRCARCHIVE} || exit 1

tar -xvf ${CWD}/bsdstrings.tar.gz || exit 1

tar -xvf ${CWD}/${HNSRCARCHIVE} || exit 1

tar -xvf ${CWD}/${ADJTSRCARCHIVE} || exit 1

tar -xvf ${CWD}/${SETSERSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

# Disabled login and init stuff from being built, as this is provided by 
# shadow and sysvinit
#
# /sbin/elvtune is not built, as configure says it only works with 2.2 and 
#   2.4 kernels

# This block is handled near the bottom of the script in symlink creation
# /bin/setterm -- now located in /usr/bin/setterm (might want to move and 
#   symlink ?)
# /bin/getopt -- same as setterm
# /usr/bin/readprofile -- now in /usr/sbin (might cause problems for some
#   scripts ?)
# /usr/bin/tunelp -- same as readprofile

# /usr/bin/clear -- not provided (part of ncurses package)
# /usr/bin/tput -- not provided (part of ncurses package)
# /usr/bin/setfdprm -- not provided (part of floppy package)

# You'll have to rebuild nfs-utils and kill these lines in the build
# script, as the mount code in util-linux-ng doesn't include the nfs
# helpers (and thus nfs mounts fail)
#  # Remove things that seem like bad ideas, and hope it all still works:
#  rm -f $PKG/sbin/*mount* $PKG/usr/man/man8/*mount.nfs*
#  rm -f $PKG/var/lib/nfs/*

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

( cd ${ZIPTSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/${ZIPTNAME}-1.4.0-llh.patch.gz | patch -p0 || exit 1
) || exit 1
( cd ${HNSRCDIR} || exit 1
  patch -p1 -E --backup --verbose -i ${SB_PATCHDIR}/${HNNAME}-rh.patch || exit 1
) || exit 1
#( cd ${ADJTSRCDIR} || exit 1
#  tar -xvf ${CWD}/${PADJTSRCARCHIVE} || exit 1
#) || exit 1
( cd ${SETSERSRCDIR} || exit 1
  zcat ${SB_PATCHDIR}/setserial-rc.serial.diff.gz | patch -E -p1 --verbose || exit 1
  zcat ${SB_PATCHDIR}/setserial-2.17-no-gcc-warnings.patch.gz | patch -E -p0 --verbose || exit 1
  zcat ${SB_PATCHDIR}/setserial-hayesesp.patch.gz | patch -E -p1 --verbose || exit 1
) || exit 1

sed -i \
  -e '/^Group=/aRuntimeDirectory=uuidd' \
  -e '/^Group=/aRuntimeDirectoryMode=2775' \
  misc-utils/uuidd.service.in || exit 1

unset LINGUAS

unset SB_PAMOPTS SB_SYSTEMDOPTS
[ "${SB_PAM}" = "YES" ] && export SB_PAMOPTS=yes
[ "${SB_SYSTEMD}" = "YES" ] && SB_SYSTEMDOPTS='--with-systemdsystemunitdir=/lib/systemd/system --with-systemd'

export ac_cv_header_security_pam_misc_h=${SB_PAMOPTS:-no}

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  sh ./autogen.sh || exit $?
fi

sed -i -e 's|${prefix}/${localstatedir}|${localstatedir}|g' configure || exit 1

CFLAGS="${SLKCFLAGS} -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64" \
export SUID_CFLAGS="-fpie"
export SUID_LDFLAGS="-pie -Wl,-z,relro -Wl,-z,now"
export DAEMON_CFLAGS="$SUID_CFLAGS"
export DAEMON_LDFLAGS="$SUID_LDFLAGS"
./configure \
  --prefix=/usr \
  --exec-prefix=/usr \
  --sbindir=/sbin \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/run \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --enable-agetty \
  --disable-chfn-chsh \
  --enable-eject \
  --enable-kill \
  --disable-last \
  --enable-mesg \
  --enable-raw \
  --enable-rename \
  --enable-reset \
  --disable-login \
  --disable-nologin \
  --disable-su \
  --disable-sulogin \
  --enable-schedutils \
  --enable-wall \
  --enable-partx \
  --enable-tunelp \
  --enable-write \
  --enable-use-tty-group \
  --disable-makeinstall-chown \
  --enable-libblkid \
  --enable-libuuid \
  ${SB_SYSTEMDOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux \
  --host=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} || exit 1

find ${PKG} -name '*.la' -delete

mkdir -p ${PKG}/lib${LIBDIRSUFFIX}
mv ${PKG}/usr/lib${LIBDIRSUFFIX}/*.so.* ${PKG}/lib${LIBDIRSUFFIX}/

for libname in lib{blkid,mount,smartcols,uuid} ;do
  reldir=$(echo /usr/lib${LIBDIRSUFFIX} | sed 's,/$,,;s,/[^/]\+,../,g')lib${LIBDIRSUFFIX}
  oldlink=$(readlink ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so)
  ln -sf ${reldir}/$(basename ${oldlink}) ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so || exit 1
done

# Build ziptool
( cd ${ZIPTSRCDIR} || exit 1
  sed -i -e "/^CFLAGS/s|-O2|${SLKCFLAGS} \$(LDFLAGS)|g" Makefile || exit 1
  make LINUX_SRC_DIR=/usr || exit 1
  cat ziptool > ${PKG}/sbin/ziptool || exit 1
  chmod 0755 ${PKG}/sbin/ziptool
  zcat ziptool.1.gz > ${PKG}/usr/man/man1/ziptool.1 || exit 1
  mkdir -p ${ZIPTDOCDIR}
  cp -a README ${ZIPTDOCDIR}/
) || exit 1

# Build bsdstrings
( cd bsdstrings || exit 1
  sed -i -e '/strings.c/s|$| $(LDFLAGS)|g' Makefile || exit 1
  make || exit 1
  cat strings > ${PKG}/usr/bin/strings || exit 1
  chmod 0755 ${PKG}/usr/bin/strings || exit 1
  cat strings.1 > ${PKG}/usr/man/man1/strings.1 || exit 1
) || exit 1

# Add just the hostname utilities from net-tools, so that anyone
# installing just the A series will not have a hostname (null):
( cd ${HNSRCDIR} || exit 1
  iconv -f iso-8859-1 -t utf-8 -o hostname.tmp hostname.1.fr
  mv hostname.tmp hostname.1.fr
  sed -i \
    -e "/^CFLAGS/s|-O2|${SLKCFLAGS}|g" \
    -e 's|/usr/share/man|/usr/man|g' \
    -e 's|-o root -g root||g' \
    Makefile || exit 1
  make || exit 1
  make BASEDIR=${PKG} install || exit 1
  ( cd ${PKG}/bin || exit 1
    ln -sf hostname dnsdomainname
    ln -sf hostname nisdomainname
    ln -sf hostname ypdomainname
    ln -sf hostname domainname
  ) || exit 1
  for man in de pt ;do
    hnmandir=${PKG}/usr/man/${man}/man1
    mkdir -p ${hnmandir}
    zcat ${CWD}/${HNNAME}.1.${man}.gz > ${hnmandir}/hostname.1 || exit 1
    ln -fs hostname.1 ${hnmandir}/dnsdomainname.1
    ln -fs hostname.1 ${hnmandir}/domainname.1
    ln -fs hostname.1 ${hnmandir}/ypdomainname.1
    ln -fs hostname.1 ${hnmandir}/nisdomainname.1
  done
) || exit 1

# Build adjtimex
( cd ${ADJTSRCDIR} || exit 1
  sed -i -e '/-lm/s|$| $(LDFLAGS)|g' Makefile.in || exit 1
  CFLAGS="${SLKCFLAGS}" ./configure --prefix=/usr || exit 1
  make || exit 1
  cat adjtimex > ${PKG}/sbin/adjtimex || exit 1
  chmod 0755 ${PKG}/sbin/adjtimex || exit 1
  cat adjtimex.8 > ${PKG}/usr/man/man8/adjtimex.8 || exit 1
  mkdir -p ${ADJTDOCDIR}
  cp -a COPYING COPYRIGHT README README.ru adjtimex.lsm \
        ${ADJTDOCDIR}/
) || exit 1

# Build setserial
( cd ${SETSERSRCDIR} || exit 1
  sed -i -e '/$(CFLAGS)/s|$| $(LDFLAGS)|g' Makefile.in || exit 1
  CFLAGS="${SLKCFLAGS}" ./configure --prefix=/usr || exit 1
  make || exit 1
  cat setserial > ${PKG}/sbin/setserial || exit 1
  chmod 0755 ${PKG}/sbin/setserial
  mkdir -p ${PKG}/etc/rc.d
  cat rc.serial > ${PKG}/etc/rc.d/rc.serial.new || exit 1
  cat serial.conf > ${PKG}/etc/serial.conf.new || exit 1
  cat setserial.8 > ${PKG}/usr/man/man8/setserial.8 || exit 1
  mkdir -p ${SETSERDOCDIR}
  cat README > ${SETSERDOCDIR}/README
) || exit 1

# These have always traditionally been available before /usr
# might be mounted:
( cd ${PKG}/usr/bin
  mv getopt setterm ${PKG}/bin
  cd ${PKG}/usr/bin
  ln -s ../../bin/getopt .
  ln -s ../../bin/setterm .
) || exit 1

# Now let's add some important symlinks :)
( cd ${PKG}/sbin
  ln -s ../bin/mount .
  ln -s ../bin/umount .
  ln -s ziptool jaztool
  ln -s hwclock clock
  cd ${PKG}/usr/sbin
  ln -s ../../sbin/cfdisk .
  ln -s ../../sbin/ctrlaltdel .
  ln -s ../../sbin/sfdisk .
  cd ${PKG}/usr/bin
  ln -s ../sbin/readprofile .
  ln -s ../sbin/tunelp .
  ln -s ../../bin/more .
  ln -s ../../sbin/raw .
  cd ${PKG}/usr/man/man1
  ln -s ziptool.1 jaztool.1
  cd ${PKG}/usr/man/man8
  ln -s hwclock.8 clock.8
) || exit 1

if [ "${SB_PAM}" = "YES" ] ;then
  mkdir -p ${PKG}/etc/pam.d ${PKG}/etc/security/console.apps ${PKG}/usr/man/man8
  for pamd in runuser runuser-l ; do
    install -m 644 ${SB_PAMD_DIR}/${pamd}.pamd \
      ${PKG}/etc/pam.d/${pamd}.new || exit 1
  done
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/run/uuidd

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ABOUT-NLS AUTHORS COPYING DEPRECATED NEWS README* TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${PKG}/usr/doc/ -type d -print0 | xargs -0 chmod 0755
find ${PKG}/usr/doc/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 100 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
 CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up groups.
if ! grep --quiet '^uuidd:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
    -g $(free_group_id) \
    uuidd 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^uuidd:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/run/uuidd:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "uuidd"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
      -d '/run/uuidd' \
      -u ${USER_ID} \
      -s /bin/false \
      -g uuidd \
      ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
    -c 'UUID generator helper daemon' \
    -u $(free_user_id) \
    -g uuidd \
    -s /bin/false \
    -d '/run/uuidd' \
    uuidd 2> /dev/null
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.serial.new:
if [ -r etc/rc.d/rc.serial -a -r etc/rc.d/rc.serial.new ]; then
  chmod --reference=etc/rc.d/rc.serial etc/rc.d/rc.serial.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions
${CHROOT}/bin/chmod 4755 /bin/mount
${CHROOT}/bin/chmod 4755 /bin/umount
${CHROOT} /bin/chown root:tty /usr/bin/wall
${CHROOT} /bin/chmod 2755 /usr/bin/wall
${CHROOT} /bin/chown root:tty /usr/bin/write
${CHROOT} /bin/chmod 2755 /usr/bin/write

${CHROOT} /bin/chown uuidd:uuidd /usr/sbin/uuidd
${CHROOT} /bin/chown uuidd:uuidd /run/uuidd
${CHROOT} /bin/chmod 2775 /run/uuidd

if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

if [ "${SB_MTABSYM}" = "YES" ] ;then
cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -e etc/mtab ] ;then
  ${CHROOT} rm -f /etc/mtab
  ${CHROOT} ln -s /proc/self/mounts /etc/mtab
fi
EOF
else
cat >> ${PKG}/install/doinst.sh <<'EOF'
${CHROOT} touch /etc/mtab
${CHROOT} /bin/chown root:root /etc/mtab
${CHROOT} /bin/chmod 0644 /etc/mtab
EOF
fi

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{pamd,patches}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/bsdstrings.tar.gz ${CWD}/${HNNAME}.1.*.gz \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/pamd/*.pamd \
    ${SBDIR}/pamd/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 4755 ./bin/umount ;
  /bin/chown root:tty ./usr/bin/wall ./usr/bin/write ;
  /bin/chmod 2755 ./usr/bin/wall ./usr/bin/write ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown uuidd.uuidd ./usr/sbin/uuidd ./run/uuidd ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n --prepend ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
