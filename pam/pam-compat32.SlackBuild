#!/bin/sh
#-- pam-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ pam.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.us.kernel.org/pub/linux/libs/pam/index.html

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=Linux-PAM
PNAME2=pam
NAME=pam-compat32
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.3.0}
RHVER=${RHVER:-0.99.11}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET32=${SLKTARGET32:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME2}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
RHSRCDIR=pam-redhat-${RHVER}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sign
RHSRCARCHIVE=${RHSRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/libs/pam/library"
RHDL_URL="https://fedorahosted.org/releases/p/a/pam-redhat/${RHSRCARCHIVE}"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${SRCARCHIVE} || exit 1
#test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SSRCARCHIVE}
test -r ${CWD}/${RHSRCARCHIVE} || ${DL_PROG} --no-check-certificate ${DL_OPTS} ${RHDL_URL} \
  || sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${RHSRCARCHIVE} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${RHSRCARCHIVE} || exit 1

chmod -R u+w,go+r-w,a-s .

mv pam-redhat-${RHVER}/* modules || exit 1

SB_MODULEDIR=lib${LIBDIRSUFFIX}/security

unset SB_AUTOGEN
if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|/lib /usr/lib|/lib /usr/lib /lib64 /usr/lib64|g' m4/libtool.m4

sed -i -e '/^SUBDIRS/s| doc | |g' Makefile.am || exit 1

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  autoreconf -ivf || exit $?
fi

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/lib${LIBDIRSUFFIX} \
  --includedir=/usr/include/security \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-dependency-tracking \
  --disable-rpath \
  --enable-nis \
  --disable-prelude \
  --disable-selinux \
  --disable-audit \
  --enable-isadir=../../${SB_MODULEDIR} \
  --build=${SLKTARGET32}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} -k || make -j${NJOBS} || make || exit $?
make install DESTDIR=${PKG} || exit 1

for phase in auth acct passwd session ; do
  ln -sf pam_unix.so ${PKG}/${SB_MODULEDIR}/pam_unix_${phase}.so
done

# Remove .la files and make new .so links -- this depends on the value
# of _libdir not changing, and *not* being /usr/lib.
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}
for lib in libpam libpamc libpam_misc ; do
 ( 
  cd ${PKG}/usr/lib${LIBDIRSUFFIX} || exit 1
  SONAME=$( basename ../../lib${LIBDIRSUFFIX}/${lib}.so.*.* | cut -d. -f3 )
  ln -sf ../../lib${LIBDIRSUFFIX}/${lib}.so.${SONAME} ${lib}.so
  ) || exit 1
  rm -f ${PKG}/lib${LIBDIRSUFFIX}/${lib}.so
  rm -f ${PKG}/lib${LIBDIRSUFFIX}/${lib}.la
done
rm -f ${PKG}/${SB_MODULEDIR}/*.la
rm -f ${PKG}/${SB_MODULEDIR}/*.la

if [ "${SB_TEST}" = "YES" ] ;then
  echo "====================TESTING========================="
(
  for dir in modules/pam_* ; do
    if [ -d ${dir} ] ; then
      [ ${dir} = "modules/pam_tally" ] && continue
      if ! ls -1 ${PKG}/${SB_MODULEDIR}/$(basename ${dir})*.so ; then
        echo ERROR $(basename ${dir}) did not build a module.
        exit 1
      fi
    fi
  done

  export RPM_OPT_FLAGS="${SLKCFLAGS}"

  zcat ${CWD}/dlopen.sh.gz > ./dlopen.sh || exit 1
  chmod 0755 ./dlopen.sh
  for module in ${PKG}/${SB_MODULEDIR}/pam*.so ; do
    if ! env LD_LIBRARY_PATH="${PKG}/lib${LIBDIRSUFFIX}${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" \
      ./dlopen.sh -ldl -lpam -L${PKG}/usr/lib${LIBDIRSUFFIX} ${module} ; then
      echo ERROR module: ${module} cannot be loaded.
      exit 1
    fi
  done
  echo "====================TESTING END====================="
) || exit 1
fi

rm -rf ${PKG}/usr/{bin,sbin,doc,include,libexec,man,info,share} ${PKG}/{etc,var,sbin}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
