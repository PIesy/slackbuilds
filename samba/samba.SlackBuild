#!/bin/sh
#-- samba for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ samba.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.samba.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=samba
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.3.1}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

grep --quiet '^wbpriv:' /etc/group && SB_HGROUP=1

PERLVENDORARCH=$(eval "$(perl -V:vendorarch)"; echo ${vendorarch})
PERLVENDORLIB=$(eval "$(perl -V:vendorlib)"; echo ${vendorlib})
PERLARCHLIB=$(eval "$(perl -V:archlib)"; echo ${archlib})
PERLVER=$(eval "$(perl -V:version)"; echo ${version})

# Set to YES to enable krb gssapi support
SB_KRB5=${SB_KRB5:-YES}
# Set to YES to enable pam support
SB_PAM=${SB_PAM:-YES}
# Set to YES to enable systemd session support instead consolekit/needs pam
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCDIR}.tar.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.samba.org/${NAME}/ftp/stable"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
  SLKCFLAGS="${SLKCFLAGS} -D_FILE_OFFSET_BITS=64"
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|HAVE_STROPTS_H|HAVE_STROPTS_HNOPE|g' lib/replace/system/network.h

sed -i \
  -e 's|syslog.target ||g' \
  -e '/PIDFile/s|/run/|/run/samba/|g' \
  -e '/EnvironmentFile/s|sysconfig|default|g' \
  packaging/systemd/*.service

sed -i \
  -e 's|libsystemd-daemon|libsystemd|g' \
  -e 's|systemd-daemon|systemd|g' \
  wscript ctdb/wscript lib/util/wscript_build || exit 1

sed -i -e "s|\$(WAF) build|\0 -v -j ${NJOBS}|g" Makefile || exit 1

_samba4_idmap_modules="idmap_ad,idmap_rid,idmap_adex,idmap_hash,idmap_tdb2"
_samba4_pdb_modules="pdb_tdbsam,pdb_ldap,pdb_ads,pdb_smbpasswd,pdb_wbc_sam,pdb_samba4"
_samba4_auth_modules="auth_unix,auth_wbc,auth_server,auth_netlogond,auth_script,auth_samba4"

_samba4_libraries="heimdal,!zlib,!popt,!talloc,!pytalloc,!pytalloc-util,!tevent,!pytevent,!tdb,!pytdb,!ldb,!pyldb"

unset SB_KRB5OPTS SB_PAMOPTS SB_SYSTEMDOPTS
[ "${SB_KRB5}" = "YES" ] && SB_KRB5OPTS='--with-system-mitkrb5 --without-ad-dc'
if [ "${SB_PAM}" = "YES" ] ;then
  SB_PAMOPTS="--with-pam --with-pammodulesdir=/lib${LIBDIRSUFFIX}/security"
else
  SB_PAMOPTS='--without-pam'
fi
[ "${SB_SYSTEMD}" = "YES" ] || SB_SYSTEMDOPTS='--without-systemd'

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
LDFLAGS+=" -Wl,-z,relro,-z,now" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --enable-fhs \
  --with-configdir=/etc/samba \
  --with-modulesdir=/usr/lib${LIBDIRSUFFIX}/samba \
  --with-piddir=/var/run/samba \
  --with-sockets-dir=/var/run/samba \
  --with-privatedir=/etc/samba/private \
  --localstatedir=/var \
  --with-lockdir=/var/cache/samba \
  --with-logfilebase=/var/log/samba \
  --enable-cups \
  --with-automount \
  --with-quotas \
  --with-syslog \
  --with-utmp \
  --with-winbind \
  --with-ldap \
  ${SB_KRB5OPTS} \
  --enable-gnutls \
  --disable-rpath-install \
  --with-shared-modules=${_samba4_idmap_modules},${_samba4_pdb_modules},${_samba4_auth_modules} \
  --bundled-libraries=${_samba4_libraries} \
  ${SB_PAMOPTS} \
  --without-pam_smbpass \
  ${SB_SYSTEMDOPTS} \
  --with-pie \
  --with-relro \
  --without-fam \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1

make install DESTDIR=${PKG} || exit $?

mkdir -p ${PKG}/usr/{sbin,bin}
mkdir -p ${PKG}/var/lib/samba
mkdir -p ${PKG}/etc/samba/private
mkdir -p ${PKG}/var/lib/samba/winbindd_privileged
mkdir -p ${PKG}/var/lib/samba/scripts
mkdir -p ${PKG}/var/lib/samba/sysvol
mkdir -p ${PKG}/var/log/samba/old
mkdir -p ${PKG}/var/cache/samba
mkdir -p ${PKG}/var/spool/samba
mkdir -p ${PKG}/usr/share/swat/using_samba
mkdir -p ${PKG}/var/run/samba
mkdir -p ${PKG}/var/run/winbindd
chmod 700 ${PKG}/etc/samba/private
chmod 0750 ${PKG}/var/lib/samba/winbindd_privileged
chmod 1777 ${PKG}/var/spool/samba

/sbin/ldconfig -N -n ${PKG}/usr/lib${LIBDIRSUFFIX}

mkdir -p ${PKG}/sbin
install -pm0755 examples/scripts/mount/mount.smbfs \
  ${PKG}/sbin/mount.smbfs || exit 1

ln -sf ../../sbin/mount.smbfs ${PKG}/usr/bin/smbmount || exit 1

install -m 0744 packaging/printing/smbprint ${PKG}/usr/bin/smbprint || exit 1

find ${PKG} -type f \( -name perllocal.pod -o -name .packlist \) -exec rm -f {} \;
find ${PKG} -type f -name '*.bs' -a -size 0 -exec rm -f {} ';'
rm -f ${PKG}/${PERLVENDORLIB}/wscript_build
rm -rf ${PKG}/${PERLVENDORLIB}/Parse/Yapp
chmod -R u+w ${PKG}/*

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a sample config file:
cat ${CWD}/smb.conf.default > ${PKG}/etc/samba/smb.conf-sample

echo 127.0.0.1 localhost > ${PKG}/etc/samba/lmhosts.new || exit 1

mkdir -p ${PKG}/etc/openldap/schema
install -m0644 examples/LDAP/samba.schema \
  ${PKG}/etc/openldap/schema/samba.schema || exit 1

if [ ! -r ${PKG}/usr/bin/smbget ]; then
  rm -f ${PKG}/usr/man/man1/smbget.1 ${PKG}/usr/share/man/man1/smbget.1
  rm -f ${PKG}/usr/share/swat/help/smbget.1.html
fi

rm -f ${PKG}/usr/man/man8/tdbbackup.8* ${PKG}/usr/share/man/man8/tdbbackup.8*
rm -f ${PKG}/usr/man/man8/tdbdump.8* ${PKG}/usr/share/man/man8/tdbdump.8*
rm -f ${PKG}/usr/man/man8/tdbtool.8* ${PKG}/usr/share/man/man8/tdbtool.8*

mkdir -p ${PKG}/etc/logrotate.d
cat > ${PKG}/etc/logrotate.d/samba.new <<'EOF'
/var/log/samba/* {
    notifempty
    olddir /var/log/samba/old
    missingok
    sharedscripts
    copytruncate
}
EOF

# We'll add rc.samba to the init directory, but chmod 644 so that it doesn't
# start by default:
mkdir -p ${PKG}/etc/rc.d
install -pm0644 ${CWD}/rc.samba ${PKG}/etc/rc.d/rc.samba.new || exit 1

rm -f ${PKG}/lib/systemd/system/*.service
mkdir -p ${PKG}/lib/systemd/system
install -pm0644 packaging/systemd/*.service ${PKG}/lib/systemd/system/ || exit 1

if [ "${SB_KRB5}" = "YES" ] ;then
  for i in nmb smb winbind ; do
    sed -i -e '/^EnvironmentFile=/aEnvironment=KRB5CCNAME=/run/samba/krb5cc_samba' \
      ${PKG}/lib/systemd/system/${i}.service || exit 1
  done
fi

mkdir -p ${PKG}/usr/lib/tmpfiles.d
install -m644 packaging/systemd/samba.conf.tmp \
  ${PKG}/usr/lib/tmpfiles.d/samba.conf || exit 1

echo 'd /run/winbindd  755 root root' \
  > ${PKG}/usr/lib/tmpfiles.d/winbindd.conf || exit 1

mkdir ${PKG}/etc/default
install -m 0644 packaging/systemd/samba.sysconfig \
  ${PKG}/etc/default/samba.new || exit 1

cat >> ${PKG}/etc/default/samba.new <<EOF
# Set to YES to load samba AD
SAMBA=NO
# Set to YES to load winbind
WINBIND=YES
EOF

# NetworkManager online/offline script
mkdir -p ${PKG}/etc/NetworkManager/dispatcher.d/
install -m 0755 packaging/NetworkManager/30-winbind-systemd \
  ${PKG}/etc/NetworkManager/dispatcher.d/30-winbind || exir 1

if [ "${SB_PAM}" = "YES" ] ;then
  mkdir -p ${PKG}/etc/security
  install -m 0644 ${CWD}/pam_winbind.conf \
    ${PKG}/etc/security/pam_winbind.conf.new || exit 1
fi

# PAM related stuff we don't use:
rm -rf ${PKG}/usr/share/locale
rm -f ${PKG}/usr/man/man8/pam* ${PKG}/usr/share/man/man8/pam*

# Add a documentation directory:
mkdir -p ${DOCDIR}/htmldocs
cp -a \
  COPYING* MAINTAINERS Manifest PFIF.txt README* \
  Read-Manifest-Now Roadmap WHATSNEW.txt examples \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
ln -sf ../../../share/samba/swat/help ${DOCDIR}/htmldocs
ln -sf ../../share/swat/using_samba ${DOCDIR}/using_samba
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^wbpriv:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
    -g $(free_group_id) \
    wbpriv
fi

${CHROOT} /bin/chown root.wbpriv /var/lib/samba/winbindd_privileged

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}.new:
if [ -r etc/rc.d/rc.${NAME} -a -r etc/rc.d/rc.${NAME}.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME} etc/rc.d/rc.${NAME}.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*.conf.default ${CWD}/rc.* ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod 1777 ./var/spool/samba ; 
  [ \"${SB_HGROUP}\" = 1 ] && /bin/chown root.wbpriv ./var/lib/samba/winbindd_privileged ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
