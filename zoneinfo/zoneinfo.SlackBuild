#!/bin/sh
#-- zoneinfo for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ zoneinfo.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# https://www.iana.org/time-zones

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=zoneinfo
PKG=${PKG:-${TMP}/package-${NAME}}

# tzdata
VERSION=${VERSION:-2016j}
# tzcode
VERC=${VERC:-2016j}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to build java timezone
SB_JAVA=${SB_JAVA:-YES}
# Set to YES to support systemd (/etc/localtime is a symlink)
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=tzdata${VERSION}.tar.gz
SRCARCHIVEC=tzcode${VERC}.tar.gz
SRCARCHIVEJ=javazic.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.iana.org/time-zones/repository/releases"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible, or in /tmp
for file in ${SRCARCHIVE} ${SRCARCHIVEC} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
if [ "${SB_JAVA}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVEJ} || sh ${CWD}/${FEDORADIST} tzdata ${FEDORABRANCH} ${SRCARCHIVEJ} || exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
mkdir -p ${SRCDIR}
cd ${SRCDIR} || exit 1
for file in ${SRCARCHIVE} ${SRCARCHIVEC} ;do
  tar -xvf ${CWD}/${file} || exit 1
done

if [ "${SB_JAVA}" = "YES" ] ;then
  mkdir javazic
  tar -xvf ${CWD}/${SRCARCHIVEJ} -C javazic || exit 1
fi

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

export NLS=1
export LFLAGS="${LDFLAGS}"

zic=""

cp yearistype.sh yearistype || exit 1
chmod 644 *
chmod 755 javazic yearistype

make CFLAGS="${SLKCFLAGS} -std=gnu99" MANDIR=/usr/man || exit 1
make install DESTDIR=${PKG} MANDIR=/usr/man || exit 1

rm -rf ${PKG}/usr/share/zoneinfo-leaps

if [ "${SB_JAVA}" = "YES" ] ;then
  chmod 755 javazic
  ( cd javazic
    mv sun rht
    find . -type f -name '*.java' -print0 \
      | xargs -0 -- sed -i -e 's:sun\.tools\.:rht.tools.:g' \
                           -e 's:sun\.util\.:rht.util.:g' || exit 1

    javac -source 1.5 -target 1.5 -classpath . `find . -name \*.java`
  ) || exit $?
  
  java -classpath javazic/ rht.tools.javazic.Main -V ${VERSION} \
    -d javazi \
    africa antarctica asia australasia europe northamerica southamerica \
    pacificnew etcetera backward \
    javazic/tzdata_jdk/gmt javazic/tzdata_jdk/jdk11_backward || exit 1

  cp -prd javazi ${PKG}/usr/share/javazi || exit 1
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Install some scripts to help select a timezone:
mkdir -p ${PKG}/var/log/setup
install -pm0755 ${CWD}/timezone-scripts/setup.timeconfig \
  ${PKG}/var/log/setup/ || exit 1

mkdir -p ${PKG}/usr/sbin
if [ "${SB_SYSTEMD}" = "YES" ] ;then
  install -pm0755 ${CWD}/timezone-scripts/timeconfig.systemd ${PKG}/usr/sbin/timeconfig || exit 1
else
  install -pm0755 ${CWD}/timezone-scripts/timeconfig ${PKG}/usr/sbin/ || exit 1
fi

# Don't forget to add the /usr/share/zoneinfo/localtime -> /etc/localtime symlink! :)
rm -f ${PKG}/usr/share/zoneinfo/localtime
( cd ${PKG}/usr/share/zoneinfo ; ln -sf /etc/localtime . )

mkdir -p ${PKG}/etc
# This is already hard-coded into doinst.sh (like it'll be there anyway ;-):
rm -f ${PKG}/etc/localtime

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README Theory *.htm *.jpg ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required


if [ "${SB_SYSTEMD}" = "YES" ] ;then
  cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh

# Fix existing /etc/localtime:
if [ ! -L etc/localtime -a -L etc/localtime-copied-from ]; then
  rm -f etc/localtime
  chroot . /bin/mv etc/localtime-copied-from etc/localtime
fi
# Add the default timezone in /etc, if none exists:
if [ ! -r etc/localtime ]; then
  ( cd etc ; rm -rf localtime localtime-copied-from )
  ( cd etc ; ln -sf /usr/share/zoneinfo/Factory localtime-copied-from )
  chroot . /bin/mv etc/localtime-copied-from etc/localtime
fi
# Add the default link in /usr/share/zoneinfo, if none exists:
if [ ! -L usr/share/zoneinfo/localtime ]; then
  ( cd usr/share/zoneinfo ; rm -rf localtime )
  ( cd usr/share/zoneinfo ; ln -sf /etc/localtime localtime )
fi
EOF
else
  cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh

# Fix existing old style /etc/localtime symlink:
if [ -L etc/localtime -a ! -r etc/localtime-copied-from ]; then
  mv etc/localtime etc/localtime-copied-from
  chroot . /bin/cp etc/localtime-copied-from etc/localtime
fi
# Add the default timezone in /etc, if none exists:
if [ ! -r etc/localtime ]; then
  ( cd etc ; rm -rf localtime localtime-copied-from )
  ( cd etc ; ln -sf /usr/share/zoneinfo/Factory localtime-copied-from )
  chroot . /bin/cp etc/localtime-copied-from etc/localtime
fi
# Add the default link in /usr/share/zoneinfo, if none exists:
if [ ! -L usr/share/zoneinfo/localtime ]; then
  ( cd usr/share/zoneinfo ; rm -rf localtime )
  ( cd usr/share/zoneinfo ; ln -sf /etc/localtime localtime )
fi
# Make sure /etc/localtime is updated:
chroot . /bin/cp etc/localtime-copied-from etc/localtime
EOF
fi

cat >> ${PKG}/install/doinst.sh <<EOF
( cd usr/share/zoneinfo ; rm -rf timeconfig )
( cd usr/share/zoneinfo ; ln -sf /usr/sbin/timeconfig timeconfig )
### Make the rest of the symbolic links in the zoneinfo database:
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{patches,timezone-scripts/parts}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${FEDORADIST} ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0755 ${CWD}/timezone-scripts/*timeconfig* \
    ${SBDIR}/timezone-scripts/
  install -m0755 ${CWD}/timezone-scripts/parts/0? \
    ${SBDIR}/timezone-scripts/parts/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
