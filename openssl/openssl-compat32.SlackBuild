#!/bin/sh
#-- openssl-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ openssl-compat32.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.openssl.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=openssl-compat32
NAME2=openssl-solibs-compat32
PNAME=openssl
PKGF=${PKGF:-${TMP}/package-${NAME}}
PKG=${PKGF}/${NAME}
PKG2=${PKGF}/${NAME2}

VERSION=${VERSION:-1.1.0c}
SSLSOVER=$(echo ${VERSION} | cut -d. -f1-2)
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(linux32 uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET32=${SLKTARGET32:-i586}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
DOCDIR2=${PKG2}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}
PKGNAME2=${NAME2}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

# Set to YES to enable test
SB_TEST=${SB_TEST:-NO}
# Number of threads to test
SB_THREADS=${SB_THREAD:-1}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www.openssl.org/source"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O3 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O3 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
  SSEOPT="no-sse2"
fi
LIBDIRSUFFIX=""
ARCHOPTS=""
export CC="gcc -m32"

if [ "${LDFLAGS}" ] ; then
  SLKLDFLAGS="${LDFLAGS}"
  unset LDFLAGS
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKGF} ]; then
  # Clean up a previous build
  rm -rf ${PKGF}
fi
mkdir -p ${PKG} ${PKG2}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i \
  -e '/linux-/s|-O3|\\$(SLKCFLAGS)|g' \
  -e '/linux-/s|-fomit-frame-pointer||g' \
  Configure || exit 1

# These are the known patent issues with OpenSSL:
# name   #         expires
# MDC-2: 4,908,861  2007-03-13, included.  :-)
# IDEA:  5,214,703  2010-05-25, not included.
# RC5:   5,724,428  2015-03-03, not included.

# So that ls has the right field counts for parsing...
export LC_ALL=C

export BINUTILS_LD=bfd

export SLKCFLAGS="${SLKCFLAGS} -Wa,--noexecstack -DPURIFY"

linux32 \
./config \
 --prefix=/usr \
 --openssldir=/etc/ssl \
 --system-ciphers-file=/etc/crypto-policies/back-ends/openssl.config \
 zlib \
 enable-camellia \
 enable-seed \
 enable-rfc3779 \
 enable-sctp \
 enable-cms \
 enable-md2 \
 enable-ssl3 \
 enable-ssl3-method \
 no-weak-ssl-ciphers \
 no-idea \
 no-rc5 ${SSEOPT} ${ARCHOPTS} \
 shared ${SLKCFLAGS} ${SLKLDFLAGS} || exit $?

make -j${NJOBS} depend || make depend || exit $?

make -j${NJOBS} || make || exit $?

if [ "${SB_TEST}" = "YES" ] ;then
echo '===========TESTING=============='
zcat ${CWD}/openssl-thread-test.c.gz > openssl-thread-test.c || exit 1
# Verify that what was compiled actually works.
( LD_LIBRARY_PATH="$(pwd)${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
  export LD_LIBRARY_PATH
  #make -C test apps tests || exit 1
  /sbin/ldconfig -l ./libssl.so.*.*.* ./libcrypto.so.*.*.*
  ${CC} -o openssl-thread-test \
    -I./include \
    ${SLKCFLAGS} \
    openssl-thread-test.c \
    ${SLKLDFLAGS} -L. \
    -lssl -lcrypto \
    -lpthread -lz -ldl || exit 1
  ./openssl-thread-test --threads ${SB_THREADS} || exit 1
) || exit 1
echo '=========TESTING ENDED==========='
fi

patch -p1 -E --backup --verbose -i ${SB_PATCHDIR}/openssl-1.1.0-ca-dir-slk.patch || exit 1

make DIRS="crypto ssl engines" install_sw DESTDIR=${PKG} || exit $?

chmod 0755 ${PKG}/usr/lib*/*.so.* ${PKG}/usr/lib${LIBDIRSUFFIX}/engines*/*.so

# Determine which arch opensslconf.h is going to try to #include.
case "${ARCH32}" in
  i[3-6]86)  OARCH=i386
             ;;
    s390)    OARCH=s390
             ;;
    x86_64)  OARCH=x86_64
             ;;
esac

zcat ${CWD}/opensslconf-new-warning.h.gz \
  > opensslconf-${OARCH}.h || exit 1
cat ${PKG}/usr/include/openssl/opensslconf.h \
  >> opensslconf-${OARCH}.h || exit 1

rm -rf ${PKG}/usr/include/openssl/*
install -m0644 opensslconf-${OARCH}.h ${PKG}/usr/include/openssl/ || exit 1

rm -rf ${PKG}/usr/{bin,share} ${PKG}/usr/{info,man} ${PKG}/etc

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

chmod 755 ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig

( cd ${PKG}/usr/lib${LIBDIRSUFFIX}
  rename so.${SSLSOVER} so.${VERSION} *.so.${SSLSOVER}
  /sbin/ldconfig -l * 2> /dev/null
) || exit 1

mkdir -p ${PKG}/lib${LIBDIRSUFFIX}
# Move the ncurses libraries into /lib, since they're important:
for libname in libcrypto libssl ;do
  mv ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so.* ${PKG}/lib${LIBDIRSUFFIX}/
  reldir=$(echo /usr/lib${LIBDIRSUFFIX} | sed 's,/$,,;s,/[^/]\+,../,g')lib${LIBDIRSUFFIX}
  oldlink=$(readlink ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so)
  ln -sf ${reldir}/$(basename ${oldlink}) ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so || exit 1
done

# Make runtime package:
mkdir -p ${PKG2}/lib${LIBDIRSUFFIX}
cp -a ${PKG}/lib${LIBDIRSUFFIX}/lib*.so.*.*.* ${PKG2}/lib${LIBDIRSUFFIX}/ || exit 1
( cd ${PKG2}/lib${LIBDIRSUFFIX} ; /sbin/ldconfig -l * ) || exit 1

mkdir -p ${PKG}/install ${PKG2}/install
cat ${CWD}/slack-desc.${NAME} > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required
cat ${CWD}/slack-desc.${NAME2} > ${PKG2}/install/slack-desc

for dir in ${PKG} ${PKG2} ; do
sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${dir}/install/slack-desc
done

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc*-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  eval ${ROOTCOMMANDS2}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKGF} ]; then
    rm -rf ${PKGF} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
