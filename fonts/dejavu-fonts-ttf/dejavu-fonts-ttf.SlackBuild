#!/bin/sh
#-- dejavu-ttf for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ dejavu-ttf.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://dejavu.sourceforge.net/

# Requires:
# perl-io-string
# unicode-ucd

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

PNAME=dejavu-fonts
NAME=${PNAME}-ttf
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.37}
ARCH=noarch
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/fonts/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - _ )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES if want to build from source (needs fontforge, perl-font-ttf, unicode-ucd)
SB_FF=${SB_FF:-YES}
[ -x /usr/bin/fontforge ] || SB_FF=NO

TTFDIR=usr/share/fonts/TTF

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ "${SB_FF}" = "YES" ] ;then
  SRCDIR=${PNAME}-${VERSION}
else
  SRCDIR=${NAME}-${VERSION}
fi
LSRCDIR=dejavu-lgc-fonts-ttf-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
LSRCARCHIVE=${LSRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/dejavu"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || exit 1
if [ "${SB_FF}" != "YES" ] ;then
  test -r ${CWD}/${LSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${LSRCARCHIVE} || exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}/${TTFDIR}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ "${SB_FF}" = "YES" ] ;then

  [ -e /usr/share/unicode/ucd/Blocks.txt ] || exit 1
  [ -e /usr/share/unicode/ucd/UnicodeData.txt ] || exit 1

  echo "Building from source..."

  sed -i \
    -e '/^BUILDDIR/s|=.*$|= ttf|g' \
    -e '/^BLOCKS/s|=.*$|= /usr/share/unicode/ucd/Blocks.txt|g' \
    -e '/^UNICODEDATA/s|=.*$|= /usr/share/unicode/ucd/UnicodeData.txt|g' \
    -e '/^FC-LANG/s|=.*$| =|g' \
    Makefile || exit 1

  make -j${NJOBS} || make || exit $?

else

  tar -xvf ${CWD}/${LSRCARCHIVE} || exit 1
  mv ${LSRCDIR}/ttf/*.ttf ttf/ || exit 1
  mv ${LSRCDIR}/fontconfig/*.conf fontconfig/ || exit 1

fi

install -m0644 ttf/*.ttf ${PKG}/${TTFDIR}/ || exit 1

mkdir -p ${PKG}/usr/share/fontconfig/conf.avail
mkdir -p ${PKG}/etc/fonts/conf.d
( cd fontconfig
  for file in * ; do
    cp -a ${file} ${PKG}/usr/share/fontconfig/conf.avail/
    ( cd ${PKG}/etc/fonts/conf.d ; ln -sf ../../../usr/share/fontconfig/conf.avail/${file} . ) || exit 1
  done
) || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS BUGS LICENSE NEWS README *.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
xz -9 ${DOCDIR}/status.txt
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Update the X font indexes:
if [ -x usr/bin/mkfontscale -a -x usr/bin/mkfontdir ]; then
  \${CHROOT} /usr/bin/mkfontscale /${TTFDIR#\/} >/dev/null 2>&1
  \${CHROOT} /usr/bin/mkfontdir /${TTFDIR#\/} >/dev/null 2>&1
fi
if [ -x usr/bin/update-fccache ]; then
  \${CHROOT} /usr/bin/update-fccache
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -pm0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${SBDIR}/
  install -pm0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -pm0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
