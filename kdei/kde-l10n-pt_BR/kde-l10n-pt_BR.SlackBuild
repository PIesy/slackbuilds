#!/bin/sh
#-- kde-l10n-pt_BR for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ kde-l10n-pt_BR.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.kde.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

KDELANG=pt_BR
NAME=kde-l10n-${KDELANG}
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-15.08.3}
VER2=${VER2:-15.04.3}
VER3=${VER3:-14.12.3}
VER4=${VER4:-4.14.3}
ARCH=noarch
SLKTARGET=${SLKTARGET:-i586}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kdei/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-tgz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCDIR2=${NAME}-${VER2}
SRCDIR3=${NAME}-${VER3}
SRCDIR4=${NAME}-${VER4}
SRCARCHIVE=${SRCDIR}.tar.xz
SRCARCHIVE2=${SRCDIR2}.tar.xz
SRCARCHIVE3=${SRCDIR3}.tar.xz
SRCARCHIVE4=${SRCDIR4}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KDE=${MIRROR_KDE:-http://download.kde.org}
DL_URL="${MIRROR_KDE}/stable/applications/${VERSION}/src/kde-l10n/${SRCARCHIVE}"
DL_URL2="${MIRROR_KDE}/stable/applications/${VER2}/src/kde-l10n/${SRCARCHIVE2}"
DL_URL3="${MIRROR_KDE}/stable/applications/${VER3}/src/kde-l10n/${SRCARCHIVE3}"
DL_URL4="${MIRROR_KDE}/stable/${VER4}/src/kde-l10n/${SRCARCHIVE4}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1
test -r ${CWD}/${SRCARCHIVE3} || ${DL_PROG} ${DL_OPTS} ${DL_URL3} || exit 1
test -r ${CWD}/${SRCARCHIVE4} || ${DL_PROG} ${DL_OPTS} ${DL_URL4} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "$(uname -m)" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../KDE.options ] && source ../KDE.options
[ -r /etc/profile.d/kde4.sh ] && source /etc/profile.d/kde4.sh

_kde4_prefix=${_kde4_prefix:-/usr}
_kde4_sysconfdir=${_kde4_sysconfdir:-/etc/kde}
_kde4_libdir=${_kde4_libdir:-/usr/lib${LIBDIRSUFFIX}}
_kde4_libexecdir=${_kde4_libexecdir:-/usr/libexec/kde4}
_kde4_datadir=${_kde4_datadir:-/usr/share}
_kde4_sharedir=${_kde4_sharedir:-/usr/share}
_kde4_iconsdir=${_kde4_iconsdir:-${_kde4_sharedir}/icons}
_kde4_configdir=${_kde4_configdir:-${_kde4_sharedir}/config}
_kde4_appsdir=${_kde4_appsdir:-${_kde4_sharedir}/kde4/apps}
_kde4_docdir=${_kde4_docdir:-${_kde4_prefix}/doc}
_kde4_bindir=${_kde4_bindir=:-${_kde4_prefix}/bin}
_kde4_sbindir=${_kde4_sbindir:-${_kde4_prefix}/sbin}
_kde4_includedir=${_kde4_includedir:-${_kde4_prefix}/include/kde4}
_kde4_buildtype=${_kde4_buildtype:-release}
_kde4_macros_api=${_kde4_macros_api:-2}

_qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
_qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
_qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS):${PATH}" ; export PATH

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

tar -xvf ${CWD}/${SRCARCHIVE2} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE3} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE4} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1

mkdir tempmove
mv ${SRCDIR4}/* tempmove/ || exit 1
mkdir -p ${SRCDIR4}/4/${KDELANG}
mv tempmove/* ${SRCDIR4}/4/${KDELANG}/ || exit 1

rm -f */4/${KDELANG}/messages/applications/dolphin.po

# Sync only missing files from old kde4 applications
rsync -r --ignore-existing ${SRCDIR4}/4/ 4/ || exit 1
rsync -r --ignore-existing ${SRCDIR3}/4/ 4/ || exit 1
rsync -r --ignore-existing ${SRCDIR2}/4/ 4/ || exit 1

# No kde5 for the time
sed -i -e '/add_subdirectory(5)/d' CMakeLists.txt || exit 1

# Add missing directories
for i in kdepimlibs kdepim-runtime kdepim ;do
  echo "add_subdirectory(${i})" >> 4/${KDELANG}/messages/CMakeLists.txt || exit 1
done
for i in kdepimlibs kdepim ;do
  echo "add_subdirectory(${i})" >> 4/${KDELANG}/docs/CMakeLists.txt || exit 1
done

echo 'add_subdirectory(kdeedu)' >> 4/${KDELANG}/data/CMakeLists.txt || exit 1

if [ -e 4/${KDELANG}/docs/kdenetwork/CMakeLists.txt ] ; then
  sed -i -e 's/add_subdirectory( *korn *)/#add_subdirectory(korn)/g' -e 's/add_subdirectory( *kmail *)/#add_subdirectory(kmail)/g' -e 's/add_subdirectory( *knode *)/#add_subdirectory(knode)/g' 4/${KDELANG}/docs/kdenetwork/CMakeLists.txt
fi
rm -f 4/${KDELANG}/messages/kdepim/kpilot.po
if [ -e 4/${KDELANG}/docs/kdepim/CMakeLists.txt ] ; then
  sed -i -e 's/add_subdirectory( *kpilot *)/#add_subdirectory(kpilot)/g' 4/${KDELANG}/docs/kdepim/CMakeLists.txt
fi

mkdir -p build
( cd build || exit 1

  cmake .. \
    -DCMAKE_INSTALL_PREFIX:PATH=${_kde4_prefix} \
    -DSYSCONF_INSTALL_DIR:PATH=${_kde4_sysconfdir} \
    -DINCLUDE_INSTALL_DIR:PATH=${_kde4_includedir} \
    -DLIB_INSTALL_DIR:PATH=${_kde4_libdir} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DLIBEXEC_INSTALL_DIR:PATH=${_kde4_libexecdir} \
    -DDATA_INSTALL_DIR:PATH=${_kde4_appsdir} \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE=${_kde4_buildtype} \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    || exit 1

  make -j${NJOBS} || make || exit 1
  make install/fast DESTDIR=${PKG} || exit 1

) || exit 1

ln -s dolphin4.mo ${PKG}/usr/share/locale/${KDELANG}/LC_MESSAGES/dolphin.mo

rm -rf ${PKG}/${_kde4_docdir}/HTML/*/aktion
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/flashkard
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/kdvi
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/kedit
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/kmathtool
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/krec
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/ksirc
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/ksirtet
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/ksmiletris
rm -rf ${PKG}/${_kde4_docdir}/HTML/*/ksplashml

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING ChangeLog LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# HTML docs
HTML_DIR=$(kde4-config --expandvars --install html || echo /usr/doc/HTML )
if [ -d ${PKG}/${HTML_DIR} ]; then
  for lang_dir in ${PKG}/${HTML_DIR}/* ; do
    if [ -d ${lang_dir} ]; then
      # replace absolute symlinks with relative ones
      ( cd ${lang_dir}
        for i in *; do
          [ -d ${i} -a -L ${i}/common ] && rm -f ${i}/common && ln -sf ../common ${i}/common
        done
      )
    fi
  done
fi

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required | sed -e "s|_VERSION_|${VERSION}|g" \
  > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
