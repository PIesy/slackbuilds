#!/bin/sh
#-- ncurses-compat32 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ ncurses-compat32.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://invisible-island.net/ncurses/ncurses.html

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=ncurses-compat32
PNAME=ncurses
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-6.0}
# Set to 0 if no rollup patch, else set patch date, eg.: 20081025
PVER=${PVER:-20160910}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH32=${ARCH32:-$(uname -m)}
else
  ARCH32=${ARCH32:-i686}
fi
SLKTARGET32=${SLKTARGET32:-i586}
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${PNAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH32}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

DOWNDIR=${CWD}/patches/updates

SRCDIR=${PNAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.sig
PSRCARCHIVE=${SRCDIR}-${PVER}-patch.sh.bz2
PSRCARCHIVES=${PNAME}-${VERSION}-updates.lst

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${PNAME}"
DL_URLB="ftp://invisible-island.net/${PNAME}"
PDL_URL="ftp://invisible-island.net/${PNAME}/${VERSION}"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file} || exit 1
done
mkdir -p ${DOWNDIR}
( cd ${DOWNDIR} || exit 1
  if [ "${PVER}" -ne 0 ] ; then
    test -r ${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${PSRCARCHIVE} || exit 1
    test -r ${PSRCARCHIVE}.asc || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${PSRCARCHIVE}.asc || exit 1
  fi
  test -r ${CWD}/${PSRCARCHIVES} || \
    lynx -dump ${PDL_URL} | awk '{print $2}' | \
    grep "${PNAME}-${VERSION}-2.......\\.patch.gz" | \
    sed "/${PNAME}-${VERSION}-${PVER}/d;/\.asc$/d" | \
    sed "s|${PDL_URL}/||g" > ${CWD}/${PSRCARCHIVES} || exit 1
  for file in $(< ${CWD}/${PSRCARCHIVES}) ;do
    pver2=$(echo ${file} | cut -d- -f3 | cut -d. -f1)
    if [ "${pver2}" -gt "${PVER}" ] ;then
      test -r ${file} || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${file} || exit 1
      test -r ${file}.asc || ${DL_PROG} ${DL_OPTS} ${PDL_URL}/${file}.asc || exit 1
    fi
  done
) || exit $?

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH32}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH32} -mtune=i686"
                 ;;
  esac
fi
LIBDIRSUFFIX=""
export CC="gcc -m32"
export CXX="g++ -m32"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:${PKG_CONFIG_PATH}"

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

export PKG_CONFIG_LIBDIR=/usr/lib${LIBDIRSUFFIX}

SB_CONFIGURE() {
CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
../configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --without-gpm \
  --disable-termcap \
  --with-normal \
  --with-shared \
  --enable-symlinks \
  --without-debug \
  --without-profile \
  --without-ada \
  --with-ticlib=tic \
  --enable-hard-tabs \
  --enable-xmc-glitch \
  --enable-pc-files \
  --with-termlib=tinfo \
  --with-terminfo-dirs=/etc/terminfo:/usr/share/terminfo:/lib/terminfo \
  --with-pkg-config-libdir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
  --build=${SLKTARGET32}-${SLKDTARGET}-linux $@
}

abi5_options="--with-chtype=long"

for abi in 5 6; do
  for char in narrowc widec; do
    mkdir ${char}${abi}
    ( cd ${char}${abi} || exit 1
      ln -s ../configure .

      SB_OPTIONS="$( echo --with-abi-version=${abi}
        [ ${abi} = 5 ] && echo ${abi5_options}
        [ ${char} = widec ] && echo --enable-widec )"
      SB_CONFIGURE ${SB_OPTIONS} --without-progs || exit $?
      make -j${NJOBS} libs || make libs || exit $?

    ) || exit $?
  done
done

make -C narrowc5 DESTDIR=${PKG} install.libs || exit $?
make -C widec5 DESTDIR=${PKG} install.libs || exit $?
make -C narrowc6 DESTDIR=${PKG} install.libs || exit $?
make -C widec6 DESTDIR=${PKG} install.libs || exit $?

rm -rf ${PKG}/usr/include ${PKG}/usr/bin ${PKG}/usr/share ${PKG}/usr/man

chmod 0644 ${PKG}/usr/lib${LIBDIRSUFFIX}/*.a
chmod 0755 ${PKG}/usr/lib${LIBDIRSUFFIX}/*.so.*

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig/*_g.pc

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

rm -f ${PKG}/usr/lib${LIBDIRSUFFIX}/libcurses{,w}.so

mkdir -p ${PKG}/lib${LIBDIRSUFFIX}
# Move the ncurses libraries into /lib, since they're important:
for libname in libncurses libncursesw libtinfo ;do
  mv ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so.* ${PKG}/lib${LIBDIRSUFFIX}/
  reldir=$(echo /usr/lib${LIBDIRSUFFIX} | sed 's,/$,,;s,/[^/]\+,../,g')lib${LIBDIRSUFFIX}
  oldlink=$(readlink ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so)
  ln -sf ${reldir}/$(basename ${oldlink}) ${PKG}/usr/lib${LIBDIRSUFFIX}/${libname}.so || exit 1
done

# don't require -ltinfo when linking with --no-add-needed
for l in ${PKG}/usr/lib${LIBDIRSUFFIX}/libncurses{,w}.so; do
  soname=$(basename $(readlink ${l}))
  rm -f ${l}
  echo "INPUT(${soname} -ltinfo)" > ${l}
done

echo "INPUT(-lncurses)" > ${PKG}/usr/lib${LIBDIRSUFFIX}/libcurses.so
echo "INPUT(-lncursesw)" > ${PKG}/usr/lib${LIBDIRSUFFIX}/libcursesw.so

echo "INPUT(-ltinfo)" > ${PKG}/usr/lib${LIBDIRSUFFIX}/libtermcap.so

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc-compat32 > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc-compat32 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
