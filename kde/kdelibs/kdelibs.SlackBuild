#!/bin/sh
#-- kdelibs for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ kdelibs.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.kde.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=kdelibs
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-4.14.25}
KAPPVER=${KAPPVER:-16.08.2}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/kde/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to build API docs
SB_APIDOCS=${SB_APIDOCS:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SB_SITE=${SB_SITE:-slackware.com}

if [ -d /etc/pki/tls ] ;then
  SB_CABDIR=/etc/pki/tls
else
  SB_CABDIR=/etc/ssl
fi

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KDE=${MIRROR_KDE:-http://download.kde.org}
DL_URL="${MIRROR_KDE}/stable/applications/${KAPPVER}/src/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

# Set the config option variables if they are not already set:
[ -r ../KDE.options ] && source ../KDE.options

_kde4_prefix=${_kde4_prefix:-/usr}
_kde4_sysconfdir=${_kde4_sysconfdir:-/etc}
_kde4_libdir=${_kde4_libdir:-/usr/lib${LIBDIRSUFFIX}}
_kde4_libexecdir=${_kde4_libexecdir:-/usr/libexec/kde4}
_kde4_datadir=${_kde4_datadir:-/usr/share}
_kde4_sharedir=${_kde4_sharedir:-/usr/share}
_kde4_iconsdir=${_kde4_iconsdir:-${_kde4_sharedir}/icons}
_kde4_configdir=${_kde4_configdir:-${_kde4_sharedir}/config}
_kde4_appsdir=${_kde4_appsdir:-${_kde4_sharedir}/kde4/apps}
_kde4_docdir=${_kde4_docdir:-${_kde4_prefix}/doc}
_kde4_htmldir=${_kde4_htmldir:-${_kde4_docdir}/HTML}
_kde4_bindir=${_kde4_bindir=:-${_kde4_prefix}/bin}
_kde4_sbindir=${_kde4_sbindir:-${_kde4_prefix}/sbin}
_kde4_includedir=${_kde4_includedir:-${_kde4_prefix}/include/kde4}
_kde4_buildtype=${_kde4_buildtype:-release}
_kde4_macros_api=${_kde4_macros_api:-2}

_qt4_prefix=${_qt4_prefix:-/usr/lib${LIBDIRSUFFIX}/qt4}
_qt4_bindir=${_qt4_bindir:-${_qt4_prefix}/bin}
_qt4_qmake=${_qt4_qmake:-${_qt4_bindir}/qmake}

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

unset QTDIR QTINC QTLIB
export QTDIR=$(${_qt4_qmake} -query QT_INSTALL_PREFIX)
PATH="$(${_qt4_qmake} -query QT_INSTALL_BINS)${PATH:+:${PATH}}" ; export PATH

[ -z "${KDEDIRS}" ] && KDEDIRS="/usr" && export KDEDIRS

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# Add Slackware to custom dists (fix some web user agent recognizing scripts)
if [ "${SLKDIST}" = "Slackware" ] ;then
  export KDELIBS_SLK_DIST="(${SLKDIST})"
else
  export KDELIBS_SLK_DIST="(${SLKDIST} Slackware)"
fi

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# add release version
sed -i -e "s|@@VERSION_RELEASE@@|${VERSION}-${BUILD}|" kio/kio/kprotocolmanager.cpp || exit 1

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export FFLAGS="${SLKCFLAGS}"

mkdir -p build
( cd build || exit 1

  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_INSTALL_PREFIX:PATH=${_kde4_prefix} \
    -DSYSCONF_INSTALL_DIR:PATH=${_kde4_sysconfdir} \
    -DINCLUDE_INSTALL_DIR:PATH=${_kde4_includedir} \
    -DLIB_INSTALL_DIR:PATH=${_kde4_libdir} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DLIBEXEC_INSTALL_DIR:PATH=${_kde4_libexecdir} \
    -DDATA_INSTALL_DIR:PATH=${_kde4_appsdir} \
    -DHTML_INSTALL_DIR:PATH=${_kde4_htmldir} \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE=${_kde4_buildtype} \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DKDE_DEFAULT_HOME='.kde' \
    -DKDE_DISTRIBUTION_TEXT="${VERSION}-${BUILD} ${SLKDIST}" \
    -DSITE=\"${SB_SITE}\" \
    -DKIO_NO_SOPRANO:BOOL=ON \
    -DWITH_FAM:BOOL=OFF \
    -DWITH_SOLID_UDISKS2:BOOL=ON \
    -DHUPNP_ENABLED:BOOL=ON \
    -DKAUTH_BACKEND:STRING="PolkitQt-1" \
    || exit 1

  make -j${NJOBS} || make || exit 1

) || exit 1

if [ "${SB_APIDOCS}" = "YES" ] ;then
  export QTDOCDIR=$(pkg-config --variable=docdir Qt)
  doc/api/doxygen.sh .
fi

make install/fast -C build DESTDIR=${PKG} || exit 1

if [ "${_kde4_sysconfdir}" != "/etc" ] && [ -d ${PKG}/${_kde4_sysconfdir}/dbus-1 ] ;then
  mv ${PKG}/${_kde4_sysconfdir}/dbus-1 ${PKG}/etc/ || exit 1
fi

mkdir -p ${PKG}/${_kde4_sysconfdir}/xdg/autostart

mv ${PKG}/${_kde4_sysconfdir}/xdg/menus/applications.menu \
   ${PKG}/${_kde4_sysconfdir}/xdg/menus/kde4-applications.menu || exit 1

mkdir -p ${PKG}/${_kde4_libdir}/kconf_update_bin
mkdir -p ${PKG}/${_kde4_libdir}/kde4/plugins/{gui_platform,styles}

if [ -e ${PKG}/${_kde4_appsdir}/kssl/ca-bundle.crt ] ;then
  rm -f ${PKG}/${_kde4_appsdir}/kssl/ca-bundle.crt
  ln -sf ../../../../../${SB_CABDIR#\/}/certs/ca-bundle.crt \
    ${PKG}/${_kde4_appsdir}/kssl/ca-bundle.crt
fi

# move devel symlinks
mkdir -p ${PKG}/${_kde4_libdir}/kde4/devel
( cd ${PKG}/${_kde4_libdir} || exit 1
for i in lib*.so
do
  case "$i" in
    libkdeinit4_*.so)
      ;;
    ## FIXME/TODO: imo, should leave everything except for known-conflicts -- Rex
    *)
      linktarget=$(readlink "$i")
      rm -f "$i"
      ln -sf "../../${linktarget}" "kde4/devel/${i}"
      ;;
  esac
done
)

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/etc/profile.d
cat > ${PKG}/etc/profile.d/kde4.sh <<'EOF'
## http://kde.ground.cz/tiki-index.php?page=Environment+Variables
## for possible entries here

## Make sure KDEDIRS is set
[ -z "${KDEDIRS}" ] && KDEDIRS="/usr" && export KDEDIRS

## When/if using prelinking, avoids (some) use of kdeinit
if [ -f /etc/default/prelink ]; then
  if grep -qs '^PRELINKING=yes' /etc/default/prelink ; then
    [ -z "${KDE_IS_PRELINKED}" ] && KDE_IS_PRELINKED=1 && export KDE_IS_PRELINKED
  fi
fi

## adjust QT_PLUGIN_PATH
for libdir in /usr/lib64 /usr/lib ; do
  if [ -n "${QT_PLUGIN_PATH}" ]; then
    if ! echo ${QT_PLUGIN_PATH} | /bin/grep -q ${libdir}/kde4/plugins ; then
      QT_PLUGIN_PATH=${QT_PLUGIN_PATH}:${libdir}/kde4/plugins && export QT_PLUGIN_PATH
    fi
  else
    QT_PLUGIN_PATH=${libdir}/kde4/plugins && export QT_PLUGIN_PATH
  fi
done
EOF
cat > ${PKG}/etc/profile.d/kde4.csh <<'EOF'
## http://kde.ground.cz/tiki-index.php?page=Environment+Variables
## for possible entries here

## Make sure KDEDIRS is set
if ( ! $?KDEDIRS ) setenv KDEDIRS /usr

## When/if using prelinking, avoids use of kdeinit
if ( -f /etc/default/prelink ) then
   set PRELINKING = `grep "^PRELINKING=" /etc/default/prelink | cut -d"=" -f2`
   if ( "$PRELINKING" == "yes" )  then
     if ( ! $?KDE_IS_PRELINKED ) setenv KDE_IS_PRELINKED 1
   endif
   unset PRELINKING
endif

## adjust QT_PLUGIN_PATH
foreach libdir ( /usr/lib64 /usr/lib )
  if ( $?QT_PLUGIN_PATH ) then
    if ( "${QT_PLUGIN_PATH}" !~ *${libdir}/kde4/plugins* ) then
      setenv QT_PLUGIN_PATH ${QT_PLUGIN_PATH}:${libdir}/kde4/plugins
    endif
  else
    setenv QT_PLUGIN_PATH ${libdir}/kde4/plugins
  endif
end
EOF


cat > ${PKG}/etc/profile.d/qt-graphicssystem.sh <<'EOF'
if [ -z "${QT_GRAPHICSSYSTEM_CHECKED}" -a -z "${QT_GRAPHICSSYSTEM}" ] ; then
  QT_GRAPHICSSYSTEM_CHECKED=1
  export QT_GRAPHICSSYSTEM_CHECKED

  # workarond cirrus/qt bug, http://bugzilla.redhat.com/810161
  if ( /sbin/lspci | grep -qi "VGA compatible controller: Cirrus Logic GD 5446" ) ; then
    QT_GRAPHICSSYSTEM=native
    export QT_GRAPHICSSYSTEM
  fi
fi
EOF
cat > ${PKG}/etc/profile.d/qt-graphicssystem.csh <<'EOF'
if ( ! $?QT_GRAPHICSSYSTEM_CHECKED ) then
  setenv QT_GRAPHICSSYSTEM_CHECKED 1 
  if ( ! $?QT_GRAPHICSSYSTEM ) then
    # workarond cirrus/qt bug, http://bugzilla.redhat.com/810161
    /sbin/lspci | grep -qi "VGA compatible controller: Cirrus Logic GD 5446" && setenv QT_GRAPHICSSYSTEM native
  endif
endif
EOF

chmod 0755 ${PKG}/etc/profile.d/*.*sh || exit 1

mkdir -p ${PKG}/${_kde4_bindir}
install -p doc/api/doxygen.sh ${PKG}/${_kde4_bindir}/kde4-doxygen.sh || exit 1

mkdir -p ${PKG}/usr/lib/rpm/macros.d
cat > ${PKG}/usr/lib/rpm/macros.d/macros.kde-apps <<EOF
%_kde4_prefix /usr
%_kde4_sysconfdir ${_kde4_sysconfdir}
%_kde4_libdir %{_libdir}
%_kde4_libexecdir %{_libexecdir}/kde4
%_kde4_datadir %{_datadir}
%_kde4_sharedir %{_datadir}
%_kde4_iconsdir %{_kde4_sharedir}/icons
%_kde4_configdir %{_kde4_sharedir}/config
%_kde4_appsdir %{_kde4_sharedir}/kde4/apps
%_kde4_docdir %{_kde4_prefix}/doc
%_kde4_htmldir %{_kde4_docdir}/HTML
%_kde4_bindir %{_kde4_prefix}/bin
%_kde4_sbindir %{_kde4_prefix}/sbin
%_kde4_includedir %{_kde4_prefix}/include/kde4
%_kde4_buildtype ${_kde4_buildtype}
%_kde4_macros_api ${_kde4_macros_api}
EOF

cat >> ${PKG}/usr/lib/rpm/macros.d/macros.kde4 <<'EOF'

# api = 2
# initial try, including only items that vary from defaults
#

%cmake_kde4 \
  QTDIR="%{_qt4_prefix}" ; export QTDIR ; \
  PATH="%{_qt4_bindir}:$PATH" ; export PATH ; \
  CFLAGS="${CFLAGS:-%optflags}" ; export CFLAGS ; \
  CXXFLAGS="${CXXFLAGS:-%optflags}" ; export CXXFLAGS ; \
  FFLAGS="${FFLAGS:-%optflags}" ; export FFLAGS ; \
  %{__cmake} \\\
    -DCMAKE_BUILD_TYPE=%{_kde4_buildtype} \\\
    -DBUILD_SHARED_LIBS:BOOL=ON \\\
    -DCMAKE_INSTALL_PREFIX:PATH=%{_kde4_prefix} \\\
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \\\
    -DDATA_INSTALL_DIR:PATH=%{_kde4_appsdir} \\\
    -DINCLUDE_INSTALL_DIR:PATH=%{_kde4_includedir} \\\
    -DLIB_INSTALL_DIR:PATH=%{_kde4_libdir} \\\
    -DLIBEXEC_INSTALL_DIR:PATH=%{_kde4_libexecdir} \\\
    -DSYSCONF_INSTALL_DIR:PATH=%{_kde4_sysconfdir} \\\
%if "%{?_lib}" == "lib64" \
     %{?_cmake_lib_suffix64} \\\
%endif \
     %{?_cmake_skip_rpath}
EOF

if [ "${SB_APIDOCS}" = "YES" ] ;then
  mkdir -p ${PKG}/${_kde4_docdir}/HTML/en
  cp -prf kdelibs-${version}-apidocs ${PKG}/${_kde4_htmldir}/en/kdelibs4-apidocs
fi

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING.LIB README TODO KDE4PORTING.html ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create ${_kde4_iconsdir}/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache ${_kde4_iconsdir}/hicolor >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chmod u+s ./${_kde4_libexecdir}/kpac_dhcp_helper ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
