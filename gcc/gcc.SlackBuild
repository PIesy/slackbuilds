#!/bin/sh
# GCC package build script (written by volkerdi@slackware.com)
#
# Suggested usage: $ gcc.SlackBuild 2>&1 | tee build.log

# Copyright 2003, 2004  Slackware Linux, Inc., Concord, California, USA
# Copyright 2005, 2006, 2007  Patrick J. Volkerding, Sebeka, Minnesota, USA
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# http://gcc.gnu.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES to remove libtool .la files
SB_RMLA=${SB_RMLA:-NO}
# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

# Temporary build location.  This should *NOT* be a directory
# path a non-root user could create later...
TMP=${TMP:-/tmp/gcc-$(mcookie)}
CWD=$(pwd)

NAME=gcc
NAME32=gcc-compat32
VERSION=${VERSION:-6.2.0}

# Set to 0 to enable release instead snapshot
CHECKOUT=${CHECKOUT:-20161208}
RVER=$(echo ${VERSION} | cut -d- -f1)
SVER=$(echo ${RVER} | cut -d. -f1)
ARCH=${ARCH:-x86_64}
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
  export SB_MULTILIB=NO
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
TARGET=${TARGET:-${SLKTARGET}-${SLKDTARGET}-linux}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}

# Set to YES to enable multilib build
SB_MULTILIB=${SB_MULTILIB:-YES}
# Set to YES to enable test
SB_TEST=${SB_TEST:-NO}

if [ -x /usr/bin/python ] ;then
  PYABI=$(python -c 'import sys; sys.stdout.write(sys.version[:3])')
else
  PYABI=2.7
fi

DATE=$(LC_ALL=C date +%d-%b-%Y)

if [ "${CHECKOUT}" != "0" ] ;then
  SRCDIR=${NAME}-${SVER}-${CHECKOUT}
else
  SRCDIR=${NAME}-${VERSION}
fi
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sig

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}/${NAME}-${VERSION}/${SRCARCHIVE}"
SDL_URL="${MIRROR_GNU}/${NAME}/${NAME}-${VERSION}/${SSRCARCHIVE}"
MIRROR_GCC=${MIRROR_GCC:-ftp://gcc.gnu.org/pub/gcc}
DL_URLB="${MIRROR_GCC}/snapshots/${SVER}-${CHECKOUT}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || ${DL_PROG} ${DL_OPTS} ${DL_URLB} || exit 1
if [ "${CHECKOUT}" = "0" ] ;then
  test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${SDL_URL} || exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

case "${ARCH}" in
  i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686 -pipe"
               ;;
  x86_64)      SLKCFLAGS="-O2 -fPIC"
               ;;
  s390|*)      SLKCFLAGS="-O2"
               ;;
esac
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  LIB_ARCH=amd64
else
  LIBDIRSUFFIX=""
  LIB_ARCH=i386
fi
unset CFLAGS CXXFLAGS LDFLAGS CPPFLAGS

# This is the main DESTDIR target:
PKG=${PKG:-${TMP}/package-${NAME}}
PKG1=${PKG}/${NAME}
PKGNAME1=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
# These are the directories to build other packages in:
PKG2=${PKG}/${NAME}-g++
PKGNAME2=${NAME}-g++-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG3=${PKG}/${NAME}-gfortran
PKGNAME3=${NAME}-gfortran-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG4=${PKG}/${NAME}-gnat
PKGNAME4=${NAME}-gnat-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG5=${PKG}/${NAME}-objc
PKGNAME5=${NAME}-objc-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG6=${PKG}/${NAME}-go
PKGNAME6=${NAME}-go-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

PKG1_32=${PKG}/${NAME}-compat32
PKGNAME1_32=${NAME32}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
# These are the directories to build other packages in:
PKG2_32=${PKG}/${NAME}-g++-compat32
PKGNAME2_32=${NAME}-g++-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG3_32=${PKG}/${NAME}-gfortran-compat32
PKGNAME3_32=${NAME}-gfortran-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG4_32=${PKG}/${NAME}-gnat-compat32
PKGNAME4_32=${NAME}-gnat-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG5_32=${PKG}/${NAME}-objc-compat32
PKGNAME5_32=${NAME}-objc-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}
PKG6_32=${PKG}/${NAME}-go-compat32
PKGNAME6_32=${NAME}-go-compat32-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DOCDIR=${PKG1}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG1}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
# Clear the build locations:
if [ -d ${PKG} ]; then
  rm -rf ${PKG}
fi
mkdir -p $PKG{1,2,3,4,5,6}/usr/doc/gcc-${VERSION}

export SB_DESCDIR=${CWD}/descs

mkdir -p $PKG{1,2,3,4,5,6}/install
# Install the descriptions:
( cd ${SB_DESCDIR} || exit 1
  cat slack-desc.gcc > ${PKG1}/install/slack-desc
  cat slack-desc.gcc-g++ > ${PKG2}/install/slack-desc
  cat slack-desc.gcc-gfortran > ${PKG3}/install/slack-desc
  cat slack-desc.gcc-gnat > ${PKG4}/install/slack-desc
  cat slack-desc.gcc-objc > ${PKG5}/install/slack-desc
  cat slack-desc.gcc-go > ${PKG6}/install/slack-desc
  sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
        $PKG{1,2,3,4,5,6}/install/slack-desc

  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p $PKG{1_32,2_32,3_32,4_32,5_32,6_32}/install
    cat slack-desc.gcc-compat32 > ${PKG1_32}/install/slack-desc
    cat slack-desc.gcc-g++-compat32 > ${PKG2_32}/install/slack-desc
    cat slack-desc.gcc-gfortran-compat32 > ${PKG3_32}/install/slack-desc
    cat slack-desc.gcc-gnat-compat32 > ${PKG4_32}/install/slack-desc
    cat slack-desc.gcc-objc-compat32 > ${PKG5_32}/install/slack-desc
    cat slack-desc.gcc-go-compat32 > ${PKG6_32}/install/slack-desc
    sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
      $PKG{1_32,2_32,3_32,4_32,5_32,6_32}/install/slack-desc
  fi
)

cd ${TMP} || exit 1
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

# Fix perms/owners
chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

# This testcase doesn't compile.
rm -rf libjava/testsuite/libjava.lang/PR35020*

echo "${RVER}" > gcc/BASE-VER
echo "${SLKDIST} ${RVER}-${BUILD}" > gcc/DEV-PHASE

cp -a libstdc++-v3/config/cpu/i{4,3}86/atomicity.h

./contrib/gcc_update --touch

LC_ALL=C sed -i -e 's/\xa0/ /' gcc/doc/options.texi

export CONFIG_SITE=NONE

export BINUTILS_LD=bfd

# install docs
mkdir -p ${DOCDIR}
# Only the most recent ChangeLog... shouldn't be too big. :)
cp ${CWD}/README.hardening .
cp -a \
  COPYING COPYING.LIB \
  LAST_UPDATED MAINTAINERS NEWS README* ${CWD}/ChangeLog.SB \
${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
[ -r ChangeLog.tree-ssa ] && head -n 1000 ChangeLog.tree-ssa > ${DOCDIR}/ChangeLog.tree-ssa

mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/gcc
( cd gcc
  cp -a \
    ABOUT* COPYING* LANG* ONEWS README* \
  ${PKG1}/usr/doc/gcc-${VERSION}/gcc
       
  mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/gcc/fortran
  ( cd fortran
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG3}/usr/doc/gcc-${VERSION}/gcc/fortran/ChangeLog
  )

  mkdir -p ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada
  ( cd ada
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada/ChangeLog
    [ -r ChangeLog.tree-ssa ] && head -n 1000 ChangeLog.tree-ssa \
      > ${PKG4}/usr/doc/gcc-${VERSION}/gcc/ada/ChangeLog.tree-ssa
  )

  mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/gcc/objc
  ( cd objc
    cp -a \
      README \
    ${PKG5}/usr/doc/gcc-${VERSION}/gcc/objc
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG5}/usr/doc/gcc-${VERSION}/gcc/objc/ChangeLog
  )

  mkdir -p ${PKG6}/usr/doc/gcc-${VERSION}/gcc/go
  ( cd go
    cp -a \
      README \
    ${PKG6}/usr/doc/gcc-${VERSION}/gcc/go
    [ -r ChangeLog ] && head -n 1000 ChangeLog \
      > ${PKG6}/usr/doc/gcc-${VERSION}/gcc/go/ChangeLog
  )

)

mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/libgfortran
( cd libgfortran
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG3}/usr/doc/gcc-${VERSION}/libgfortran/ChangeLog
)

mkdir -p ${PKG3}/usr/doc/gcc-${VERSION}/libada
( cd libada
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG3}/usr/doc/gcc-${VERSION}/libada/ChangeLog
)

mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libgomp
( cd libgomp
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG1}/usr/doc/gcc-${VERSION}/libgomp/ChangeLog
)

mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libatomic
( cd libatomic
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG1}/usr/doc/gcc-${VERSION}/libatomic/ChangeLog
)

mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libitm
( cd libitm
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG1}/usr/doc/gcc-${VERSION}/libitm/ChangeLog
)

mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libsanitizer
( cd libsanitizer
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG1}/usr/doc/gcc-${VERSION}/libsanitizer/ChangeLog
)

mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libcilkrts
( cd libcilkrts
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG1}/usr/doc/gcc-${VERSION}/libcilkrts/ChangeLog
)

mkdir -p ${PKG1}/usr/doc/gcc-${VERSION}/libmpx
( cd libmpx
  [ -r libmpx ] && head -n 1000 ChangeLog \
    > ${PKG1}/usr/doc/gcc-${VERSION}/libmpx/ChangeLog
)

mkdir -p ${PKG5}/usr/doc/gcc-${VERSION}/libobjc
( cd libobjc
  cp -a \
    README README.threads THREADS \
  ${PKG5}/usr/doc/gcc-${VERSION}/libobjc
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG5}/usr/doc/gcc-${VERSION}/libobjc/ChangeLog
)

mkdir -p ${PKG6}/usr/doc/gcc-${VERSION}/libgo
( cd libgo
  cp -a \
    README \
  ${PKG6}/usr/doc/gcc-${VERSION}/libgo
  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG6}/usr/doc/gcc-${VERSION}/libgo/ChangeLog
)

mkdir -p ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3
( cd libstdc++-v3
  cp -a \
    README \
  ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3

  [ -r ChangeLog ] && head -n 1000 ChangeLog \
    > ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3/ChangeLog

  cp -a \
    doc/html/ \
  ${PKG2}/usr/doc/gcc-${VERSION}/libstdc++-v3/
)
# install docs END

mkdir gcc.build.lnx

# build gcc
( cd gcc.build.lnx;
  rm -f errortest

  set +e

  trap errortest ERR
  errortest() {
    local exit_status=${1:-$?}
    echo ${exit_status} > ./errortest
  }

  # If enough people need "treelang" support for it may be considered.
  #  --enable-languages=ada,c,c++,fortran,java,objc,treelang
  # I think it's incorrect to include this option (as it'll end up set
  # to i486 on x86 platforms), and we want to tune the binary structure
  # for i686, as that's where almost all of the optimization speedups
  # are to be found.
  # Correct me if my take on this is wrong.
  #  --with-cpu=${ARCH} 

  if [ "${ARCH}" = "x86_64" ]; then
    if [ "${SB_MULTILIB}" = "YES" ] ;then
      GCC_ARCHOPTS="--enable-multilib --with-arch_32=????"
    else
      GCC_ARCHOPTS="--disable-multilib"
    fi
  else
    GCC_ARCHOPTS="--with-arch=${ARCH}"
  fi

  CFLAGS="${SLKCFLAGS}" \
  CXXFLAGS="${SLKCFLAGS}" \
  ${SB_SROOT}/configure --prefix=/usr \
     --libdir=/usr/lib${LIBDIRSUFFIX} \
     --infodir=/usr/info \
     --mandir=/usr/man \
     --disable-werror \
     --enable-shared \
     --enable-bootstrap \
     --enable-languages=ada,c,c++,fortran,objc,obj-c++,lto,go \
     --enable-threads=posix \
     --enable-checking=release \
     --with-system-zlib \
     --enable-lto \
     --enable-plugin \
     --with-isl \
     --enable-libmpx \
     --with-python-dir=/lib${LIBDIRSUFFIX}/python${PYABI}/site-packages \
     --enable-__cxa_atexit \
     --enable-default-ssp \
     --disable-libunwind-exceptions \
     --disable-libstdcxx-pch \
     --enable-objc-gc \
     --disable-libgcj \
     --with-gnu-ld \
     --with-linker-hash-style=gnu \
     --enable-libstdcxx-dual-abi \
     --with-default-libstdcxx-abi=gcc4-compatible \
     --enable-gnu-indirect-function \
     --verbose \
     ${GCC_ARCHOPTS} \
     --build=${TARGET} \
     --target=${TARGET} \
     --host=${TARGET}

  # Start the build:

  # Include all debugging info (for now):
  make -j${NJOBS} bootstrap

  ( cd gcc
    make -j${NJOBS} gnatlib GNATLIBCFLAGS="${SLKCFLAGS}"
    # This wants a shared -ladd2line?
    #make gnatlib-shared
    
    CFLAGS="${SLKCFLAGS}" \
    CXXFLAGS="${SLKCFLAGS}" \
    make -j${NJOBS} gnattools
  )
  make -C ${TARGET}/libstdc++-v3
  make -j${NJOBS} info || true

  # Set SB_TEST=YES to run the tests
  if [ "${SB_TEST}" = "YES" ] ;then 
    echo '====================TESTING========================='
    make -j${NJOBS} check || true
    echo '====================TESTING END====================='
  fi

) 2>&1 | tee ${SB_SROOT}/gcc.build.log

if [ -f gcc.build.lnx/errortest ] ;then
  error=$(tail -n1 gcc.build.lnx/errortest)
  echo
  echo
  echo "Exit with error ${error}. See ${SB_SROOT}/gcc.build.log"
  exit ${error}
fi

( cd gcc.build.lnx || exit 1
  make install DESTDIR=${PKG1}
) || exit $?

export FULLPATH=/usr/lib${LIBDIRSUFFIX}/gcc/${TARGET}/${VERSION}
export FULLPATH32=${FULLPATH}/32
export FULLEPATH=/usr/libexec/gcc/${TARGET}/${VERSION}

abs2rel(){
  perl -e 'use File::Spec; print File::Spec->abs2rel($ARGV[0], $ARGV[1])' "$1" "$2"
}

getsoname(){
  objdump -p "$1" | grep SONAME | awk '{print $2}' | head -n1
}

( cd gcc.build.lnx || exit 1

# Be sure the "specs" file is installed.  There was an issue with that on 4.1.1:
if [ ! -r ${PKG1}/${FULLPATH}/specs ]; then
  cat stage1-gcc/specs > ${PKG1}/${FULLPATH}/specs
fi

# Make our 64bit gcc look for 32bit gcc binaries in ./32 subdirectory:
if [ "${ARCH}" = "x86_64" ] && [ "${SB_MULTILIB}" != "YES" ] ; then
  sed -i 's#;.\(:../lib !m64 m32;\)$#;32\1#' \
    ${PKG1}/${FULLPATH}/specs
fi

#  make ada.install-common DESTDIR=${PKG1}
#  make install-gnatlib DESTDIR=${PKG1}
  make -i install-info DESTDIR=${PKG1}

  chmod 755 ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgcc_s.so.1

  #zcat ${CWD}/libgcc_post_upgrade.c.gz > libgcc_post_upgrade.c
  #mkdir -p ${PKG1}/usr/sbin
  #( set -o xtrace
    #gcc -static -Os ${LDFLAGS} libgcc_post_upgrade.c -o ${PKG1}/usr/sbin/libgcc_post_upgrade || exit 1
  #) || exit 1

  # This is provided by binutils, so delete it here:
  rm -f ${PKG1}/usr/lib*/libiberty.a
  rm -f ${PKG1}/usr/lib*/libssp*
  rm -f ${PKG1}/usr/lib*/libvtv*

  chmod 755 ${PKG1}/usr/lib*/libgcc_s.so*

  # Fix .la files
  if [ "${ARCH}" = "x86_64" ]; then
    sed -i \
      -e "s|lib${LIBDIRSUFFIX}/\.\./lib${LIBDIRSUFFIX}|lib${LIBDIRSUFFIX}|g" \
      ${PKG1}/usr/lib*/*.la
    sed -i -e "s|lib${LIBDIRSUFFIX}/\.\./lib|lib|g" ${PKG1}/usr/lib/*.la
  fi

  [ "${SB_RMLA}" = "YES" ] && find ${PKG1} -name '*.la' | xargs rm -f

  # Strip out unneeded stuff from the libraries and binaries:
  ( cd ${PKG1}
    find . | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
    find . -name "lib*\.a" -exec strip -g "{}" \;
  )

  # Fix stuff up:
  ( cd ${PKG1}/usr/info ; rm dir ; gzip -9 * )
  ( cd ${PKG1}
    mkdir -p lib
    cd lib
    ln -sf /usr/bin/cpp .
  )
  ( cd ${PKG1}/usr/bin
    mv g++ g++-gcc-${VERSION}
    mv gcc gcc-${VERSION}
    mv ${TARGET}-gfortran gfortran-gcc-${VERSION}
    ln -sf g++-gcc-${VERSION} g++
    ln -sf g++-gcc-${VERSION} g++-${VERSION}
    ln -sf gcc-${VERSION} gcc
    ln -sf g++ c++
    ln -sf gcc cc
    ln -sf gcc-${VERSION} ${TARGET}-gcc
    ln -sf gcc-${VERSION} ${TARGET}-gcc-${VERSION}
    ln -sf gcc-ar ${TARGET}-gcc-ar
    ln -sf gcc-nm ${TARGET}-gcc-nm
    ln -sf gcc-ranlib ${TARGET}-gcc-ranlib
    ln -sf g++-gcc-${VERSION} ${TARGET}-c++
    ln -sf g++-gcc-${VERSION} ${TARGET}-g++
    ln -sf gfortran-gcc-${VERSION} gfortran
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-gfortran
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-gfortran-${VERSION}
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-g95
    ln -sf gfortran g95
    ln -sf gfortran f95
    ln -sf gfortran-gcc-${VERSION} ${TARGET}-g77
    ln -sf gfortran g77
    ln -sf gfortran f77
  )

  ( cd ${PKG1}/usr/lib${LIBDIRSUFFIX}

    reldir="$(abs2rel /usr/lib${LIBDIRSUFFIX} ${FULLPATH})"
    ln -sf ${reldir}/$(getsoname libgcc_s.so.*) ${PKG1}/${FULLPATH}/libgcc_s.so
    ln -sf ${reldir}/$(getsoname libobjc.so.*) ${PKG1}/${FULLPATH}/libobjc.so
    ln -sf ${reldir}/$(getsoname libobjc_gc.so.*) ${PKG1}/${FULLPATH}/libobjc_gc.so
    ln -sf ${reldir}/$(getsoname libstdc++.so.*) ${PKG1}/${FULLPATH}/libstdc++.so
    ln -sf ${reldir}/$(getsoname libgfortran.so.*) ${PKG1}/${FULLPATH}/libgfortran.so
    ln -sf ${reldir}/$(getsoname libgomp.so.*) ${PKG1}/${FULLPATH}/libgomp.so

    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libubsan.so.*) | sed 's,^.*libu,libu,') )" > ${PKG1}/${FULLPATH}/libubsan.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libcilkrts.so.*) | sed 's,^.*libc,libc,') )" > ${PKG1}/${FULLPATH}/libcilkrts.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libmpx.so.*) | sed 's,^.*libc,libc,') )" > ${PKG1}/${FULLPATH}/libmpx.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libmpxwrappers.so.*) | sed 's,^.*libc,libc,') )" > ${PKG1}/${FULLPATH}/libmpxwrappers.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libgo.so.*) | sed 's,^.*libg,libg,')' )" > ${PKG1}/${FULLPATH}/libgo.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libquadmath.so.*) | sed 's,^.*libq,libq,') )" > ${PKG1}/${FULLPATH}/libquadmath.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libitm.so.*) | sed 's,^.*libi,libi,') )" > ${PKG1}/${FULLPATH}/libitm.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libatomic.so.*) | sed 's,^.*libi,libi,') )" > ${PKG1}/${FULLPATH}/libatomic.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libasan.so.*) | sed 's,^.*liba,liba,') )" > ${PKG1}/${FULLPATH}/libasan.so
    mv libasan_preinit.o ${PKG1}/${FULLPATH}/libasan_preinit.o
    rm -f ${PKG1}/${FULLPATH}/libtsan.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname libtsan.so.*) | sed 's,^.*libt,libt,') )" > ${PKG1}/${FULLPATH}/libtsan.so
    rm -f ${PKG1}/${FULLPATH}/libtsan.so
    echo "INPUT ( /usr/lib${LIBDIRSUFFIX}/$( echo $(getsoname liblsan.so.*) | sed 's,^.*libl,libl,') )" > ${PKG1}/${FULLPATH}/liblsan.so

    mv -f libstdc++.*a ${PKG1}/${FULLPATH}/
    mv -f libsupc++.*a ${PKG1}/${FULLPATH}/
    mv -f libgfortran.*a ${PKG1}/${FULLPATH}/
    mv -f libobjc.*a ${PKG1}/${FULLPATH}/
    mv -f libobjc_gc.*a ${PKG1}/${FULLPATH}/
    mv -f libgomp.*a ${PKG1}/${FULLPATH}/
    mv -f libubsan.*a ${PKG1}/${FULLPATH}/
    mv -f libcilkrts.*a ${PKG1}/${FULLPATH}/
    mv -f libmpx.*a ${PKG1}/${FULLPATH}/
    mv -f libmpxwrappers.*a ${PKG1}/${FULLPATH}/
    mv -f libquadmath.*a ${PKG1}/${FULLPATH}/
    mv -f libitm.*a ${PKG1}/${FULLPATH}/
    mv -f libatomic.*a ${PKG1}/${FULLPATH}/
    mv -f libasan.*a ${PKG1}/${FULLPATH}/
    mv -f libtsan.*a ${PKG1}/${FULLPATH}/
    mv -f liblsan.*a ${PKG1}/${FULLPATH}/
    mv -f libgo.*a ${PKG1}/${FULLPATH}/
    mv -f libgobegin.*a ${PKG1}/${FULLPATH}/
    mv -f libgolibbegin.*a ${PKG1}/${FULLPATH}/
    mv -f libnetgo.*a ${PKG1}/${FULLPATH}/

    mv -f libcilkrts.spec ${PKG1}/${FULLPATH}/
    mv -f libgfortran.spec ${PKG1}/${FULLPATH}/
    mv -f libgomp.spec ${PKG1}/${FULLPATH}/
    mv -f libitm.spec ${PKG1}/${FULLPATH}/
    mv -f libmpx.spec ${PKG1}/${FULLPATH}/
    mv -f libsanitizer.spec ${PKG1}/${FULLPATH}/

  )

  ( cd ${PKG1}/usr/lib${LIBDIRSUFFIX}
    reldir="$(abs2rel /usr/lib${LIBDIRSUFFIX} ${FULLPATH}/adalib)"
    mv ${PKG1}/${FULLPATH}/adalib/libgna{t,rl}-*.so .
    rm -f ${PKG1}/${FULLPATH}/adalib/libgnat.so ${PKG1}/${FULLPATH}/adalib/libgnarl.so
    ln -sf ${reldir}/$(getsoname libgnat-*.so) ${PKG1}/${FULLPATH}/adalib/$(getsoname libgnat-*.so)
    ln -sf ${reldir}/$(getsoname libgnat-*.so) ${PKG1}/${FULLPATH}/adalib/libgnat.so
    ln -sf ${reldir}/$(getsoname libgnarl-*.so) ${PKG1}/${FULLPATH}/adalib/$(getsoname libgnarl-*.so)
    ln -sf ${reldir}/$(getsoname libgnarl-*.so) ${PKG1}/${FULLPATH}/adalib/libgnarl.so
  )

  ( cd ${PKG1}/${FULLEPATH}
    # binutils plugin
    mkdir -p ${PKG1}/usr/lib${LIBDIRSUFFIX}/bfd-plugins
    reldir="$(abs2rel ${FULLEPATH} /usr/lib${LIBDIRSUFFIX}/bfd-plugins )"
    ln -s ${reldir}/$(getsoname liblto_plugin.so.*) \
      ${PKG1}/usr/lib${LIBDIRSUFFIX}/bfd-plugins/liblto_plugin.so
  )

  find -L ${PKG1}/${FULLPATH}/ -type l -delete

  if [ "${SB_MULTILIB}" = "YES" ]; then
  ( cd ${PKG1}/usr/lib

    reldir="$(abs2rel /usr/lib ${FULLPATH32})"
    ln -sf ${reldir}/$(getsoname libgcc_s.so.*) ${PKG1}/${FULLPATH32}/libgcc_s.so
    ln -sf ${reldir}/$(getsoname libobjc.so.*) ${PKG1}/${FULLPATH32}/libobjc.so
    ln -sf ${reldir}/$(getsoname libobjc_gc.so.*) ${PKG1}/${FULLPATH32}/libobjc_gc.so
    ln -sf ${reldir}/$(getsoname libstdc++.so.*) ${PKG1}/${FULLPATH32}/libstdc++.so
    ln -sf ${reldir}/$(getsoname libgfortran.so.*) ${PKG1}/${FULLPATH32}/libgfortran.so
    ln -sf ${reldir}/$(getsoname libgomp.so.*) ${PKG1}/${FULLPATH32}/libgomp.so

    echo "INPUT ( /usr/lib/$( echo $(getsoname libubsan.so.*) | sed 's,^.*libu,libu,') )" > ${PKG1}/${FULLPATH32}/libubsan.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libcilkrts.so.*) | sed 's,^.*libc,libc,') )" > ${PKG1}/${FULLPATH32}/libcilkrts.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libpmx.so.*) | sed 's,^.*libc,libc,') )" > ${PKG1}/${FULLPATH32}/libmpx.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libmpxwrappers.so.*) | sed 's,^.*libc,libc,') )" > ${PKG1}/${FULLPATH32}/libmpxwrappers.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libgo.so.*) | sed 's,^.*libg,libg,')' )" > ${PKG1}/${FULLPATH32}/libgo.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libquadmath.so.*) | sed 's,^.*libq,libq,') )" > ${PKG1}/${FULLPATH32}/libquadmath.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libitm.so.*) | sed 's,^.*libi,libi,') )" > ${PKG1}/${FULLPATH32}/libitm.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libatomic.so.*) | sed 's,^.*libi,libi,') )" > ${PKG1}/${FULLPATH32}/libatomic.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libasan.so.*) | sed 's,^.*liba,liba,') )" > ${PKG1}/${FULLPATH32}/libasan.so
    mv libasan_preinit.o ${PKG1}/${FULLPATH32}/libasan_preinit.o
    rm -f ${PKG1}/${FULLPATH32}/libtsan.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libtsan.so.*) | sed 's,^.*libt,libt,') )" > ${PKG1}/${FULLPATH32}/libtsan.so
    rm -f ${PKG1}/${FULLPATH32}/liblsan.so
    echo "INPUT ( /usr/lib/$( echo $(getsoname libtsan.so.*) | sed 's,^.*libl,libl,') )" > ${PKG1}/${FULLPATH32}/liblsan.so

    mv -f libstdc++.*a ${PKG1}/${FULLPATH32}/
    mv -f libsupc++.*a ${PKG1}/${FULLPATH32}/
    mv -f libgfortran.*a ${PKG1}/${FULLPATH32}/
    mv -f libobjc.*a ${PKG1}/${FULLPATH32}/
    mv -f libobjc_gc.*a ${PKG1}/${FULLPATH32}/
    mv -f libgomp.*a ${PKG1}/${FULLPATH32}/
    mv -f libubsan.*a ${PKG1}/${FULLPATH32}/
    mv -f libcilkrts.*a ${PKG1}/${FULLPATH32}/
    mv -f libmpx.*a ${PKG1}/${FULLPATH32}/
    mv -f libmpxwrappers.*a ${PKG1}/${FULLPATH32}/
    mv -f libquadmath.*a ${PKG1}/${FULLPATH32}/
    mv -f libitm.*a ${PKG1}/${FULLPATH32}/
    mv -f libatomic.*a ${PKG1}/${FULLPATH32}/
    mv -f libasan.*a ${PKG1}/${FULLPATH32}/
    mv -f libtsan.*a ${PKG1}/${FULLPATH32}/
    mv -f liblsan.*a ${PKG1}/${FULLPATH32}/
    mv -f libgo.*a ${PKG1}/${FULLPATH32}/
    mv -f libgobegin.*a ${PKG1}/${FULLPATH32}/
    mv -f libgolibbegin.*a ${PKG1}/${FULLPATH32}/
    mv -f libnetgo.*a ${PKG1}/${FULLPATH32}/

    mv -f libcilkrts.spec ${PKG1}/${FULLPATH32}/
    mv -f libgfortran.spec ${PKG1}/${FULLPATH32}/
    mv -f libgomp.spec ${PKG1}/${FULLPATH32}/
    mv -f libitm.spec ${PKG1}/${FULLPATH32}/
    mv -f libmpx.spec ${PKG1}/${FULLPATH32}/
    mv -f libsanitizer.spec ${PKG1}/${FULLPATH32}/

  )

  ( cd ${PKG1}/usr/lib
    reldir="$(abs2rel /usr/lib ${FULLPATH32}/adalib)"
    mv ${PKG1}/${FULLPATH32}/adalib/libgna{t,rl}-*.so .
    rm -f ${PKG1}/${FULLPATH32}/adalib/libgnat.so ${PKG1}/${FULLPATH32}/adalib/libgnarl.so
    ln -sf ${reldir}/$(getsoname libgnat-*.so) ${PKG1}/${FULLPATH32}/adalib/$(getsoname libgnat-*.so)
    ln -sf ${reldir}/$(getsoname libgnat-*.so) ${PKG1}/${FULLPATH32}/adalib/libgnat.so
    ln -sf ${reldir}/$(getsoname libgnarl-*.so) ${PKG1}/${FULLPATH32}/adalib/$(getsoname libgnarl-*.so)
    ln -sf ${reldir}/$(getsoname libgnarl-*.so) ${PKG1}/${FULLPATH32}/adalib/libgnarl.so
  )
  fi # Multilib END

  find -L -type l ${PKG1}/${FULLPATH32}/ -delete

  ( cd ${PKG1}/usr/man
    gzip -9 */*
    cd man1
    ln -sf g++.1.gz c++.1.gz
    ln -sf gcc.1.gz cc.1.gz
  )  

  ## build the tgz package
  #(
  #  cd ${PKG1};
  #  makepkg -l y -c n ${TMP}/gcc-${VERSION}-${ARCH}-${BUILD}.tgz
  #)
# keep a log
) 2>&1 | tee -a ${SB_SROOT}/gcc.build.log

cat > ${PKG1}/usr/bin/c89 <<'EOF'
#!/bin/sh
fl="-std=c89"
for opt; do
  case "$opt" in
    -ansi|-std=c89|-std=iso9899:1990) fl="";;
    -std=*) echo "`basename $0` called with non ANSI/ISO C option $opt" >&2
            exit 1;;
  esac
done
exec gcc $fl ${1+"$@"}
EOF

cat > ${PKG1}/usr/bin/c99 <<'EOF'
#!/bin/sh
fl="-std=c99"
for opt; do
  case "$opt" in
    -std=c99|-std=iso9899:1999) fl="";;
    -std=*) echo "`basename $0` called with non ISO C99 option $opt" >&2
            exit 1;;
  esac
done
exec gcc $fl ${1+"$@"}
EOF

chmod 0755 ${PKG1}/usr/bin/c?9


# Install extra hardened specs (borrowed from Fedora)
install -pm0644 ${CWD}/hardened-* ${PKG1}/usr/libexec/gcc/

# OK, time to split the big package where needed:

# gcc-g++:
( cd ${PKG2}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/*++* usr/bin
  mkdir -p usr/include
  mv ${PKG1}/usr/include/c++ usr/include
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/*++* usr/lib${LIBDIRSUFFIX}/
  mkdir -p ${FULLPATH#\/}
  mv ${PKG1}/${FULLPATH}/lib*++*.* ${FULLPATH#\/}/
  mkdir -p ${FULLEPATH#\/}
  mv ${PKG1}/${FULLEPATH}/cc1plus ${FULLEPATH#\/}/cc1plus
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/*++* usr/man/man1

  mkdir -p usr/share/gdb/auto-load/usr/lib${LIBDIRSUFFIX}
  mv -f usr/lib${LIBDIRSUFFIX}/libstdc++*gdb.py* \
    usr/share/gdb/auto-load/usr/lib${LIBDIRSUFFIX}/

    #compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/*++* usr/lib
  fi

)

# gcc-gfortran:
( cd ${PKG3}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/*gfortran* usr/bin
  mv ${PKG1}/usr/bin/*95* usr/bin
  mv ${PKG1}/usr/bin/*77* usr/bin
  # Doesn't this seem like a logical idea?
  ( cd usr/bin ; ln -sf gfortran-gcc-${VERSION} fortran )
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gfortran* usr/info
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgfortran* usr/lib${LIBDIRSUFFIX}/
  mkdir -p ${FULLPATH#\/}
  mv ${PKG1}/${FULLPATH}/finclude ${FULLPATH#\/}/
  mv ${PKG1}/${FULLPATH}/libgfortran* ${FULLPATH#\/}/
  mv ${PKG1}/${FULLPATH}/libgfortran*.* ${FULLPATH#\/}/
  mkdir -p ${FULLEPATH#\/}
  mv ${PKG1}/${FULLEPATH}/f951 ${FULLEPATH#\/}/f951
  mv ${PKG1}/${FULLEPATH}/libgfortran* ${FULLEPATH#\/}/
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/gfortran* usr/man/man1

  #compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/libgfortran* usr/lib
    mkdir -p ${FULLEPATH32#\/}
    mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/finclude ${FULLEPATH32#\/}/
    mv ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION}/libgfortran* ${FULLEPATH32#\/}/
  fi
  rmdir -p ${PKG1}/usr/lib/gcc/${TARGET}/${VERSION} usr/lib/gcc/${TARGET}/${VERSION}
)

# gcc-gnat:
( cd ${PKG4}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/gnat* usr/bin
  mv ${PKG1}/usr/bin/gpr* usr/bin
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgna* usr/lib${LIBDIRSUFFIX}/
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gnat* usr/info
  mkdir -p usr/share
  mv ${PKG1}/usr/share/gnat usr/share/
  rmdir usr/share
  mkdir -p ${FULLEPATH#\/}
  mv ${PKG1}/${FULLEPATH}/gnat1 ${FULLEPATH#\/}
  mkdir -p ${FULLPATH#\/}
  mv ${PKG1}/${FULLPATH}/adainclude ${FULLPATH#\/}
  mv ${PKG1}/${FULLPATH}/adalib ${FULLPATH#\/}

  #compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/libgna* usr/lib
  fi
)

rm -f ${PKG1}/usr/include/ffi.h
rm -f ${PKG1}/${FULLPATH}/include/ffi.h
rm -f ${PKG1}/${FULLPATH}/include/ffitarget.h
rm -f ${PKG1}/usr/man/man3/ffi*
rm -f ${PKG1}/usr/lib${LIBDIRSUFFIX}/libffi.*
rm -f ${PKG1}/usr/info/libffi*
rm -f ${PKG1}/usr/lib/libffi.*

# gcc-objc:
( cd ${PKG5}
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libobjc* usr/lib${LIBDIRSUFFIX}/
  mkdir -p ${FULLEPATH#\/}
  mv ${PKG1}/${FULLEPATH}/cc1obj ${FULLEPATH#\/}
  mv ${PKG1}/${FULLEPATH}/cc1objplus ${FULLEPATH#\/}
  mkdir -p ${FULLPATH#\/}/include
  mv ${PKG1}/${FULLPATH}/include/objc ${FULLPATH#\/}/include
  mv ${PKG1}/${FULLPATH}/libobjc* ${FULLPATH#\/}/

  # compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/libobjc* usr/lib
  fi

)

# gcc-go:
( cd ${PKG6}
  mkdir -p usr/bin
  mv ${PKG1}/usr/bin/*gccgo usr/bin
  mv ${PKG1}/usr/bin/go usr/bin
  mv ${PKG1}/usr/bin/gofmt usr/bin
  mkdir -p usr/lib${LIBDIRSUFFIX}
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgo.* usr/lib${LIBDIRSUFFIX}/
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgobegin.* usr/lib${LIBDIRSUFFIX}/
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libgolibbegin.* usr/lib${LIBDIRSUFFIX}/
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/libnetgo.* usr/lib${LIBDIRSUFFIX}/
  mv ${PKG1}/usr/lib${LIBDIRSUFFIX}/go usr/lib${LIBDIRSUFFIX}/
  mkdir -p ${FULLPATH#\/}
  mv ${PKG1}/${FULLPATH}/libgo.* ${FULLPATH#\/}/
  mv ${PKG1}/${FULLPATH}/libgobegin.* ${FULLPATH#\/}/
  mv ${PKG1}/${FULLPATH}/libnetgo.* ${FULLPATH#\/}/
  mkdir -p ${FULLEPATH#\/}
  mv ${PKG1}/${FULLEPATH}/cgo ${FULLEPATH#\/}
  mv ${PKG1}/${FULLEPATH}/go1 ${FULLEPATH#\/}
  mkdir -p usr/info
  mv ${PKG1}/usr/info/gccgo* usr/info
  mkdir -p usr/man/man1
  mv ${PKG1}/usr/man/man1/gccgo.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/go.1.gz usr/man/man1
  mv ${PKG1}/usr/man/man1/gofmt.1.gz usr/man/man1

  # compat32
  if [ "${SB_MULTILIB}" = "YES" ]; then
    mkdir -p usr/lib
    mv ${PKG1}/usr/lib/libgo.* usr/lib
    mv ${PKG1}/usr/lib/libgobegin.* usr/lib
    mv ${PKG1}/usr/lib/libgolibbegin.* usr/lib
    mv ${PKG1}/usr/lib/libnetgo.* usr/lib
    mv ${PKG1}/usr/lib/go usr/lib
  fi

)

rmdir ${PKG1}/usr/include 2> /dev/null

# Filter all .la files (thanks much to Mark Post for the sed script):
( cd ${TMP}
  for file in $(find . -type f -name "*.la") ; do
    cat ${file} | sed -e 's%-L/gcc-[[:graph:]]* % %g' > ${TMP}/tmp-la-file
    cat ${TMP}/tmp-la-file > ${file}
  done
  rm ${TMP}/tmp-la-file
)

if [ "${SB_MULTILIB}" = "YES" ]; then
  (
    # gcc-compat32
    cd ${PKG1_32}
    mkdir -p ${FULLPATH#\/}
    mv ${PKG1}/${FULLPATH32} ${FULLPATH32#\/}
    mv ${PKG1}/usr/lib64/32 usr/lib64/
    # Hack for clang multilib
    for file in crt1.o crti.o crtn.o ;do
      reldir="$(abs2rel /usr/lib ${FULLPATH32})"
      if ! [ -e ${FULLPATH32#\/}/${file} ] ;then
        ln -sf ${reldir}/${file} ${FULLPATH32#\/}/${file}
      fi
    done
  )

  # *-compat32
  for dir in ${PKG1_32} ${PKG2_32} ${PKG3_32} ${PKG5_32} ${PKG6_32}; do
    DIR64=$(echo $dir | sed 's#-compat32##')
    (
      cd ${dir}
      mkdir -p usr
      mv ${DIR64}/usr/lib usr/
    )
  done
  # gcc-g++-compat32
  (
    cd ${PKG2_32}
    mkdir -p usr/include/c++/${VERSION}/${TARGET}
    mv ${PKG2}/usr/include/c++/${VERSION}/${TARGET}/32 usr/include/c++/${VERSION}/${TARGET}
    mkdir -p ${FULLPATH32#\/}
    mv ${PKG1_32}/${FULLPATH32}/*++*.* ${FULLPATH32#\/}/
    mkdir -p usr/share/gdb/auto-load/usr/lib
    mv -f usr/lib/libstdc++*gdb.py* \
      usr/share/gdb/auto-load/usr/lib/
  )
  # gcc-gfortran-compat32
  (
    cd ${PKG3_32}
    mkdir -p ${FULLPATH32#\/}
    mv ${PKG1_32}/${FULLPATH32}/libgfortran*.* ${FULLPATH32#\/}/
    mv ${PKG1_32}/${FULLPATH32}/finclude ${FULLPATH32#\/}/
  )
  # gcc-gnat-compat32
  (
    cd ${PKG4_32}
    mkdir -p ${FULLPATH32#\/}
    mv ${PKG1_32}/${FULLPATH32}/ada* ${FULLPATH32#\/}/
  )

  # gcc-objc-compat32
  (
    cd ${PKG5_32}
    mkdir -p ${FULLPATH32#\/}
    mv ${PKG1_32}/${FULLPATH32}/libobjc* ${FULLPATH32#\/}/
  )

  # gcc-go-compat32
  (
    cd ${PKG6_32}
    mkdir -p ${FULLPATH32#\/}
    mv ${PKG1_32}/${FULLPATH32}/libgo.* ${FULLPATH32#\/}/
    mv ${PKG1_32}/${FULLPATH32}/libgobegin.* ${FULLPATH32#\/}/
    mv ${PKG1_32}/${FULLPATH32}/libgolibbegin.* ${FULLPATH32#\/}/
    mv ${PKG1_32}/${FULLPATH32}/libnetgo.* ${FULLPATH32#\/}/
  )

fi

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/{descs,patches}
  install -m0644 ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/libgcc_*.c.gz ${CWD}/${NAME}.png.gz \
    ${CWD}/hardened-* ${CWD}/README.hardening ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/descs/slack-desc* \
    ${SBDIR}/descs/
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS1="set -o errexit -o xtrace ; cd ${PKG1} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS2="set -o errexit -o xtrace ; cd ${PKG2} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS3="set -o errexit -o xtrace ; cd ${PKG3} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS4="set -o errexit -o xtrace ; cd ${PKG4} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS5="set -o errexit -o xtrace ; cd ${PKG5} ;
  /bin/chown --recursive root:root .  ;"
ROOTCOMMANDS6="set -o errexit -o xtrace ; cd ${PKG6} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS1="${ROOTCOMMANDS1}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME1}.${PKGFORMAT} "
ROOTCOMMANDS2="${ROOTCOMMANDS2}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2}.${PKGFORMAT} "
ROOTCOMMANDS3="${ROOTCOMMANDS3}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME3}.${PKGFORMAT} "
ROOTCOMMANDS4="${ROOTCOMMANDS4}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME4}.${PKGFORMAT} "
ROOTCOMMANDS5="${ROOTCOMMANDS5}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME5}.${PKGFORMAT} "
ROOTCOMMANDS6="${ROOTCOMMANDS6}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME6}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS1}
  eval ${ROOTCOMMANDS2}
  eval ${ROOTCOMMANDS3}
  eval ${ROOTCOMMANDS4}
  eval ${ROOTCOMMANDS5}
  eval ${ROOTCOMMANDS6}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS1} | fakeroot
  echo ${ROOTCOMMANDS2} | fakeroot
  echo ${ROOTCOMMANDS3} | fakeroot
  echo ${ROOTCOMMANDS4} | fakeroot
  echo ${ROOTCOMMANDS5} | fakeroot
  echo ${ROOTCOMMANDS6} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

if [ "${SB_MULTILIB}" = "YES" ]; then
  ROOTCOMMANDS1_32="set -o errexit -o xtrace ; cd ${PKG1_32} ;
    /bin/chown --recursive root:root .  ;"
  ROOTCOMMANDS2_32="set -o errexit -o xtrace ; cd ${PKG2_32} ;
    /bin/chown --recursive root:root .  ;"
  ROOTCOMMANDS3_32="set -o errexit -o xtrace ; cd ${PKG3_32} ;
    /bin/chown --recursive root:root .  ;"
  ROOTCOMMANDS4_32="set -o errexit -o xtrace ; cd ${PKG4_32} ;
    /bin/chown --recursive root:root .  ;"
  ROOTCOMMANDS5_32="set -o errexit -o xtrace ; cd ${PKG5_32} ;
    /bin/chown --recursive root:root .  ;"
  ROOTCOMMANDS6_32="set -o errexit -o xtrace ; cd ${PKG6_32} ;
    /bin/chown --recursive root:root .  ;"
  
  ROOTCOMMANDS1_32="${ROOTCOMMANDS1_32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME1_32}.${PKGFORMAT} "
  ROOTCOMMANDS2_32="${ROOTCOMMANDS2_32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME2_32}.${PKGFORMAT} "
  ROOTCOMMANDS3_32="${ROOTCOMMANDS3_32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME3_32}.${PKGFORMAT} "
  ROOTCOMMANDS4_32="${ROOTCOMMANDS4_32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME4_32}.${PKGFORMAT} "
  ROOTCOMMANDS5_32="${ROOTCOMMANDS5_32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME5_32}.${PKGFORMAT} "
  ROOTCOMMANDS6_32="${ROOTCOMMANDS6_32}
    /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME6_32}.${PKGFORMAT} "
  
  if test ${UID} = 0; then
    eval ${ROOTCOMMANDS1_32}
    eval ${ROOTCOMMANDS2_32}
    eval ${ROOTCOMMANDS3_32}
    eval ${ROOTCOMMANDS4_32}
    eval ${ROOTCOMMANDS5_32}
    eval ${ROOTCOMMANDS6_32}
    set +o xtrace
  elif test "$(type -t fakeroot)" = 'file'; then
    echo -e "\e[1mEntering fakeroot environment.\e[0m"
    echo ${ROOTCOMMANDS1_32} | fakeroot
    echo ${ROOTCOMMANDS2_32} | fakeroot
    echo ${ROOTCOMMANDS3_32} | fakeroot
    echo ${ROOTCOMMANDS4_32} | fakeroot
    echo ${ROOTCOMMANDS5_32} | fakeroot
    echo ${ROOTCOMMANDS6_32} | fakeroot
  else
    echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
    exit 5
  fi
fi

echo
echo "Slackware GCC package build complete!"
echo

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
