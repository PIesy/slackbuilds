#!/bin/sh
#-- blender for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ blender.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.blender.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=blender
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.76b}
BAPI=${VERSION%[a-z]}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

TTFDIR=usr/share/fonts/TTF/${NAME}

# Set to YES to enable ffmpeg support
SB_FFMPEG=${SB_FFMPEG:-YES}

PYABI=$(python3 -c 'import sys; print (sys.version[:3])')

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${NAME}-${VERSION}.tar.gz
SSRCARCHIVE=${SRCARCHIVE}.md5sum

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_BLENDER=${MIRROR_BLENDER:-http://download.blender.org}
DL_URL="${MIRROR_BLENDER}/source"

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e '/^Icon=/s|.png||g' release/freedesktop/${NAME}.desktop || exit 1

rm -rf extern/ffmpeg
rm -rf extern/fftw
rm -rf extern/glew
rm -rf extern/libmp3lame
rm -rf extern/libopenjpeg
rm -rf extern/libredcode
rm -rf extern/ode
rm -rf extern/x264
rm -rf extern/xvidcore
rm -rf extern/qhull
rm -rf extern/make
rm -rf extern/verse

find . -name '.svn' -print | xargs rm -rf

unset SB_FFMPEGOPTS
[ "${SB_FFMPEG}" = "YES" ] && SB_FFMPEGOPTS=${SB_FFMPEG}

export CFLAGS="${SLKCFLAGS} -fPIC -funsigned-char -fno-strict-aliasing"
export CXXFLAGS="${CFLAGS}"
export FFLAGS="${SLKCFLAGS}"

mkdir -p build
( cd build || exit $?

  cmake .. \
    -DCMAKE_C_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_CXX_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_Fortran_FLAGS_RELEASE:STRING="-DNDEBUG" \
    -DCMAKE_INSTALL_PREFIX:PATH=/usr \
    -DSYSCONF_INSTALL_DIR:PATH=/etc \
    -DINCLUDE_INSTALL_DIR:PATH=/usr/include \
    -DCMAKE_INSTALL_LIBDIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DLIB_INSTALL_DIR:PATH=/usr/lib${LIBDIRSUFFIX} \
    -DLIB_SUFFIX=${LIBDIRSUFFIX} \
    -DSHARE_INSTALL_PREFIX:PATH=/usr/share \
    -DMAN_INSTALL_DIR:PATH=/usr/man \
    -DCMAKE_BUILD_TYPE=Release \
    -DBUILD_SHARED_LIBS:BOOL=OFF \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DWITH_CODEC_SNDFILE:BOOL=ON \
    -DSNDFILE_INCLUDE_DIR:PATH="$(pkg-config --variable includedir sndfile)" \
    -DWITH_IMAGE_OPENJPEG:BOOL=ON \
    -DWITH_SYSTEM_OPENJPEG:BOOL=ON \
    -DWITH_CYCLES:BOOL=OFF \
    -DWITH_PYTHON:BOOL=ON \
    -DPYTHON_VERSION:STRING=${PYABI} \
    -DWITH_PYTHON_INSTALL:BOOL=OFF \
    -DWITH_GAMEENGINE:BOOL=ON \
    -DWITH_CXX_GUARDEDALLOC:BOOL=OFF \
    -DWITH_BUILTIN_GLEW:BOOL=OFF \
    -DWITH_INSTALL_PORTABLE:BOOL=OFF \
    -DWITH_PYTHON_SAFETY:BOOL=ON \
    -DWITH_PLAYER:BOOL=ON \
    -DWITH_MEM_JEMALLOC:BOOL=ON \
    -DWITH_FFTW3:BOOL=ON \
    -DWITH_CODEC_FFMPEG:BOOL=${SB_FFMPEGOPTS:-OFF} \
    -DBOOST_ROOT=/usr \
    || exit $?

  make -j${NJOBS} || make || exit $?

) || exit $?

# Install
mkdir -p ${PKG}/usr/bin
install -m 0755 build/bin/blender \
  ${PKG}/usr/bin/blender || exit 1
install -m 0755 build/bin/blenderplayer \
  ${PKG}/usr/bin/blenderplayer || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}/${BAPI}/plugins/{sequence,texture}

mkdir -p ${PKG}/usr/share/${NAME}/${BAPI}/{datafiles,scripts}

rm -rf ${PKG}/usr/share/${NAME}/${BAPI}/datafiles/fonts

cp -aR release/datafiles/locale ${PKG}/usr/share/${NAME}/${BAPI}/datafiles/ || exit 1

cp -R -a -p release/scripts/* ${PKG}/usr/share/${NAME}/${BAPI}/scripts/ || exit 1

find ${PKG}/usr/share/${NAME}/${BAPI}/scripts -type f -exec sed -i -e 's/\r$//g' {} \;

#Fix perm
chmod +x ${PKG}/usr/share/${NAME}/${BAPI}/scripts/bpymodules/blend2renderinfo.py

find ${PKG}/usr/share/${NAME} -name '.git' -print | xargs rm -rf
find ${PKG}/usr/share/${NAME} -name '.gitignore' -print | xargs rm -f

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# mathml-fonts have own package
mkdir -p ${PKG}/${TTFDIR}
install -pm0644 release/datafiles/fonts/*.ttf.gz \
  ${PKG}/${TTFDIR}/ || exit 1
touch ${PKG}/${TTFDIR}/fonts.{cache-1,dir,scale}

mkdir -p ${PKG}/usr/share/applications
desktop-file-install \
  --dir ${PKG}/usr/share/applications \
  --remove-key="Encoding" \
  release/freedesktop/${NAME}.desktop || exit 1

# Install hicolor icons.
for i in 16x16 22x22 24x24 32x32 48x48 256x256; do
  dir=${PKG}/usr/share/icons/hicolor/${i}/apps
  mkdir -p ${dir}
  install -pm 0644 release/freedesktop/icons/${i}/apps/${NAME}.png \
    ${dir}/${NAME}.png || exit 1
done
mkdir -p ${PKG}/usr/share/icons/hicolor/scalable/apps
install -pm 0644 release/freedesktop/icons/scalable/apps/${NAME}.svg \
  ${PKG}/usr/share/icons/hicolor/scalable/apps/ || exit 1

mkdir -p ${PKG}/usr/share/mime/packages
zcat ${CWD}/${NAME}.xml.gz > ${PKG}/usr/share/mime/packages/${NAME}.xml || exit 1

mkdir -p ${PKG}/usr/man/man1
python3 doc/manpage/blender.1.py ${PKG}/usr/bin/blender \
  ${PKG}/usr/man/man1/blender.1 || exit 1

mkdir -p ${PKG}/usr/lib/rpm/macros.d
cat > ${PKG}/usr/lib/rpm/macros.d/macros.blender <<EOF
%blender_version ${VERSION}

%blender_libdir /usr/share/${NAME}/%{blender_version}
%blender_archdir /usr/lib${LIBDIRSUFFIX}/${NAME}/%{blender_version}
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  COPYING README doc/*-license.txt ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
if [ -x usr/bin/update-mime-database ]; then
  \${CHROOT} /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi

# Update the X font indexes:
if [ -x usr/bin/mkfontscale -a -x usr/bin/mkfontdir ]; then
  \${CHROOT} /usr/bin/mkfontscale /${TTFDIR#\/} >/dev/null 2>&1
  \${CHROOT} /usr/bin/mkfontdir /${TTFDIR#\/} >/dev/null 2>&1
fi
if [ -x usr/bin/update-fccache ]; then
  \${CHROOT} /usr/bin/update-fccache
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}.xml.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
