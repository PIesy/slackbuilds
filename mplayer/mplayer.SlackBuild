#!/bin/sh
#-- mplayer for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ mplayer.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://mplayerhq.hu/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

SNAPBUILD=${SNAPBUILD:-YES}

NAME=mplayer
PNAME=MPlayer
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
  SNAPBRANCH=${SNAPBRANCH:-master}
else
  VERSION=${VERSION:-1.1}
fi
SLKDIST=${SLKDIST:-Slackware}
SKVER=${SVER:-1.10}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable GTK gui
SB_GUI=${SB_GUI:-NO}
# Set to YES to use external ffmpeg (only snapbuild)
SB_FFMPEG=${SB_FFMPEG:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

# This will build documentation for all languages - if you don't want some
# of the, use variations below. The first will be the main.
# all bg cs de dk el en es fr hu it ja ko mk nb nl pl ro ru sk sv tr uk pt_BR zh_CN zh_TW"
SB_LANGS=${SB_LANGS:-all}

echo -n "Selected language: "
echo ${SB_LANGS}
sleep 5

SRCDIR=${NAME}-${VERSION}
if [ "${SNAPBUILD}" = "YES" ] ;then
  SRCDIR=${NAME}-${VERSION}
  SRCARCHIVE=${SRCDIR}.tar.xz
else
  SRCDIR=${PNAME}-${VERSION}
  SRCARCHIVE=${SRCDIR}.tar.bz2
fi

SRCARCHIVE2=Blue-${SKVER}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://www1.mplayerhq.hu/MPlayer/releases/${SRCARCHIVE}"
DL_URL2="http://www.mplayerhq.hu/MPlayer/skins/${SRCARCHIVE2}"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
fi
if [ "${SB_GUI}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SB_CPU_DETECT="--disable-runtime-cpudetection"
else
  SB_CPU_DETECT="--enable-runtime-cpudetection"
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="-fPIC"
else
  LIBDIRSUFFIX=""
fi

unset SLKLDFLAGS
# Set this here to do not make configure angry.
[ "${LDFLAGS}" ] && SLKLDFLAGS="${LDFLAGS}"
unset CFLAGS CXXFLAGS LDFLAGS CPPFLAGS

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|-O4|-O3|g' configure || exit 1
sed -i -e 's|-lungif|-lgif|g' configure || exit 1
[ "${ARCH}" = "x86_64" ] && sed -i -e 's|-O3|-O3 -fPIC|g' configure

# Avoid trims
sed -i -e "/^EXTRALIBS =/s|$| ${SLKLDFLAGS} |g" configure || exit 1

if [ -e /usr/lib${LIBDIRSUFFIX}/libmpcdec-sv7.so ] ;then
  sed -i -e 's|-lmpcdec|-lmpcdec-sv7|g' configure || exit 1
fi

rm -f version.h
sed -i -e "s|-\$1|-${SLKDIST}-\$1|g" \
          version.sh || exit 1

LANGRETVAL=0
if [ "${SB_LANGS}" != "all" ] ;then
  for lang in ${SB_LANGS} ;do
    if [ ! -f help/help_mp-${lang}.h ] ;then
      echo "${lang} do not supported"
      LANGRETVAL=1
    fi
  done
  [ "${LANGRETVAL}" -eq 1 ] && exit 1
fi

unset SB_WIN32CODECSOPTS SB_FFMPEGOPTS SB_FFMPEGFIX
[ "${ARCH}" = "x86_64" ] || SB_WIN32CODECSOPTS="--enable-win32dll"
if [ "${SNAPBUILD}" = "YES" ] && [ "${SB_FFMPEG}" = "YES" ] ;then
  SB_FFMPEGOPTS='--disable-ffmpeg_a'
  sed -i -e '/\$(MAKE) -C ffmpeg/d' Makefile || exit 1
  #SB_FFMPEGFIX="libswscale/rgb2rgb.o"
fi

SB_CONFIGURE() {
  ./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --datadir=/usr/share/${NAME} \
  --confdir=/etc/${NAME} \
  --mandir=/usr/man \
  --disable-bitmap-font \
  --language="${SB_LANGS}" \
  --enable-dynamic-plugins \
  ${SB_FFMPEGOPTS} \
  ${SB_WIN32CODECSOPTS} \
  --codecsdir=/usr/lib${LIBDIRSUFFIX}/codecs \
  --enable-real \
  --disable-ass-internal \
  --enable-faad \
  --disable-arts \
  --disable-esd \
  --enable-libcdio \
  --disable-cdparanoia \
  --disable-musepack \
  --extra-cflags="$(pkg-config --cflags-only-I fribidi smbclient x264)" \
  --extra-libs="$(pkg-config --libs-only-l libcdio_paranoia libnemesi fribidi) ${SB_FFMPEGFIX}" \
  --enable-joystick \
  --enable-menu \
  --enable-smb \
  --enable-fribidi \
  --enable-nemesi \
  --enable-librtmp \
  --enable-xvmc \
  --with-xvmclib=XvMCW \
  --enable-fbdev \
  --disable-ivtv \
  ${SB_CPU_DETECT} $@

}

if [ "${SB_GUI}" = "YES" ] ;then
  SB_CONFIGURE --enable-gui --disable-mencoder || exit 1

  make -j${NJOBS} || make || exit 1
  mv -f mplayer gmplayer || exit 1
  make distclean || exit 1
fi

SB_CONFIGURE || exit 1

make -j${NJOBS} || make || exit 1

# build HTML documentation from XML files
if [ "${SNAPBUILD}" = "YES" ] ;then
  make html-chunked || exit $?
fi

make install DESTDIR=${PKG} INSTALLSTRIP="" || exit 1

sed -e 's|midentify.sh|midentify|g' TOOLS/midentify.sh \
  > ${PKG}/usr/bin/midentify || exit 1
chmod 0755 ${PKG}/usr/bin/midentify

# GUI mplayer
if [ "${SB_GUI}" = "YES" ] ;then
  install -pm 0755 g${NAME} ${PKG}/usr/bin/ || exit 1

mkdir -p ${PKG}/usr/share/applications
desktop-file-install \
  --dir ${PKG}/usr/share/applications --mode 0644 \
  --remove-key="Encoding" \
  --remove-category="Application" \
  --set-icon="${NAME}" \
  --set-key="Exec" \
  --set-value="gmplayer %f" \
  --add-mime-type="video/x-flv" \
  etc/${NAME}.desktop
fi

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

rm -rf ${PKG}/usr/share/pixmaps
for res in 16 22 24 32 48 256 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  install -pm0644 etc/${NAME}${res}x${res}.png \
    ${dir}/${NAME}.png || exit 1
done

for res in 64 72 96 128 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  convert etc/${NAME}256x256.png -filter Lanczos \
    -resize ${res}x${res} ${dir}/${NAME}.png || exit 1
done

# Default config files
mkdir -p ${PKG}/etc/${NAME}
install -pm 0644 etc/example.conf \
  ${PKG}/etc/${NAME}/${NAME}.conf.new || exit 1
# use Nimbus Sans L font for OSD (via fontconfig)
echo "fontconfig=yes" >> ${PKG}/etc/${NAME}/${NAME}.conf.new
echo 'font="Sans"' >> ${PKG}/etc/${NAME}/${NAME}.conf.new

for conf in {dvb-menu,input,menu}.conf ;do
  install -pm 0644 etc/${conf} ${PKG}/etc/${NAME}/${conf}.new || exit 1
done
# It is better replace this on updates
install -pm0644 etc/codecs.conf ${PKG}/etc/${NAME}/ || exit 1

rm -rf ${PKG}/usr/share/${NAME}/font

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/codecs

if [ "${SB_GUI}" = "YES" ] ;then
# Default skin
mkdir -p ${PKG}/usr/share/${NAME}/skins
tar -xjC ${PKG}/usr/share/${NAME}/skins/ --exclude=.svn -f ${CWD}/${SRCARCHIVE2} || exit 1
ln -s Blue ${PKG}/usr/share/${NAME}/skins/default || exit 1
fi

# Clean up documentation
mkdir doc
cp -pR DOCS/* doc/
rm -rf doc/man doc/xml doc/README
mv doc/HTML/* doc/
rm -rf doc/HTML

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS ChangeLog LICENSE README doc/en/ doc/tech/ etc/*.conf \
  ${CWD}/ChangeLog.SB ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${SNAPUPDATE} ${CWD}/apply-patches.sh ${CWD}/${NAME}.png.gz \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
