#!/bin/sh
#-- nfs-utils for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ nfs-utils.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://sourceforge.net/projects/nfs

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=nfs-utils
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.3.3}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable krb gssapi support
SB_KRB5=${SB_KRB5:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SSRCARCHIVE=${SRCARCHIVE}.sign

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/utils/nfs"
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URLB="${MIRROR_SF}/nfs"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${SRCARCHIVE} || exit 1
#test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SSRCARCHIVE}

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  sh ./autogen.sh clean
  autoreconf -fisv || exit $?
fi

unset SB_KRB5OPTS
[ "${SB_KRB5}" = "YES" ] || SB_KRB5OPTS='--disable-gss'

CFLAGS="${SLKCFLAGS} -fpie -D_FILE_OFFSET_BITS=64" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --enable-mountconfig \
  --enable-ipv6 \
  --enable-nfsv3 \
  --enable-nfsv4 \
  --enable-nfsv41 \
  --enable-tirpc \
  ${SB_KRB5OPTS} \
  --enable-libmount-mount \
  --with-statdpath=/var/lib/nfs/statd \
  --with-statduser=nobody \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit $?

make -j${NJOBS} all || make all || exit $?

mkdir ${PKG}/sbin

make install DESTDIR=${PKG} statduser=$(id -un) || exit $?

install -m 755 tools/rpcdebug/rpcdebug ${PKG}/usr/sbin/ || exit $?
mkdir -p ${PKG}/etc
install -m 644 utils/mount/nfsmount.conf ${PKG}/etc/nfsmount.conf.new || exit 1

mv ${PKG}/usr/sbin/rpc.{idmapd,statd} ${PKG}/sbin/ || exit 1
ln -sf ../../sbin/rpc.idmapd ${PKG}/usr/sbin/rpc.idmapd
ln -sf ../../sbin/rpc.statd ${PKG}/usr/sbin/rpc.statd

mkdir -p ${PKG}/etc/exports.d

mkdir -p ${PKG}/etc/rc.d
install -pm0644 ${CWD}/rc.nfsd ${PKG}/etc/rc.d/rc.nfsd.new || exit 1

mkdir -p ${PKG}/lib/systemd/system
for file in systemd/*.{service,mount,target}  ; do
  install -m 644 ${file} ${PKG}/lib/systemd/system/ || exit 1
done

( cd ${PKG}/lib/systemd/system
  ln -s nfs-server.service nfs.service
)

if [ "${SB_KRB5}" != "YES" ] ;then
  rm -fv ${PKG}/lib/systemd/system/*gss*.service
fi

mkdir -p ${PKG}/usr/libexec/${NAME}
install -pm0755 ${CWD}/nfs-utils_env.sh ${PKG}/usr/libexec/${NAME}/ || exit 1

install -m 644 utils/mount/nfsmount.conf ${PKG}/etc/nfsmount.conf.new || exit 1

# These might be in use:
for config_file in etab rmtab xtab ; do
  mv ${PKG}/var/lib/nfs/${config_file} ${PKG}/var/lib/nfs/${config_file}.new || exit 1
done

mkdir -p ${PKG}/var/lib/nfs/rpc_pipefs

rm -rf ${PKG}/var/lib/nfs/{sm,sm.bak}
mkdir -p ${PKG}/var/lib/nfs/statd/sm
mkdir -p ${PKG}/var/lib/nfs/statd/sm.bak
mkdir -p ${PKG}/var/lib/nfs/v4recovery

mv ${PKG}/var/lib/nfs/statd/state ${PKG}/var/lib/nfs/statd/state.new || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

cat > ${PKG}/etc/exports.new <<'EOF'
# See exports(5) for a description.
# This file contains a list of all directories exported to other computers.
# It is used by rpc.nfsd and rpc.mountd.

EOF

mkdir -p ${PKG}/etc/request-key.d
install -m 644 ${CWD}/id_resolver.conf \
  ${PKG}/etc/request-key.d/id_resolver.conf.new || exit 1

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/nfs.new <<'EOF'
#
# Path to remote quota server. See rquotad(8)
#RQUOTAD="/usr/sbin/rpc.rquotad"
# Port rquotad should listen on.
#RQUOTAD_PORT=875
# Optinal options passed to rquotad
RPCRQUOTADOPTS=""
#
# Optional arguments passed to in-kernel lockd
#LOCKDARG=
# TCP port rpc.lockd should listen on.
#LOCKD_TCPPORT=32803
# UDP port rpc.lockd should listen on.
#LOCKD_UDPPORT=32769
#
# Optional arguments passed to rpc.nfsd. See rpc.nfsd(8)
RPCNFSDARGS=""
# Number of nfs server processes to be started.
# The default is 8. 
RPCNFSDCOUNT=8
# Set V4 grace period in seconds
#NFSD_V4_GRACE=90
#
# Optional arguments passed to rpc.mountd. See rpc.mountd(8)
RPCMOUNTDOPTS=""
#
# Optional arguments passed to rpc.statd. See rpc.statd(8)
STATDARG=""
#
# Optional arguments passed to rpc.idmapd. See rpc.idmapd(8)
RPCIDMAPDARGS=""
# To enable RDMA support on the server by setting this to
# the port the server should listen on
#RDMA_PORT=20049
# Optional arguments passed to blkmapd. See blkmapd(8)
BLKMAPDARGS=""
EOF

if [ "${SB_KRB5}" = "YES" ] ;then
cat >> ${PKG}/etc/default/nfs.new <<'EOF'
#
# Optional arguments passed to rpc.gssd. See rpc.gssd(8)
RPCGSSDARGS=""
# Enable usage of gssproxy. See gssproxy-mech(8).
GSS_USE_PROXY="yes"
#
# Optional arguments passed to rpc.svcgssd. See rpc.svcgssd(8)
RPCSVCGSSDARGS=""
EOF
fi

mkdir -p ${PKG}/lib/modprobe.d
cat > ${PKG}/lib/modprobe.d/nfs.conf <<'EOF'
alias nfs4 nfs
EOF

cat > ${PKG}/lib/modprobe.d/lockd.conf <<'EOF'
#
# To be installed in /etc/modprobe.d
#
# Those who have need for lockd to listen on a particular port should
# uncomment the line below and set the values appropriately.
#
#options lockd nlm_tcpport=32803 nlm_udpport=32769
EOF

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING LICENSE README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.nfsd.new:
if [ -r etc/rc.d/rc.nfsd -a -r etc/rc.d/rc.nfsd.new ]; then
  chmod --reference=etc/rc.d/rc.nfsd etc/rc.d/rc.nfsd.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ var/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ var/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo 'rm -f etc/exports.new &>/dev/null' >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
  ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/rc.nfsd ${CWD}/nfs-utils_env.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  /bin/chown nobody.root ./var/lib/nfs/statd/{sm,sm.bak} ;
  /bin/chown nobody.root ./var/lib/nfs/statd/state.new ;
  /bin/chmod 4511 ./sbin/mount.nfs ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
