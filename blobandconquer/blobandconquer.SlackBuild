#!/bin/sh
#-- blobAndConquerc for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ blobAndConquer.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2012 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.parallelrealities.co.uk/projects/blobAndConquer.php

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=blobAndConquer
NAME=blobandconquer
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-1.11-1}
RVER="$(echo ${VERSION} | cut -d - -f1)"
REL="$(echo ${VERSION} | cut -d - -f2)"
PVER=${PVER:-1.07-dfsg-1}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${RVER}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${RVER}
SRCARCHIVE=${PNAME}-${VERSION}.tar.gz
PSRCARCHIVE=${NAME}_${PVER}.diff.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"
MIRROR_DEB=${MIRROR_DEB:-ftp://ftp.debian.org}
PDL_URL="${MIRROR_DEB}/debian/pool/main/$(echo ${NAME} | sed -e 's/\(.\).*/\1/')/${NAME}/${PSRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${PSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${PDL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# zcat ${CWD}/${NAME}.patch.gz | patch -p0 -E --backup --verbose || exit 1
zcat ${CWD}/${PSRCARCHIVE} | patch -p1 -E --backup --verbose || exit 1
zcat ${CWD}/${NAME}-1.10-gcc44.patch.gz | patch -p0 -E --backup --verbose || exit 1

sed -i -e "/^Version=/d;
           /^GenericName=/d" \
           icons/${PNAME}.desktop || exit 1

sed -i -e '/^LOAD_MUSIC/s|Escape From Tower.xm|Escape_From_Tower.xm|g' \
  data/cutscenes/scripts/finalEnd || exit 1
sed -i -e '/loadMusic/s|Super Robot Fighter.xm|Super_Robot_Fighter.xm|g' \
  src/bosses/{bioTanks,eyeDroidCommander,spiderBlobCommander}.cpp || exit 1

sed -i \
  -e '/music/s|Dragon Cave.xm|Dragon_Cave.xm|g' \
  -e '/music/s|Sodom of Evil.xm|Sodom_of_Evil.xm|g' \
  -e '/music/s|The Siege.xm|The_Siege.xm|g' \
  -e '/music/s|Tales Untold.xm|Tales_Untold.xm|g' \
  -e '/music/s|Liquid Crystal.xm|Liquid_Crystal.xm|g' \
  -e '/music/s|A Bear Called Otso.xm|A_Bear_Called_Otso.xm|g' \
  -e '/music/s|Super Robot Fighter.xm|Super_Robot_Fighter.xm|g' \
  -e '/music/s|Neutral Zone.xm|Neutral_Zone.xm|g' \
  -e '/music/s|Scene Music.xm|Scene_Music.xm|g' \
  -e '/music/s|Dark Club.s3m|Dark_Club.s3m|g' \
  -e '/music/s|Warlord Theme.s3m|Warlord_Theme.s3m|g' \
  data/missions/{mission*,hub,training} doc/pages/levelBuilding.html || exit 1

sed -i -e '/loadMusic/s|Autumns Dawning.s3m|Autumns_Dawning.s3m|g' \
  src/title.cpp || exit 1
sed -i -e '/loadMusic/s|Return To Napali.s3m|Return_To_Napali.s3m|g' \
  src/misc/cutscene.cpp || exit 1

( cd music || exit 1
  for f in *.xm *.s3m ;do
    mv "${f}" "${f// /_}"
  done
)

# Fix end of lines.
sed -i 's/\r//' makefile || exit 1

sed -i \
    -e "/^BINDIR = /s|games|bin|g;
        /^DATADIR = /s|games/||g;
        /^DOCDIR = /s|share/doc/\$(PROG)/|doc/${NAME}-${VERSION}|g;
        /^ICONDIR = /s|icons|icons/hicolor|g;
        /16x16\/apps/d;/64x64\/apps/d;s|32x32|48x48|g;
        /\$(LIBS)/s|\$(CXX)|\$(CXX) \$(LDFLAGS)|g" \
    -e '/^PAKDIRS/s|$| music sound|g' \
       makefile || exit 1

CFLAGS="${SLKCFLAGS}" \
make -j${NJOBS} || make || exit 1
mkdir -p ${PKG}/usr/share/{applications,icons/hicolor/48x48/apps}
make install DESTDIR=${PKG} || exit 1

mkdir -p ${PKG}/usr/man/man6
install -m0644 debian/blobAndConquer.6 \
               ${PKG}/usr/man/man6/ || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

rm -f ${PKG}/usr/share/blobAndConquer/data/fonts/vera.ttf
ln -sf ../../../fonts/TTF/DejaVuSans.ttf \
  ${PKG}/usr/share/blobAndConquer/data/fonts/vera.ttf || exit 1

desktop-file-install --vendor "" --delete-original \
  --dir ${PKG}/usr/share/applications \
  --remove-category Application \
  ${PKG}/usr/share/applications/${PNAME}.desktop || exit 1

( cd ${PKG}/usr/share/icons/hicolor
  for res in 16 32 ;do
    dir=${res}x${res}/apps
    mkdir -p ${res}x${res}/apps
    convert 48x48/apps/${PNAME}.png -filter Lanczos \
            -resize ${res}x${res} ${dir}/${PNAME}.png || exit 1
  done
) || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${NAME}-*.patch.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
