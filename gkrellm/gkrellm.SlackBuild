#!/bin/sh
#-- gkrellm for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.brg>
# Suggested usage: $ gkrellm.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://gkrellm.srcbox.net/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=gkrellm
NAME2=${NAME}-countdown
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.3.10}
VERSION2=${VERSION2:-0.1.1}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
DOCDIR2=${PKG}/usr/doc/${NAME2}-${VERSION2}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.bz2
SRCDIR2=${NAME2}
SRCARCHIVE2=${SRCDIR2}-${VERSION2}.tar.gz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://gkrellm.srcbox.net/${SRCARCHIVE}"
DL_URL2="http://www.cise.ufl.edu/~jcjones/src/${SRCARCHIVE2}"

[ "$1" = "--dlsrc" ] && exit 0

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
test -r ${CWD}/${SRCARCHIVE2} || ${DL_PROG} ${DL_OPTS} ${DL_URL2} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if test ${UID} != 0 && test "$(type -t fakeroot)" != 'file'; then
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1mkdir -p ${PKG}
cd ${SRCDIR} || exit 1
tar -xvf ${CWD}/${SRCARCHIVE2} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|-./usr/X11R6/lib||g' Makefile src/Makefile || exit 1

if [ -f ${CWD}/${NAME}-pt_BR.po.gz ] ;then
  zcat ${CWD}/${NAME}-pt_BR.po.gz > po/pt_BR.po || exit 1
fi

for i in gkrellmd.1 gkrellm.1 README Changelog Changelog-plugins.html; do
  sed -i -e "s@/usr/lib/gkrellm2/plugins@%/usr/lib${LIBDIRSUFFIX}/gkrellm2/plugins@" ${i}
  sed -i -e "s@/usr/lib/gkrellm/plugins@/usr/lib${LIBDIRSUFFIX}/gkrellm2/plugins@" ${i}
done
for i in gkrellmd.1 gkrellm.1 README Changelog Changelog-plugins.html; do
  sed -i -e "s@/usr/local/lib/gkrellm2/plugins@/usr/local/lib${LIBDIRSUFFIX}/gkrellm2/plugins@" ${i}
  sed -i -e "s@/usr/local/lib/gkrellm/plugins@/usr/local/lib${LIBDIRSUFFIX}/gkrellm2/plugins@" ${i}
done

# Fix library paths (works for all ARCHs):
sed -i -e "s#lib/gkrellm2#lib${LIBDIRSUFFIX}/gkrellm2#g" $(grep -lr 'lib/gkrellm2' *)

sed -i \
    -e "/^FLAGS =/s|-O2|${SLKCFLAGS} -D_GNU_SOURCE|g" \
    -e "/\$(LINK_FLAGS)/s|$| $(pkg-config --libs gmodule-2.0)|g" \
    {server,src}/Makefile || exit 1

make -j${NJOBS} \
  INSTALLDIR=/usr/bin \
  INCLUDEDIR=/usr/include \
  LIBDIR=/usr/lib${LIBDIRSUFFIX} \
  MANDIR=/usr/man/man1 \
  LOCALEDIR=/usr/share/locale \
  PKGCONFIGDIR=/usr/lib${LIBDIRSUFFIX}/pkgconfig || exit 1

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/gkrellm2/plugins
mkdir -p ${PKG}/usr/share/gkrellm2/themes

# Install to the ${PKG} dir:
make install \
  INSTALLDIR=${PKG}/usr/bin \
  INCLUDEDIR=${PKG}/usr/include \
  LIBDIR=${PKG}/usr/lib${LIBDIRSUFFIX} \
  MANDIR=${PKG}/usr/man/man1 \
  LOCALEDIR=${PKG}/usr/share/locale \
  PKGCONFIGDIR=${PKG}/usr/lib${LIBDIRSUFFIX}/pkgconfig || exit 1

mkdir ${PKG}/etc
install -m 0644 server/gkrellmd.conf ${PKG}/etc/gkrellmd.conf.new

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/${NAME}d.service ${PKG}/lib/systemd/system/ || exit 1

# Add optional plugin(s):
# The countdown plugin is needed to track X-Day.  ;-)
( cd ${SRCDIR2} || exit 1

  chmod -R u+w,go+r-w,a-s .

  sed -i \
      -e "/^FLAGS =/s|-O2|${SLKCFLAGS} -I${PKG}/usr/include|g" \
      -e '/^LFLAGS =/s|$| $(LDFLAGS) -Wl,--as-needed|g' Makefile || exit 1

  make -j${NJOBS} || make || exit 1
  install -m 0755 ${NAME2}.so ${PKG}/usr/lib${LIBDIRSUFFIX}/gkrellm2/plugins/ || exit 1
) || exit 1

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/applications
cat > ${PKG}/usr/share/applications/${NAME}.desktop <<EOF
[Desktop Entry]
Name=GKrellM System Monitor
GenericName=GNU Krell Monitors
GenericName[pt_BR]=Monitores Krell GNU
Type=Application
Comment=Monitor for CPU, memory, disks, network, mail
Exec=${NAME}
Icon=${NAME}
StartupNotify=true
StartupWMClass=gkrellm
Terminal=false
Categories=System;Monitor;
EOF

# Install the icon for the menu entry
for res in 16 24 48 64 ;do
  dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
  mkdir -p ${dir}
  icotool -x --width=${res} --height=${res} --bit-depth=32 -o src \
    src/${NAME}.ico || exit 1
  install -p -m 644 src/*${res}x${res}*.png \
    ${dir}/${NAME}.png || exit 1
done

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  Changelog*.html COPYRIGHT CREDITS README Themes.html ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

( cd ${SRCDIR2}
  mkdir -p ${DOCDIR2}
  cp -a \
    COPYING ChangeLog README \
    ${DOCDIR2}/
  find ${DOCDIR2}/ -type d -print0 | xargs -0 chmod 0755
  find ${DOCDIR2}/ -type f -print0 | xargs -0 chmod 0644
)

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database /usr/share/applications >/dev/null 2>&1
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}*.po.gz ${CWD}/${NAME}d.service ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
else
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
