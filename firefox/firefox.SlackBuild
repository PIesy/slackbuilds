#!/bin/bash
#-- firefox for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ firefox.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil..
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.mozilla.org/projects/firefox/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}

NAME=firefox
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-42.0}
FXAPP_ID="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"
SLKDIST=${SLKDIST:-Slackware}
SLKVER=${SLKVER:-$(awk '{print $2}' /etc/slackware-version)}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
  LARCH=${ARCH}
else
  SLKTARGET=${SLKTARGET:-i586}
  LARCH=i686
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable languages.
SB_LANG=${SB_LANG:-YES}

# If you enable official branding, do not redistribute this build
# to any users on your network or the internet. Doing so puts yourself into
# a legal problem with mozilla foundation"
SB_OFFICIAL=${SB_OFFICIAL:-YES}

# If not official, set a name you like (else it will take the default from Mozilla)
SB_NOFFICIAL_NAME=${SB_NOFFICIAL_NAME:-}

# Set to YES to add custom UA (from SLKDIST)
SB_UA=${SB_UA:-NO}
# Set to YES to enable system cairo
SB_CAIRO=${SB_CAIRO:-NO}
# Set to YES to enable KDE integration support
# do not push any dependencies, needs optional kmozillahelper and kde session
SB_KDE=${SB_KDE:-YES}
# Set to YES to enable pulseaudio support
SB_PA=${SB_PA:-YES}
# Set to YES to enable Social API
SB_SOCIAL=${SB_SOCIAL:-NO}
# Set to YES to enable WebGL
SB_WEBGL=${SB_WEBGL:-YES}
# Set to YES to enable WebRTC
SB_WEBRTC=${SB_WEBRTC:-NO}
# Set to YES to enable WebSMS backend
SB_WEBSMS=${SB_WEBSMS:-NO}
# Set to YES to enable HTML Speech API
SB_WEBSPEECH=${SB_WEBSPEECH:-NO}

DATE=$(LC_ALL=C date +%d-%b-%Y)

if ! [ -x /usr/bin/autoconf-2.13 ] ;then
  echo 'Needs autoconf-2.13 (autoconf213) installed!'
  exit 1
fi

SB_LANGS=${SB_LANGS:-"ach af an ar as ast az be bg bn-BD bn-IN br bs ca cs cy da de dsb el en-GB en-US en-ZA eo es-AR es-CL es-ES es-MX et eu fa ff fi fr fy-NL ga-IE gd gl gu-IN he hi-IN hr hsb hu hy-AM id is it ja kk km kn ko lij lt lv mai mk ml mr ms nb-NO nl nn-NO or pa-IN pl pt-BR pt-PT rm ro ru si sk sl son sq sr sv-SE ta te th tr uk uz vi xh zh-CN zh-TW"}
NOSHORTLANGS=${NOSHORTLANGS:-"en-GB es-AR es-CL es-MX pt-BR zh-TW"}
LANGDIR=${CWD}/langpacks/${VERSION}/${LARCH}
LANGDOWNALL=${LANGDOWNALL:-NO}

# Set default page
SB_INDEXHTML=${SB_INDEXHTML:-http://www.slackware.com/}

# Set default mail application
SB_DMAILPN=${SB_DMAILPN:-Thunderbird}
SB_DMAIL=${SB_DMAIL:-/usr/bin/thunderbird}

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.source.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_MOZ=${MIRROR_MOZ:-http://download.cdn.mozilla.net/pub/mozilla.org}
DL_URL="${MIRROR_MOZ}/${NAME}/releases/${VERSION}/source"
LDL_URL="${MIRROR_MOZ}/${NAME}/releases/${VERSION}/linux-${LARCH}/xpi"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} || exit 1
test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SSRCARCHIVE}

if [ "${SB_LANG}" = "YES" ] ;then
  SB_LANGS=${SB_LANGS/_/-}

  echo -n "Selected langpacks: "
  echo ${SB_LANGS}
  sleep 5

  mkdir -p ${LANGDIR}

( cd ${LANGDIR} || exit 1
  if [ "${LANGDOWNALL}" = "NO" ] ;then
    for lang in ${SB_LANGS} ;do
      test -r ${lang}.xpi || ${DL_PROG} ${DL_OPTS} ${LDL_URL}/${lang}.xpi || exit 1
    done
  else
    wget -m -np -c -nd ${LDL_URL}/
    rm -f ${LANGDIR}/{index.*,robots.txt,.listing}
  fi
) || exit $?
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi
if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

# Get lenght for firefox-chinfo-ua.patch (SLKDIST + "; ")
SLKLENGHT=$(( $(echo -n ${SLKDIST} | wc -c) + 2 ))

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

rm -rf gcc/ gcc.tar.xz

unset DBUS_SESSION_BUS_ADDRESS ORBIT_SOCKETDIR SESSION_MANAGER
unset XDG_SESSION_COOKIE XAUTHORITY MAKEFLAGS SDL_LINUX_JOYSTICK

rm -f .mozconfig
cat ${CWD}/${NAME}-mozconfig > .mozconfig || exit 1

if [ "${SB_CAIRO}" = "YES" ] ;then
  echo "ac_add_options --enable-system-cairo" >> .mozconfig
else
  echo "ac_add_options --disable-system-cairo" >> .mozconfig
fi

if [ "${SB_PA}" = "YES" ] ;then
  echo "ac_add_options --enable-pulseaudio" >> .mozconfig
else
  echo "ac_add_options --disable-pulseaudio" >> .mozconfig
fi

if [ "${SB_WEBGL}" = "YES" ] ;then
  echo "ac_add_options --enable-webgl" >> .mozconfig
else
  echo "ac_add_options --disable-webgl" >> .mozconfig
fi

if [ "${SB_WEBRTC}" = "YES" ] ;then
  echo "ac_add_options --enable-webrtc" >> .mozconfig
else
  echo "ac_add_options --disable-webrtc" >> .mozconfig
fi

if [ "${SB_WEBSMS}" = "YES" ] ;then
  echo "ac_add_options --enable-websms-backend" >> .mozconfig
else
  echo "ac_add_options --disable-websms-backend" >> .mozconfig
fi

if [ "${SB_WEBSPEECH}" = "YES" ] ;then
  echo "ac_add_options --enable-webspeech" >> .mozconfig
else
  echo "ac_add_options --disable-webspeech" >> .mozconfig
fi

rm -f configure

if [ "${SB_SOCIAL}" != "YES" ] ;then
  sed -i \
    -e '/MOZ_SOCIAL=/s|=1|=|g'\
    configure.in || exit 1
fi

sed -i \
  -e '/MOZ_ENABLE_GCONF=/s|=1|=|g'\
  -e '/MOZ_ENABLE_GNOMEVFS=/s|=1|=|g' \
  -e '/MOZ_ENABLE_LIBGNOME=/s|=1|=|g' \
  configure.in || exit 1

if [ "${SB_OFFICIAL}" = "YES" ] ;then
  echo 'ac_add_options --enable-official-branding' >> .mozconfig || exit 1
else
  echo 'ac_add_options --with-branding=browser/branding/unofficial' >> .mozconfig || exit 1
  if [ "${SB_NOFFICIAL_NAME}" ] ;then
    sed -i -e "s|MozillaDeveloperPreview|$(echo ${SB_NOFFICIAL_NAME} | sed -e 's| ||g')|g" \
      browser/branding/{nightly,unofficial}/configure.sh || exit 1
    sed -i -e "s|Mozilla Developer Preview|${SB_NOFFICIAL_NAME}|g" \
      browser/branding/unofficial/locales/en-US/brand.{dtd,properties} || exit 1
  fi
fi

echo "ac_add_options --build=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1
echo "ac_add_options --host=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1
echo "ac_add_options --target=${SLKTARGET}-${SLKDTARGET}-linux" >> .mozconfig || exit 1

sed -i -e '/-pedantic-errors/d' security/pkix/warnings.mozbuild || exit 1

# Mozilla builds with -Wall with exception of a few warnings which show up
# everywhere in the code; so, don't override that.
MOZ_OPT_FLAGS="$(echo ${SLKCFLAGS} | sed -e 's/-Wall//') -fPIC -Wl,-z,relro -Wl,-z,now"

export CFLAGS="${MOZ_OPT_FLAGS}"
export CXXFLAGS="${MOZ_OPT_FLAGS} -fpermissive"

export PREFIX='/usr'
export LIBDIR="/usr/lib${LIBDIRSUFFIX}"

mozappdir=/usr/lib${LIBDIRSUFFIX}/${NAME}

export LDFLAGS="-Wl,-rpath,${mozappdir} ${LDFLAGS}"
make -f client.mk build STRIP="/bin/true" MOZ_MAKE_FLAGS="-j${NJOBS}" MOZ_SERVICES_SYNC="1" || exit $?

# set up our default preferences
cat ${CWD}/${NAME}-chinfo-default-prefs.js > slk-default-prefs

if [ "${SB_WEBRTC}" != "YES" ] ;then
cat >> slk-default-prefs << EOF
pref("loop.enabled", false);
EOF
fi

# Set up default homepage and mail app
cat >> slk-default-prefs << EOF
pref("browser.startup.homepage", "data:text/plain,browser.startup.homepage=about:newtab");
pref("browser.newtabpage.pinned", '[{"url":"${SB_INDEXHTML}","title":"${SLKDIST} - Start Page"}]')
pref("network.protocol-handler.app.mailto", "${SB_DMAIL}");
EOF

cp slk-default-prefs objdir/dist/bin/browser/defaults/preferences/all-slackware.js || exit 1
#sed -i \
#  -e 's|@BINPATH@/browser/@PREF_DIR@/firefox.js|@BINPATH@/browser/@PREF_DIR@/all-slackware.js\n&|' \
#  browser/installer/package-manifest.in || exit 1

# Export correct locale
cat > objdir/dist/bin/browser/defaults/preferences/firefox-l10n.js << EOF
pref("general.useragent.locale", "chrome://global/locale/intl.properties");
EOF

# resolves bug rh#461880
cat > objdir/dist/bin/browser/chrome/en-US/locale/branding/browserconfig.properties << EOF
browser.startup.homepage=${SB_INDEXHTML}
EOF

if [ "${SB_KDE}" = "YES" ] ;then
cat >> objdir/dist/bin/defaults/pref/kde.js << 'EOF'
pref("browser.preferences.instantApply", false);
EOF
fi

DESTDIR=${PKG} make -C objdir install INSTALL_SDK= || exit 1

# Use ${NAME} as directory
if [ -d ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}-${VERSION} ] ; then
  if [ "${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}-${VERSION}" != "${PKG}/${mozappdir}" ] ;then
    mv ${PKG}/usr/lib${LIBDIRSUFFIX}/${NAME}-${VERSION} ${PKG}/${mozappdir} || exit 1
  fi
fi

mkdir -p ${PKG}/usr{/lib${LIBDIRSUFFIX},/bin,/share/applications}

# Start script install
rm -f ${PKG}/usr/bin/${NAME}
install -pm0755 ${CWD}/${NAME}.sh.in \
  ${PKG}/usr/bin/${NAME} || exit 1

rm -f ${PKG}/${mozappdir}/${NAME}-config
rm -f ${PKG}/${mozappdir}/update-settings.ini

rm -rf ${PKG}/usr/lib*/pkgconfig
rm -rf ${PKG}/usr/include
rm -rf ${PKG}/usr/lib*/${NAME}-devel-*
rm -rf ${PKG}/usr/lib*/${NAME}-devel*
rm -rf ${PKG}/usr/share/idl

rm -f ${PKG}${mozappdir}/removed-files

# https://bugzilla.mozilla.org/show_bug.cgi?id=658850
# Duplicated. Unneeded for packages without updater support
ln -sf firefox ${PKG}/${mozappdir}/firefox-bin || exit 1

# Use the system hunspell dictionaries
rm -rf ${PKG}${mozappdir}/dictionaries
ln -s ../../share/myspell ${PKG}${mozappdir}/dictionaries

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

FX_ICON(){
  install -m0644 ${1}/mozicon128.png \
    ${PKG}/usr/share/icons/hicolor/128x128/apps/${NAME}.png || exit 1
  for res in $2 ;do
    dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
    mkdir -p ${dir}
    install -m0644 ${1}/default${res}.png ${dir}/${NAME}.png || exit 1
  done
}

mkdir -p ${PKG}/${mozappdir}/chrome/icons/default/
mkdir -p ${PKG}/usr/share/icons/hicolor/128x128/apps
if [ "${SB_OFFICIAL}" = "YES" ] ;then
  FX_ICON "browser/branding/official" "16 22 24 32 48 256"
else
  FX_ICON "browser/branding/unofficial" "16 32 48"
fi

# Install hight contrast icon
mkdir -p ${PKG}/usr/share/icons/hicolor/symbolic/apps
install -pm0644 ${CWD}/firefox-symbolic.svg \
  ${PKG}/usr/share/icons/hicolor/symbolic/apps/ || exit 1

if [ "${SB_LANG}" = "YES" ] ;then
  langpackdir="${mozappdir}/langpacks"
  # Extract langpacks, make any mods needed, repack the langpack, and install it.
  mkdir -p ${PKG}/${langpackdir}
  for langpack in ${LANGDIR}/*.xpi; do
    language=$(basename ${langpack} .xpi)
    extensionID=langpack-${language}@firefox.mozilla.org
    mkdir -p ${extensionID}
    unzip -qq ${langpack} -d ${extensionID} || exit 1
    find ${extensionID} -type f | xargs chmod 644

    sed -i \
      -e "s|browser.startup.homepage.*$|browser.startup.homepage=${SB_INDEXHTML}|g;" \
      ${extensionID}/browser/chrome/${language}/locale/branding/browserconfig.properties

    ( cd ${extensionID} || exit 1
      zip -qq -r9mX ../${extensionID}.xpi * || exit 1
    )

    install -m 644 ${extensionID}.xpi ${PKG}/${langpackdir}/ || exit 1

  done

  # Install langpack workaround (see rh#707100, rh#821169)
  function create_default_langpack() {
    language_long=$1
    language_short=$2
    ( cd ${PKG}/${langpackdir}
      if [ -e langpack-${language_long}@firefox.mozilla.org.xpi ] ;then
        ln -s langpack-${language_long}@firefox.mozilla.org.xpi langpack-${language_short}@firefox.mozilla.org.xpi
      fi
    )
  }

  # Table of fallbacks for each language
  # please file a bug at bugzilla.redhat.com if the assignment is incorrect
  create_default_langpack "bn-IN" "bn"
  create_default_langpack "es-AR" "es"
  create_default_langpack "fy-NL" "fy"
  create_default_langpack "ga-IE" "ga"
  create_default_langpack "gu-IN" "gu"
  create_default_langpack "hi-IN" "hi"
  create_default_langpack "hy-AM" "hy"
  create_default_langpack "nb-NO" "nb"
  create_default_langpack "nn-NO" "nn"
  create_default_langpack "pa-IN" "pa"
  create_default_langpack "pt-PT" "pt"
  create_default_langpack "sv-SE" "sv"
  create_default_langpack "zh-TW" "zh"

fi

mkdir -p ${PKG}/${mozappdir}/browser/defaults/preferences

# System extensions
mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/mozilla/extensions/${FXAPP_ID}
mkdir -p ${PKG}/usr/share/mozilla/extensions/${FXAPP_ID}

mkdir -p ${PKG}/usr/lib${LIBDIRSUFFIX}/mozilla/plugins

install -pm0644 ${CWD}/${NAME}.desktop \
  ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

desktop-file-install --vendor mozilla \
  --delete-original \
  --dir ${PKG}/usr/share/applications \
  --add-category WebBrowser \
  --add-category Network \
  ${PKG}/usr/share/applications/${NAME}.desktop || exit 1

mkdir -p ${PKG}/usr/man/man1
install -pm0644 ${CWD}/${NAME}.1 \
  ${PKG}/usr/man/man1/${NAME}.1 || exit 1

# Copy over the LICENSE
install -p -c -m 644 LICENSE ${PKG}/${mozappdir}/

# Remove tmp files
find ${PKG}/${mozappdir}/modules -name '.mkdir.done' -delete

# ghost files
touch ${PKG}/${mozappdir}/components/compreg.dat
touch ${PKG}/${mozappdir}/components/xpti.dat

rm -f ${PKG}/${mozappdir}/firefox-config
rm -f ${PKG}/${mozappdir}/update-settings.ini

# jemalloc shows up sometimes, but it's not needed here, it's in XR
rm -f ${PKG}/${mozappdir}/libjemalloc.so

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  LICENSE ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
sed -e "s|_VERSION_|${VERSION}|g" ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
if [ -f ${mozappdir#\/}/components/compreg.dat ] ;then
  \${CHROOT} rm -f /${mozappdir#\/}/components/compreg.dat 1> /dev/null 2> /dev/null
fi
if [ -f ${mozappdir#\/}/components/xpti.dat ] ;then
  \${CHROOT} rm -f /${mozappdir#\/}/components/xpti.dat 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/hicolor > /dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/${NAME}-mozconfig ${CWD}/*-symbolic.svg \
    ${CWD}/*.rdf.gz ${CWD}/*.{js,1} ${CWD}/*.sh.in ${CWD}/*.desktop \
    ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
