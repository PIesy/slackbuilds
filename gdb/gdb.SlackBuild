#!/bin/sh
#-- gdb for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ gdb.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://gnu.org/software/gdb/

# Installation and testsuite borrowed from Fedora spec

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=gdb
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-7.12}
RVER=${VERSION%[a-z]}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
SLKDIST=${SLKDIST:-Slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable test (needs dejagnu)
SB_TEST=${SB_TEST:-NO}

PYABI=$(python2 -c 'import sys; sys.stdout.write(sys.version[:3])')

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${RVER}
SRCARCHIVE=${NAME}-${VERSION}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.sig

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_GNU=${MIRROR_GNU:-http://ftp.gnu.org/gnu}
DL_URL="${MIRROR_GNU}/${NAME}"
DL_URLB="ftp://sourceware.org/pub/gdb/snapshots/current"
FEDORADIST=fedora-dist.sh
FEDORABRANCH=${FEDORABRANCH:-devel}

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${file}
done
if ! test -r ${CWD}/${SRCARCHIVE} ;then
  SRCARCHIVE=${SRCDIR}.tar.bz2
  sh ${CWD}/${FEDORADIST} ${NAME} ${FEDORABRANCH} ${SRCARCHIVE} || exit 1
fi

[ "$1" = "--dlsrc" ] && exit 0

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

SB_SROOT="$(pwd)"

chmod -R u+w,go+r-w,a-s .

# Files have `# <number> <file>' statements breaking VPATH / find-debuginfo.sh .
rm -f gdb/ada-exp.c gdb/ada-lex.c gdb/c-exp.c gdb/cp-name-parser.c gdb/f-exp.c
rm -f gdb/jv-exp.c gdb/m2-exp.c gdb/objc-exp.c gdb/p-exp.c

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

find -name "*.orig" | xargs rm -f

# Ugly temporary hack for python 2.7 support
if [ "${PYABI//.}" -gt "26" ] &&  [ "${PYABI//.}" -lt "30" ] ;then 
  sed -i -e "s|python2\.6|python${PYABI}|g" \
    gdb/configure gdb/python/python-internal.h || exit 1
fi

rm -f libdecnumber/gstdint.h
rm -f bfd/doc/*.info
rm -f bfd/doc/*.info-*
rm -f gdb/doc/*.info
rm -f gdb/doc/*.info-*

mv -f readline/doc readline-doc
rm -rf readline/*
mv -f readline-doc readline/doc

cat > gdb/version.in << _FOO
${SLKDIST} (${VERSION}-${BUILD})
_FOO

mkdir -p build-gdb-${VERSION}
cd build-gdb-${VERSION} || exit 1

g77="$(which gfortran 2>/dev/null || true)"
test -z "$g77" || ln -s "$g77" ./g77

export CFLAGS="${SLKCFLAGS}"
export CXXFLAGS="${SLKCFLAGS}"
export BINUTILS_LD=bfd

../configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --with-system-gdbinit=/etc/gdbinit \
  --with-gdb-datadir=/usr/share/gdb \
  --enable-gdb-build-warnings=,-Wno-unused \
  --disable-sim \
  --disable-rpath \
  --with-system-readline \
  --with-expat \
  --with-guile \
  --with-babeltrace \
  --enable-tui \
  --without-rpm \
  --with-python=/usr/bin/python2 \
  --with-pythondir=/usr/share/gdb/python \
  --without-libunwind \
  --enable-64-bit-bfd \
  --with-auto-load-dir='$debugdir:$datadir/auto-load' \
  --with-auto-load-safe-path='$debugdir:$datadir/auto-load' \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

make -j${NJOBS} || make || exit 1
make -j${NJOBS} info || exit 1


if [ "${SB_TEST}" = "YES" ] ;then

echo "====================TESTING========================="
( cd gdb || exit 1
  set -e
  unset CFLAGS
  zcat ${CWD}/gdb-orphanripper.c.gz > gdb-orphanripper.c
  gcc -o ./orphanripper gdb-orphanripper.c -Wall -lutil
# Need to use a single --ignore option, second use overrides first.
# No "-j${NJOBS}" here as it may race.
# WARNING: can't generate a core file - core tests suppressed - check ulimit
# "readline-overflow.exp" - Testcase is broken, functionality is OK.
(
  # ULIMIT required for `gdb.base/auxv.exp'.
  ulimit -H -c
  ulimit -c unlimited || :

  # Setup $CHECK as `check//unix/' or `check//unix/-m64' for explicit bitsize.
  # Never use two different bitsizes as it fails on ppc64.
  echo 'int main (void) { return 0; }' >biarch.c
  CHECK=""
  for BI in -m64 -m32 -m31 ""
  do
    # Do not use size-less options if any of the sizes works.
    # On ia64 there is no -m64 flag while we must not leave a bare `check' here
    # as it would switch over some testing scripts to the backward compatibility
    # mode: when `make check' was executed from inside the testsuite/ directory.
    if [ -z "$BI" -a -n "$CHECK" ];then
      continue
    fi

    if ! gcc ${BI} -o biarch biarch.c
    then
      continue
    fi
    CHECK="$CHECK check//unix/$BI"
  done
  # Do not try -m64 inferiors for -m32 GDB as it cannot handle inferiors larger
  # than itself.
  # s390 -m31 still uses the standard ELF32 binary format.
  gcc ${SLKCFLAGS} -o biarch biarch.c || exit 1
  RPM_SIZE="$(file ./biarch|sed -n 's/^.*: ELF \(32\|64\)-bit .*$/\1/p')"
  if [ "$RPM_SIZE" != "64" ]
  then
    CHECK="$(echo " ${CHECK} "|sed 's# check//unix/-m64 # #')"
  fi

  # Disable some problematic testcases.
  # RUNTESTFLAGS='--ignore ...' is not used below as it gets separated by the
  # `check//...' target spawn and too much escaping there would be dense.
  for test in \
    gdb.base/readline-overflow.exp \
    gdb.base/bigcore.exp \
  ; do
    mv -f ../../gdb/testsuite/${test} ../gdb/testsuite/${test}-DISABLED || :
  done

  # Run all the scheduled testsuite runs also in the PIE mode.
  # Upstream GDB would lock up the testsuite run for too long on its failures.
  CHECK="$(echo $CHECK|sed 's#check//unix/[^ ]*#& &/-fPIE/-pie#g')"

  # FIXME: Temporary F12 disable: ./orphanripper
  make -j${NJOBS} -k ${CHECK} || :
)
for t in sum log
do
  for file in testsuite*/gdb.${t}
  do
    suffix="${file#testsuite.unix.}"
    suffix="${suffix%/gdb.$t}"
    ln ${file} gdb-${SLKTARGET}-${SLKDTARGET}-linux${suffix}.${t} || :
  done
done
# `tar | bzip2 | uuencode' may have some piping problems in Brew.
tar cjf gdb-${SLKTARGET}-${SLKDTARGET}-linux.tar.bz2 \
  gdb-${SLKTARGET}-${SLKDTARGET}-linux*.{sum,log}
uuencode gdb-${SLKTARGET}-${SLKDTARGET}-linux.tar.bz2 \
  gdb-${SLKTARGET}-${SLKDTARGET}-linux.tar.bz2
set +e
echo "====================TESTING END====================="
) || exit 1
fi

make -j${NJOBS} install DESTDIR=${PKG} || exit 1

cd ${SB_SROOT} || exit 1

mkdir -p ${PKG}/etc/gdbinit.d
cat > ${PKG}/etc/gdbinit <<'EOF'
# System-wide GDB initialization file.
python
import glob
for f in glob.iglob('/etc/gdbinit.d/*.gdb'):
  gdb.execute('source %s' % f)
for f in glob.iglob('/etc/gdbinit.d/*.py'):
  gdb.execute('source %s' % f)
end
EOF

( cd ${PKG}/usr/share/gdb/python/gdb
  python -mcompileall .
)

for dir in bin sbin lib usr/bin usr/sbin usr/lib ;do
  mkdir -p ${PKG}/usr/share/gdb/auto-load/${dir}
done
if [ "${ARCH}" = "x86_64" ] ;then
  for dir in lib${LIBDIRSUFFIX} usr/lib${LIBDIRSUFFIX} ;do
    mkdir -p ${PKG}/usr/share/gdb/auto-load/${dir}
  done
fi

# Remove the files that are part of a gdb build but that are owned and
# provided by other packages.
# These are part of binutils

rm -rf ${PKG}/usr/share/locale/
rm -f ${PKG}/usr/info/bfd*
rm -f ${PKG}/usr/info/standard*
rm -f ${PKG}/usr/info/mmalloc*
rm -f ${PKG}/usr/info/configure*
rm -f ${PKG}/usr/info/gdbint*
rm -f ${PKG}/usr/info/stabs*
rm -rf ${PKG}/usr/include
rm -rf ${PKG}/usr/lib*/lib{bfd*,opcodes*,iberty*,mmalloc*}
rmdir ${PKG}/usr/lib*

zcat ${CWD}/gdb-gstack.man.gz > ${PKG}/usr/man/man1/gstack.1
ln -s gstack.1.gz ${PKG}/usr/man/man1/pstack.1.gz
ln -s gstack ${PKG}/usr/bin/pstack

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}/gdb
cp -a \
  COPYING* README ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
cp gdbserver/README ${DOCDIR}/README.gdbserver
( cd gdb || exit 1
  cp -a NEWS README TODO ${DOCDIR}/gdb/ 
)
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

# Compress info pages, if any:
if [ -d ${PKG}/usr/info ]; then
  ( cd ${PKG}/usr/info
    rm -f dir
    gzip -9 *.info*
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
#!/bin/sh
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi
# Install the info files for this package
if [ -x usr/bin/install-info ] ; then
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/${NAME}.info.gz 2>/dev/null
  \${CHROOT} /usr/bin/install-info --info-dir=/usr/info usr/info/annotate.info.gz 2>/dev/null
fi

EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/gdb-*.c.gz ${CWD}/gdb-*.man.gz \
                 ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
