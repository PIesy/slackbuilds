#!/bin/sh
#-- vlc for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ vlc.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://www.videolan.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=vlc
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-2.2.1}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-2}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCARCHIVE}.asc

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://download.videolan.org/pub/videolan/${NAME}/${VERSION}"
DL_URLB="http://download.videolan.org/pub/testing/${NAME}-${VERSION}"
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URLC="${MIRROR_SF}/${NAME}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SRCARCHIVE} \
  || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URLC}/${SRCARCHIVE} || exit 1
test -r ${CWD}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${SSRCARCHIVE} \
  || ${DL_PROG} ${DL_OPTS} ${DL_URLB}/${SSRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URLC}/${SSRCARCHIVE}

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
  ARCHOPTS="--without-contrib"
else
  LIBDIRSUFFIX=""
  ARCHOPTS=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

# No, no
sed -i \
  -e 's| -O4"|"|g' \
  -e 's| -O3"|"|g' \
  configure.ac || exit 1

rm -f aclocal.m4 m4/lib*.m4 m4/lt*.m4
./bootstrap || exit 1

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var/lib \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-dependency-tracking \
  --disable-rpath \
  --with-binary-version=${VERSION}-${BUILD} \
  --enable-udev \
  --enable-lua \
  --disable-opencv \
  --enable-wma-fixed \
  --disable-gst-decode \
  --enable-shine \
  --enable-faad \
  --enable-twolame \
  --enable-realrtsp \
  --enable-flac \
  --enable-tremor \
  --enable-speex \
  --enable-theora \
  --enable-libass \
  --enable-shout \
  --enable-dvdread \
  --enable-dvdnav \
  --enable-sftp \
  --enable-xcb \
  --enable-svg \
  --enable-aa \
  --enable-caca \
  --enable-jack \
  --enable-pulse \
  --enable-chromaprint \
  --enable-ncurses \
  --enable-libva \
  --disable-upnp \
  --disable-gnomevfs \
   ${ARCHOPTS} \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

sed -i.rpath 's|^hardcode_libdir_flag_spec=.*|hardcode_libdir_flag_spec=""|g' libtool
sed -i.rpath 's|^runpath_var=LD_RUN_PATH|runpath_var=DIE_RPATH_DIE|g' libtool
sed -i -e 's! -shared ! -Wl,--as-needed\0!g' libtool

export LD_LIBRARY_PATH="$(pwd)/src/.libs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
make -j${NJOBS} || make || exit 1
make install DESTDIR=${PKG} INSTALL="install -p" CPPROG="cp -p" || exit 1

find ${PKG} -name '*.la' -exec rm -f {} ';'
find ${PKG} -name '*.a' -exec rm -f {} ';'

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

touch ${PKG}/usr/lib${LIBDIRSUFFIX}/vlc/{,plugins/}plugins.dat

mkdir -p ${PKG}/usr/man/man1
install -pm 644 doc/vlc*.1 ${PKG}/usr/man/man1/ || exit 1

rm -f ${PKG}/usr/share/icons/hicolor/*/*/*.xpm
for i in 16x16 32x32 48x48 128x128 256x256 ; do
  dir=${PKG}/usr/share/icons/hicolor/${i}/apps
  ( cd ${dir}
    for file in *.png ;do mv ${file} ${file/$i/} ;done
  )
done

# Remove installed fonts for skin2
rm -rf ${PKG}/usr/share/vlc/skin2/fonts/*.ttf
ln -sf ../../../fonts/TTF/DejaVuSans.ttf \
  ${PKG}/usr/share/vlc/skins2/fonts/FreeSans.ttf
ln -sf ../../../fonts/TTF/DejaVuSans-Bold.ttf  \
  ${PKG}/usr/share/vlc/skins2/fonts/FreeSansBold.ttf

rm -rf ${PKG}/usr/share/doc

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING MAINTAINERS NEWS README THANKS ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

if [ -x usr/lib${LIBDIRSUFFIX}/vlc/vlc-cache-gen ]; then
  \${CHROOT} /usr/lib${LIBDIRSUFFIX}/vlc/vlc-cache-gen -f /usr/lib${LIBDIRSUFFIX}/vlc &>/dev/null
fi
if [ -x usr/bin/update-desktop-database ]; then
  \${CHROOT} /usr/bin/update-desktop-database 1> /dev/null 2> /dev/null
fi
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache -q /usr/share/icons/hicolor > /dev/null 2>&1
fi

EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc ${MPPKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc* ${CWD}/slack-required* ${CWD}/ChangeLog.SB \
                 ${CWD}/apply-patches.sh ${CWD}/*.schemas.gz ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKGF} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
