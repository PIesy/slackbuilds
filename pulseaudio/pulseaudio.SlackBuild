#!/bin/sh
#-- pulseaudio for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ pulseaudio.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://pulseaudio.org

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

SNAPBUILD=${SNAPBUILD:-NO}

NAME=pulseaudio
PKG=${PKG:-${TMP}/package-${NAME}}

if [ "${SNAPBUILD}" = "YES" ] ;then
  VERSION=${VERSION:-"$(LC_ALL=C date +%Y%m%d)"}
  SNAPBRANCH=${SNAPBRANCH:-master}
else
  VERSION=${VERSION:-7.1}
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable jack support
SB_JACK=${SB_JACK:-YES}
# Set to YES to enable avahi zeroconf support
SB_AVAHI=${SB_AVAHI:-YES}
# Set to YES to force systemd support (drops ConsoleKit support/needs PAM)
SB_SYSTEMD=${SB_SYSTEMD:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

grep --quiet '^pulse:' /etc/group && SB_HGROUP=1
grep --quiet '^pulse:' /etc/passwd && SB_HUSER=1

SRCDIR=${NAME}-${VERSION}
SRCARCHIVE=${SRCDIR}.tar.xz

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
DL_URL="http://freedesktop.org/software/${NAME}/releases/${SRCARCHIVE}"
SNAPUPDATE=${NAME}-snapshot.sh
export snap=${VERSION}

# if source is not present, download in source rootdir if possible, or in /tmp
if [ "${SNAPBUILD}" = "YES" ] ;then
  test -r ${CWD}/${SRCARCHIVE} || sh ${CWD}/${SNAPUPDATE} || exit 1
else
  test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

bash_completion_dir=/usr/share/bash-completion/completions
zsh_completion_dir=/usr/share/zsh/site-functions

# seds adapted from Arch
sed -e '/exit-idle-time/iexit-idle-time=1' \
  -i src/daemon/daemon.conf.in || exit 1

sed -i -e 's|/.*module-x11-publish|#&|g' src/daemon/start-pulseaudio-x11.in || exit 1

sed -e $'/load-module module-console-kit/{i.nofail\n;a.fail\n;}' \
  -i src/daemon/default.pa.in || exit 1
# end of Arch seds

if [ "${SB_SYSTEMD}" = "YES" ] ;then
  sed -i.no_consolekit -e \
    's/^load-module module-console-kit/#load-module module-console-kit/' \
    src/daemon/default.pa.in
fi

if [ "${SB_AUTOGEN}" = "YES" ] ;then
  autopoint --force || exit $?
  AUTOPOINT='intltoolize --automake --copy --force' \
    autoreconf -ivf || exit $?
fi

sed -i -e "s|\"/lib /usr/lib|\"/lib${LIBDIRSUFFIX} /usr/lib${LIBDIRSUFFIX}|" \
  configure || exit 1

unset SB_AVAHIOPTS SB_JACKOPTS SB_SYSTEMDOPTS
[ "${SB_JACK}" = "YES" ] || SB_JACKOPTS="--disable-jack"
[ "${SB_AVAHI}" = "YES" ] || SB_AVAHIOPTS="--disable-avahi"
[ "${SB_SYSTEMD}" = "YES" ] || SB_SYSTEMDOPTS='--disable-systemd-login --disable-systemd-journal'

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --disable-silent-rules \
  --disable-static \
  --disable-rpath \
  --disable-silent-rules \
  --with-system-user=pulse \
  --with-system-group=pulse \
  --with-access-group=pulse-access \
  ${SB_JACKOPTS} ${SB_AVAHIOPTS} ${SB_SYSTEMDOPTS} \
  --disable-systemd-daemon \
  --disable-gconf \
  --disable-hal-compat \
  --enable-asyncns \
  --enable-orc \
  --disable-esound \
  --disable-bluez4 \
  --disable-tcpwrap \
  --build=${SLKTARGET}-${SLKDTARGET}-linux || exit 1

sed -i -e 's/ -shared / -Wl,-O1,--as-needed\0/g' libtool

make -j${NJOBS} || make || exit $?
make doxygen || exit 1
make install DESTDIR=${PKG} bashcompletiondir=${bash_completion_dir} || exit $?

rm -f ${PKG}/usr/lib*/*.la ${PKG}/usr/lib*/*/*.la ${PKG}/usr/lib*/pulse-*/modules/*.la
# configure --disable-static had no effect; delete manually.
rm -f ${PKG}/usr/lib*/*.a ${PKG}/usr/lib*/*/*.a ${PKG}/usr/lib*/pulse-*/modules/*.a
chmod 0755 ${PKG}/usr/bin/pulseaudio

rm -f ${PKG}/usr/lib*/libpulsecore.so

rm -fv ${PKG}/usr/lib*/pulse-*/modules/module-detect.so

mv ${PKG}/etc/pulse/daemon.conf ${PKG}/etc/pulse/daemon.conf.new || exit 1
mv ${PKG}/etc/pulse/default.pa ${PKG}/etc/pulse/default.pa.new || exit 1
mv ${PKG}/etc/pulse/client.conf ${PKG}/etc/pulse/client.conf.new || exit 1
mv ${PKG}/etc/pulse/system.pa ${PKG}/etc/pulse/system.pa.new || exit 1

# preserve time stamps
touch -r src/daemon/daemon.conf.in ${PKG}/etc/pulse/daemon.conf.new
touch -r src/daemon/default.pa.in ${PKG}/etc/pulse/default.pa.new
[ "${SB_POLKIT}" = "YES" ] && \
  touch -r src/daemon/org.pulseaudio.policy ${PKG}/usr/share/PolicyKit/policy/org.pulseaudio.policy
touch -r man/pulseaudio.1.xml.in ${PKG}/usr/man/man1/pulseaudio.1
touch -r man/default.pa.5.xml.in ${PKG}/usr/man/man5/default.pa.5
touch -r man/pulse-client.conf.5.xml.in ${PKG}/usr/man/man5/pulse-client.conf.5
touch -r man/pulse-daemon.conf.5.xml.in ${PKG}/usr/man/man5/pulse-daemon.conf.5

mkdir -p ${PKG}/var/run/pulse ${PKG}/var/lib/pulse
chmod 0700 ${PKG}/var/lib/pulse

mkdir -p ${PKG}/usr/lib/tmpfiles.d
cat > ${PKG}/usr/lib/tmpfiles.d/${NAME}.conf <<EOF
d /run/pulse 0700 pulse pulse -
EOF

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

desktop-file-install --delete-original \
  --dir ${PKG}/etc/xdg/autostart \
  --remove-key Encoding \
${PKG}/etc/xdg/autostart/pulseaudio.desktop || exit 1

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  README LICENSE GPL LGPL doxygen/html ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
#!/bin/sh
function free_user_id {
  # Find a free user-ID >= 120 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}
# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up groups.
if ! grep --quiet '^pulse:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            pulse 2> /dev/null
fi
if ! grep --quiet '^pulse-rt:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            pulse-rt 2> /dev/null
fi
if ! grep --quiet '^pulse-access:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
            -g $(free_group_id) \
            pulse-access 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^pulse:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/run/pulse:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "pulse"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
            -d /var/run/pulse \
            -u ${USER_ID} \
            -s /bin/false \
            -g pulse \
            ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
           -d /var/run/pulse \
           -c "PulseAudio daemon" \
           -u $(free_user_id) \
           -s /bin/false \
           -g pulse \
           pulse
fi

# Add ld.so.conf.d directory to /etc/ld.so.conf:
if fgrep ld.so.conf.d etc/ld.so.conf 1> /dev/null 2> /dev/null ; then
  true
else
  echo 'include /etc/ld.so.conf.d/*.conf' >> etc/ld.so.conf
fi
EOF

cat >> ${PKG}/install/doinst.sh <<EOF
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}
## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name *.new -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions
${CHROOT} /bin/chown pulse.pulse /var/run/pulse
${CHROOT} /bin/chown pulse.pulse /var/lib/pulse
${CHROOT} /bin/chmod 0700 /var/lib/pulse
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches/
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
                 ${CWD}/${SNAPUPDATE} ${CWD}/apply-patches.sh ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
                 ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
                 ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution
set -e

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown pulse.pulse ./var/{run,lib}/pulse ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
