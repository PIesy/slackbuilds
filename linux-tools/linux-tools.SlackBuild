#!/bin/sh
#-- linux-tools for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ linux-tools.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2016 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://kernel.org/

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

PNAME=linux
NAME=linux-tools
PKG=${PKG:-${TMP}/package-${NAME}}

# x.y.z / z=0 when not existent in tarball, eg. 3.4 will be 3.4.0
VERSION=${VERSION:-4.8.15}
SVER="$( echo ${VERSION} | cut -d . -f 1-2 )"
if [ -z "$( echo ${VERSION} | cut -d . -f 3 )" ] ;then
  echo "Missing sublevel in VERSION: ${VERSION}.?!"
  exit 1
fi
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-1}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

# Set to YES to enable manpages
SB_DOC=${SB_DOC:-YES}

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${PNAME}-${SVER}
SRCARCHIVE=${SRCDIR}.tar.xz
SSRCARCHIVE=${SRCDIR}.tar.sign
PSRCARCHIVE=patch-${VERSION}.xz
PSSRCARCHIVE=patch-${VERSION}.sign

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_KERNEL=${MIRROR_KERNEL:-http://www.kernel.org/pub}
DL_URL="${MIRROR_KERNEL}/linux/kernel/v$(echo ${VERSION} | cut -d . -f 1).x"

# Test if needs a patch.
[ "$( echo ${VERSION} | cut -d . -f 3 )" -gt 0 ] && export SB_PATCH=YES

# if source is not present, download in source rootdir if possible
for file in ${SRCARCHIVE} ${SSRCARCHIVE} ;do
  test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
done
if [ "${SB_PATCH}" = "YES" ] ;then
  for file in ${PSRCARCHIVE} ${PSSRCARCHIVE} ;do
    test -r ${CWD}/${file} || ${DL_PROG} ${DL_OPTS} ${DL_URL}/${file} || exit 1
  done
fi

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi

if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
  SB_MAKEDIR=x86_64
else
  LIBDIRSUFFIX=""
  SB_MAKEDIR=i386
fi
[ "${ARCH}" = "s390" ] && exit 1
unset ARCH CFLAGS CXXFLAGS CPPFLAGS

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
if [ -x /usr/bin/filterdiff ] ;then
  unset _tarpattern _filterdiff
  for _pattern in {Makefile,tools/arch,tools/build,tools/include,tools/lib,tools/perf,tools/power,tools/scripts,include,lib,scripts,"arch/*/Makefile","arch/*/include","arch/*/lib"}; do
    _tarpattern="${_tarpattern} ${SRCDIR}/${_pattern}"
    _filterdiff="${_filterdiff} -i ${_pattern}/*"
  done
  tar --wildcards -xvf ${CWD}/${SRCARCHIVE} ${_tarpattern} || exit 1
else
  tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
fi
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ "${SB_PATCH}" = "YES" ] ;then
  echo "Applying upstream patch"
  if [ -x /usr/bin/filterdiff ] ;then
    filterdiff -p1 ${_filterdiff} -z ${CWD}/${PSRCARCHIVE} > ${SRCDIR}.patch || exit 1
    patch -p1 -i ${SRCDIR}.patch || exit 1
  else
    xzcat ${CWD}/${PSRCARCHIVE} | patch -p1 || exit 1
  fi
  echo "Upstream patches succeeded."
fi

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e 's|$(CFLAGS)|\0 $(LDFLAGS)|g' \
  tools/power/cpupower/debug/${SB_MAKEDIR}/Makefile || exit 1

sed -i -e 's|/share/man/|/man/|g' tools/power/x86/*/Makefile || exit 1

sed -i -e 's|-Werror -O6|-O2|g' tools/lib/api/Makefile || exit 1

export mandir=/usr/man
export V=1

( cd tools/perf || exit 1

  cp CREDITS ../../CREDITS.perf

sed -i \
  -e 's:-O6:-O2:' \
  -e 's:-Werror::' \
  -e 's:-ggdb3::' \
  -e 's:-fstack-protector-all::' \
  -e 's|$(HOME)|/usr|g' \
  -e '/^mandir/s|share/man|/usr/man|g' \
  -e "s|share/doc/perf-doc|doc/${NAME}-${VERSION}|g" \
  -e "s|share/doc/perf-tip|doc/${NAME}-${VERSION}/tip|g" \
  -e "/^lib =/s|=.*$|= lib${LIBDIRSUFFIX}|g" \
  Makefile.config || exit 1

completionsdir=$(pkg-config --variable=completionsdir bash-completion 2>/dev/null || echo /usr/share/bash-completion/completions)
sed -i \
  -e "s|\$(sysconfdir_SQ)/bash_completion.d|${completionsdir}|g" \
  Makefile.perf || exit 1

export prefix=/usr
export mandir=/usr/man
export EXTRA_CFLAGS="${SLKCFLAGS}"
export WERROR=0
export NO_LIBUNWIND=1
export HAVE_CPLUS_DEMANGLE=1
export STRIP=/bin/true
export NO_LIBUNWIND=1
export NO_GTK2=1
export NO_LIBNUMA=1
export NO_STRLCPY=1
export NO_BIONIC=1
export NO_PERF_READ_VDSO32=1
export NO_PERF_READ_VDSOX32=1
export JOBS=${NJOBS}
export DESTDIR=${PKG}

make all || exit $?
make install all DESTDIR=${PKG} || exit $?
make install-python_ext DESTDIR=${PKG} || exit $?

if [ "${SB_DOC}" = "YES" ] ;then
  make -j${NJOBS} man || make man || exit $?
  make install-man DESTDIR=${PKG}/ || exit $?
fi

) || exit $?

rm -f ${PKG}/usr/bin/trace

export CFLAGS=${SLKCFLAGS}

( cd tools/power/cpupower || exit 1

  cp README ../../../README.cpupower

  export prefix=/usr
  export MULTILIBDIR=lib${LIBDIRSUFFIX}
  export libdir=/usr/lib${LIBDIRSUFFIX}
  export mandir=/usr/man
  export docdir=/usr/doc/${NAME}-${VERSION}
  export CPUFREQ_BENCH=false

  # cpupower
  # make sure version-gen.sh is executable.
  chmod +x ./utils/version-gen.sh

  make -j${NJOBS} || make || exit $?
  make install DESTDIR=${PKG} || exit $?

) || exit $?

( cd tools/power/cpupower/debug/${SB_MAKEDIR} || exit 1

  make -j${NJOBS} || make || exit $?
  install -pm0755 centrino-decode powernow-k8-decode \
    ${PKG}/usr/bin/ || exit $?

) || exit $?

mkdir -p ${PKG}/usr/man/man8

for dir in turbostat x86_energy_perf_policy ;do
  ( cd tools/power/x86/${dir}/ || exit 1
    make -j${NJOBS} || make || exit $?
    make install DESTDIR=${PKG} || exit $?
  ) || exit $?
done

rm -f ${PKG}/usr/lib*/*.{a,la}

chmod 0755 ${PKG}/usr/lib*/libcpupower.so*

chmod 0644 ${PKG}/usr/share/bash-completion/completions/perf

mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.cpupower \
  ${PKG}/etc/rc.d/rc.cpupower.new || exit 1

mkdir -p ${PKG}/var/log/setup
install -pm0755 ${CWD}/setup.onlyonce.rccpupower \
  ${PKG}/var/log/setup/setup.onlyonce.rccpupower || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/cpupower.service ${PKG}/lib/systemd/system/ || exit 1

mkdir ${PKG}/etc/default
cat > ${PKG}/etc/default/cpupower.new <<'EOF'
# See 'cpupower help' and cpupower(1) for more info
CPUPOWER_START_OPTS="frequency-set -g performance"
CPUPOWER_STOP_OPTS="frequency-set -g ondemand"
EOF

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  CREDITS.perf README.cpupower ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
[ -r ChangeLog ] && head -n 1000 ChangeLog > ${DOCDIR}/ChangeLog
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644
find ${DOCDIR}/ -type f -size 0 -print0 | xargs -0 rm -f

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<EOF
# Figure out our root directory
ROOTDIR=\$(pwd)
unset CHROOT
if test "\${ROOTDIR}" != "/"; then
  CHROOT="chroot \${ROOTDIR} "
  ROOTDIR="\${ROOTDIR}/"
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.cpupower.new:
if [ -r etc/rc.d/rc.cpupower -a -r etc/rc.d/rc.cpupower.new ]; then
  chmod --reference=etc/rc.d/rc.cpupower etc/rc.d/rc.cpupower.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  find etc/ -name '*.new' -a -size 0 -exec echo rm -f {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*.service ${CWD}/rc.* ${CWD}/setup.*.rc* ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;"

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease preferably install fakeroot or run as root.\e[0m"
  exit 5
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
