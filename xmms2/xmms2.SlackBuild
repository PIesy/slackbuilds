#!/bin/sh
#-- xmms2 for Slackware --
# Build script by Phantom X <megaphantomx at bol.com.br>
# Suggested usage: $ xmms2.SlackBuild 2>&1 | tee build.log
#--
# Copyright 2008-2015 Phantom X, Goiania, Brazil.
# Copyright 2006 Martijn Dekker, Groningen, Netherlands.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# http://wiki.xmms2.xmms.se

PACKAGER_ID=${PACKAGER_ID:-$USER}
PACKAGER=${PACKAGER:-$USER@$HOSTNAME}

# Set YES for native build with gcc >= 4.2
SB_NATIVE=${SB_NATIVE:-NO}

# Set to YES to replicate slackbuild and patches
SB_REP=${SB_REP:-YES}

CWD=$(pwd)
TMP=${TMP:-/tmp}
if [ ! -d ${TMP} ]; then
  mkdir -p ${TMP}
fi

NAME=xmms2
PKG=${PKG:-${TMP}/package-${NAME}}

VERSION=${VERSION:-0.8}
CODE=${CODE:-DrO_o}
if [ "${SB_NATIVE}" = "YES" ] ;then
  ARCH=${ARCH:-$(uname -m)}
else
  ARCH=${ARCH:-x86_64}
fi
if [ "${ARCH}" = "x86_64" ] ;then
  SLKTARGET=${SLKTARGET:-x86_64}
else
  SLKTARGET=${SLKTARGET:-i586}
fi
SLKDTARGET=${SLKDTARGET:-slackware}
BUILD=${BUILD:-7}
NJOBS=${NJOBS:-$(( $(getconf _NPROCESSORS_ONLN) + 1 ))}
DOCDIR=${PKG}/usr/doc/${NAME}-${VERSION}
SBDIR=${PKG}/usr/src/slackbuilds/${NAME}
PKGDEST=${PKGDEST:-${CWD}}
PKGFORMAT=${PKGFORMAT:-txz}
PKGNAME=${NAME}-$(echo ${VERSION} | tr - . )-${ARCH}-${BUILD}${PACKAGER_ID}

grep --quiet '^xmms2:' /etc/group && SB_HGROUP=1
grep --quiet '^xmms2:' /etc/passwd && SB_HUSER=1

# Set to YES to enable libavcodec plugin
SB_FFMPEG=${SB_FFMPEG:-YES}
# Set to YES to set pulse as default
SB_PA=${SB_PA:-NO}

PERLVENDORARCH=$(eval "$(perl -V:vendorarch)"; echo ${vendorarch})
RUBYVER=$(ruby -r rbconfig -e 'print RbConfig::CONFIG["ruby_version"]')
RBVENDORLIB=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["vendorlibdir"]')
RBVENDORARCH=$(ruby -rrbconfig -e 'puts RbConfig::CONFIG["vendorarchdir"]')

DATE=$(LC_ALL=C date +%d-%b-%Y)

SRCDIR=${NAME}-${VERSION}${CODE}
SRCARCHIVE=${SRCDIR}.tar.bz2

DL_PROG=${DL_PROG:-wget}
DL_TO=${DL_TO:-5}
DL_OPTS=${DL_OPTS:-"--timeout=${DL_TO}"}
MIRROR_SF=${MIRROR_SF:-http://prdownloads.sourceforge.net}
DL_URL="${MIRROR_SF}/${NAME}/${SRCARCHIVE}"

# if source is not present, download in source rootdir if possible
test -r ${CWD}/${SRCARCHIVE} || ${DL_PROG} ${DL_OPTS} ${DL_URL} || exit 1

if [ "${SB_NATIVE}" = "YES" ] ;then
  SLKCFLAGS="-O2 -march=native -mtune=native -pipe"
  [ "${SB_ECFLAGS}" ] && SLKCFLAGS="${SLKCFLAGS} ${SB_ECFLAGS}"
else
  case "${ARCH}" in
    i[3-6]86)    SLKCFLAGS="-O2 -march=${ARCH} -mtune=i686"
                 ;;
    x86_64)      SLKCFLAGS="-O2 -fPIC"
                 ;;
    s390|*)      SLKCFLAGS="-O2"
                 ;;
  esac
fi
if [ "${ARCH}" = "x86_64" ] ;then
  LIBDIRSUFFIX="64"
  SLKCFLAGS="${SLKCFLAGS} -fPIC"
else
  LIBDIRSUFFIX=""
fi

if [ -d ${PKG} ]; then
  # Clean up a previous build
  rm -rf ${PKG}
fi
mkdir -p ${PKG}

cd ${TMP}
rm -rf ${SRCDIR}
tar -xvf ${CWD}/${SRCARCHIVE} || exit 1
cd ${SRCDIR} || exit 1

chmod -R u+w,go+r-w,a-s .

if [ -r ${CWD}/apply-patches.sh ]; then
  . ${CWD}/apply-patches.sh
fi

sed -i -e "/'-O0/d" wscript || exit 1

sed -i -e 's:cdio/cdda.h:cdio/paranoia/cdda.h:' src/plugins/cdda/cdda.c || exit 1

[ "${SB_FFMPEG}" = "YES" ] || sed -i -e 's|libavcodec|\0-disabled|g' src/plugins/avcodec/wscript

export LIBDIR="/usr/lib${LIBDIRSUFFIX}"

./waf configure -j1

sed -i -e 's|puts Config|puts RbConfig|g' .waf-*/waflib/Tools/ruby.py

CFLAGS="${SLKCFLAGS}" \
CXXFLAGS="${SLKCFLAGS}" \
CPPFLAGS="${CPPFLAGS} $(pkg-config smbclient sndfile --cflags) -I/usr/include/libmodplug" \
LINKFLAGS="${LDFLAGS}" \
./waf configure -j1 \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --infodir=/usr/info \
  --mandir=/usr/man \
  --docdir=/usr/doc/${NAME}-${VERSION} \
  --with-pixmap-dir=/usr/share/pixmaps/${NAME} \
  --with-pkgconfigdir=/usr/lib${LIBDIRSUFFIX}/pkgconfig \
  --with-perl-archdir=${PERLVENDORARCH} \
  --with-ruby-libdir=${RBVENDORLIB} \
  --with-ruby-archdir=${RBVENDORARCH} \
  --with-custom-version=${BUILD}${PACKAGER_ID} \
  --no-cython \
  || exit 1

./waf build -j${NJOBS} -v || exit 1
./waf install -v --destdir=${PKG} || exit 1

chmod 0755 ${PKG}/usr/lib*/*.so.* || exit 1
chmod 0755 ${PKG}/usr/lib*/${NAME}/*.so || exit 1

find ${PKG}/usr/lib* -name '*.so*' -exec chmod 0755 {} ';'

install -pm0755 ${CWD}/xmms2-client-launcher.sh \
  ${PKG}/usr/bin/ || exit 1

mkdir -p ${PKG}/etc/${NAME}

find ${PKG} | xargs file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

mkdir -p ${PKG}/usr/share/icons/hicolor/scalable/apps
install -m0644 pixmaps/${NAME}.svg \
  ${PKG}/usr/share/icons/hicolor/scalable/apps/${NAME}.svg || exit 1

if [ -x /usr/bin/rsvg-convert ] ;then
  for res in 16 20 22 24 32 36 48 64 72 96 128 192 256 512 ;do
    dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
    mkdir -p ${dir}
    rsvg-convert pixmaps/${NAME}.svg -h ${res} -w ${res} \
      -o ${dir}/${NAME}.png || exit 1
  done
else
  for res in 16 32 48 128 ;do
    dir=${PKG}/usr/share/icons/hicolor/${res}x${res}/apps
    mkdir -p ${dir}
    install -m0644 pixmaps/${NAME}-${res}.png \
      ${dir}/${NAME}.png || exit 1
  done
fi

mkdir -p ${PKG}/etc/default
cat > ${PKG}/etc/default/xmms2d.new <<EOF
# /etc/default/mpd
# Change this to the user you want to run xmms2 as.
# You may specify a group too, after a colon
XMMS2_USER="xmms2:xmms2"

# xmms2d daemon extra parameters
#XMMS2_OPTIONS=
EOF

# Startup scripts.
mkdir -p ${PKG}/etc/rc.d
install -pm0755 ${CWD}/rc.${NAME}d \
  ${PKG}/etc/rc.d/rc.${NAME}d.new || exit 1

mkdir -p ${PKG}/var/log/setup
install -pm0755 ${CWD}/setup.onlyonce.rc${NAME}d \
  ${PKG}/var/log/setup/setup.onlyonce.rc${NAME}d || exit 1

mkdir -p ${PKG}/lib/systemd/system
install -pm0644 ${CWD}/${NAME}d.service ${PKG}/lib/systemd/system/ || exit 1

mkdir -p ${PKG}/var/lib/${NAME}

# Add a documentation directory:
mkdir -p ${DOCDIR}
cp -a \
  AUTHORS COPYING* ChangeLog README NEWS THANKS TODO ${CWD}/ChangeLog.SB \
  ${DOCDIR}/
find ${DOCDIR}/ -type d -print0 | xargs -0 chmod 0755
find ${DOCDIR}/ -type f -print0 | xargs -0 chmod 0644

# Compress and link manpages, if any:
if [ -d ${PKG}/usr/share/man ]; then
  mv ${PKG}/usr/share/man ${PKG}/usr/man
  rmdir ${PKG}/usr/share
fi
if [ -d ${PKG}/usr/man ]; then
  ( cd ${PKG}/usr/man
    for manpagedir in $(find . -type d -name "man*") ; do
      ( cd ${manpagedir}
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink ${eachpage} ).gz ${eachpage}.gz
          rm -f ${eachpage}
        done
        gzip -9 *.?
        # Prevent errors
        rm -f *.gz.gz
      )
    done
  )
fi

mkdir -p ${PKG}/install
cat ${CWD}/slack-desc > ${PKG}/install/slack-desc
cat ${CWD}/slack-required > ${PKG}/install/slack-required

cat > ${PKG}/install/doinst.sh <<'EOF'
function free_user_id {
  # Find a free user-ID >= 120 (should be < 1000 so it's not a normal user)
  local FREE_USER_ID=100
  while grep --quiet "^.*:.*:${FREE_USER_ID}:.*:.*:.*:" etc/passwd; do
    let FREE_USER_ID++
  done
  echo ${FREE_USER_ID}
}
function free_group_id {
  # Find a free group-ID >= 120 (should be < 1000 so it's not a normal group)
  local FREE_GROUP_ID=120
  while grep --quiet "^.*:.*:${FREE_GROUP_ID}:" etc/group; do
    let FREE_GROUP_ID++
  done
  echo ${FREE_GROUP_ID}
}

# Figure out our root directory
ROOTDIR=$(pwd)
unset CHROOT
if test "${ROOTDIR}" != "/"; then
  CHROOT="chroot ${ROOTDIR} "
  ROOTDIR="${ROOTDIR}/"
fi

# Set up group.
if ! grep --quiet '^xmms2:' etc/group ;then
  ${CHROOT} /usr/sbin/groupadd \
    -g $(free_group_id) \
    xmms2 2> /dev/null
fi

# Set up user: add it if it doesn't exist, update it if it already does.
if OLD_ENTRY=$(grep --max-count=1 '^xmms2:' etc/passwd) \
  || OLD_ENTRY=$(grep --max-count=1 \
  ':/var/lib/xmms2:[a-z/]*$' etc/passwd)
then
  # Modify existing user
  OLD_USER=$(echo ${OLD_ENTRY} | cut --fields=1 --delimiter=':')
  USER_ID=$(echo ${OLD_ENTRY} | cut --fields=3 --delimiter=':')
  test ${USER_ID} -ge 1000 && USER_ID=$(free_user_id)
  if test "${OLD_USER}" = "xmms2"; then
    echo -n "Updating unprivileged user" 1>&2
  else
    echo -ne "Changing unprivileged user \e[1m${OLD_USER}\e[0m to" 1>&2
  fi
  ${CHROOT} /usr/sbin/usermod \
    -d /var/lib/xmms2 \
    -u ${USER_ID} \
    -s /bin/false \
    -g xmms2 \
    -G audio \
    ${OLD_USER}
else
  # Add new user
  echo -n "Creating unprivileged user" 1>&2
  ${CHROOT} /usr/sbin/useradd \
    -d /var/lib/xmms2 \
    -c "XMMS2 daemon" \
    -u $(free_user_id) \
    -s /bin/false \
    -g xmms2 \
    -G audio \
    xmms2
fi

EOF

cat >> ${PKG}/install/doinst.sh <<EOF
if [ -x usr/bin/gtk-update-icon-cache ]; then
  \${CHROOT} /usr/bin/touch --no-create /usr/share/icons/hicolor >/dev/null 2>&1
  \${CHROOT} /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
fi

config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

# Keep same perms on rc.${NAME}d.new:
if [ -r etc/rc.d/rc.${NAME}d -a -r etc/rc.d/rc.${NAME}d.new ]; then
  chmod --reference=etc/rc.d/rc.${NAME}d etc/rc.d/rc.${NAME}d.new
fi

## List of conf files to check.  The conf files in your package should end in .new
EOF

( cd ${PKG}
  find etc/ -name '*.new' -exec echo config {} ';' | sort >> ${PKG}/install/doinst.sh
  echo >> ${PKG}/install/doinst.sh
)

cat >> ${PKG}/install/doinst.sh <<'EOF'
# Fix permissions
${CHROOT} /bin/chown -R xmms2.xmms2 /var/lib/xmms2

if [ -x bin/systemctl ] ; then
  ${CHROOT} /bin/systemctl --system daemon-reload >/dev/null 2>&1
fi
EOF

sed -i "s|_PACKAGER|${PACKAGER}|g; s|_BUILD_DATE|${DATE}|g" \
       ${PKG}/install/slack-desc

if [ "${SB_REP}" = "YES" ] ;then
  # Replicate slackbuild and patches
  mkdir -p ${SBDIR}/patches
  install -m0644 ${CWD}/slack-desc ${CWD}/slack-required ${CWD}/ChangeLog.SB \
    ${CWD}/apply-patches.sh ${CWD}/*-launcher.sh ${CWD}/rc.${NAME}d \
    ${CWD}/setup.*.rc${NAME}d ${CWD}/*.service ${SBDIR}/
  install -m0755 ${CWD}/${NAME}.SlackBuild \
    ${SBDIR}/${NAME}.SlackBuild
  install -m0644 ${CWD}/patches/*.* \
    ${SBDIR}/patches/
  rmdir ${SBDIR}/patches
fi

# Build package:
set +o xtrace        # no longer print commands upon execution

ROOTCOMMANDS="set -o errexit -o xtrace ; cd ${PKG} ;
  /bin/chown --recursive root:root .  ;
  [ \"${SB_HGROUP}\" = 1 ] && [ \"${SB_HUSER}\" = 1 ] && /bin/chown -R xmms2.xmms2 ./var/lib/xmms2 ; "

ROOTCOMMANDS="${ROOTCOMMANDS}
  /sbin/makepkg --prepend --linkadd y --chown n ${PKGDEST}/${PKGNAME}.${PKGFORMAT} "

if test ${UID} = 0; then
  eval ${ROOTCOMMANDS}
  set +o xtrace
elif test "$(type -t fakeroot)" = 'file'; then
  echo -e "\e[1mEntering fakeroot environment.\e[0m"
  echo ${ROOTCOMMANDS} | fakeroot
else
  echo -e "\e[1mPlease enter your root password.\e[0m (Consider installing fakeroot.)"
  /bin/su -c "${ROOTCOMMANDS}"
fi

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  echo "Cleaning..."
  if [ -d ${TMP}/${SRCDIR} ]; then
    rm -rf ${TMP}/${SRCDIR} && echo "${TMP}/${SRCDIR} cleanup completed"
  fi
  if [ -d ${PKG} ]; then
    rm -rf ${PKG} && echo "${PKG} cleanup completed"
  fi
  rmdir ${TMP} && echo "${TMP} cleanup completed"
fi
exit 0
